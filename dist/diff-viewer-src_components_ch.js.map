{"version":3,"file":"diff-viewer-src_components_ch.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAA0C;AACY;AACJ;AACQ;AACU;;AAEpE;AACA;AACA;AACO,IAAMK,aAAa;EACtB;AACJ;AACA;EACI,SAAAA,cAAYC,YAAY,EAAE;IAAAC,eAAA,OAAAF,aAAA;IACtB,IAAI,CAACC,YAAY,GAAGA,YAAY;EACpC;;EAEA;AACJ;AACA;EAFI,OAAAE,YAAA,CAAAH,aAAA;IAAAI,GAAA;IAAAC,KAAA,EAGA,SAAAC,YAAYA,CAAA,EAAG;MACXX,+CAAK,CAACY,GAAG,CAAC,0CAA0C,EAAE,IAAI,EAAE,CAAC,CAAC;;MAE9D;MACA,IAAIC,QAAQ,GAAG,IAAI;MACnB,IAAI,IAAI,CAACP,YAAY,CAACQ,MAAM,CAACC,MAAM,GAAG,GAAG,EAAE;QACvC,IAAMC,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;QAC3D,IAAMC,aAAa,GAAGf,+DAAa,CAACc,WAAW,CAAC,CAAC;QACjD,IAAME,cAAc,GAAGH,kBAAkB,CAACI,GAAG,CAAC,eAAe,EAAE,mBAAmB,CAAC;QAEnFP,QAAQ,GAAGK,aAAa,CAACG,UAAU,CAACF,cAAc,EAAE;UAChDG,UAAU,EAAE,IAAI;UAChBC,MAAM,EAAE;QACZ,CAAC,CAAC;QAEFvB,+CAAK,CAACY,GAAG,CAAC,wDAAwD,EAAE,IAAI,EAAE,CAAC,CAAC;MAChF;;MAEA;MACA,IAAMY,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;;MAEnC;MACA,IAAMC,QAAQ,GAAG,IAAI,CAACC,iBAAiB,CAAC,IAAI,CAACtB,YAAY,CAACuB,UAAU,EAAE,MAAM,CAAC;MAC7E,IAAMC,SAAS,GAAG,IAAI,CAACF,iBAAiB,CAAC,IAAI,CAACtB,YAAY,CAACyB,UAAU,EAAE,OAAO,CAAC;;MAE/E;MACA;MACA,IAAI,CAACzB,YAAY,CAAC0B,UAAU,CAACC,SAAS,CAACC,SAAS,iCAAAC,MAAA,CAC9BjC,4DAAS,CAACkC,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,CAAC,wCAAAH,MAAA,CACjCjC,4DAAS,CAACkC,IAAI,CAACG,IAAI,CAACD,IAAI,CAAC,CAAC,cAAAH,MAAA,CAASjC,4DAAS,CAACkC,IAAI,CAACI,SAAS,CAACF,IAAI,CAAC,CAAC,kDAAAH,MAAA,CAC1ER,QAAQ,6DAAAQ,MAAA,CAEAjC,4DAAS,CAACkC,IAAI,CAACG,IAAI,CAACD,IAAI,CAAC,CAAC,cAAAH,MAAA,CAASjC,4DAAS,CAACkC,IAAI,CAACK,UAAU,CAACH,IAAI,CAAC,CAAC,mDAAAH,MAAA,CAC3EL,SAAS,2DAGtB;;MAED;MACA,IAAIjB,QAAQ,EAAE;QACV,IAAMK,cAAa,GAAGf,+DAAa,CAACc,WAAW,CAAC,CAAC;QACjDC,cAAa,CAACwB,UAAU,CAAC7B,QAAQ,CAAC;;QAElC;QACA,IAAM8B,OAAO,GAAGlB,WAAW,CAACC,GAAG,CAAC,CAAC;QACjC,IAAMkB,QAAQ,GAAGD,OAAO,GAAGnB,SAAS;QACpCxB,+CAAK,CAACY,GAAG,4BAAAuB,MAAA,CAA4B,IAAI,CAAC7B,YAAY,CAACQ,MAAM,CAACC,MAAM,iBAAAoB,MAAA,CAAcS,QAAQ,CAACC,OAAO,CAAC,CAAC,CAAC,SAAM,IAAI,EAAE,CAAC,CAAC;MACvH,CAAC,MAAM;QACH7C,+CAAK,CAACY,GAAG,4BAAAuB,MAAA,CAA4B,IAAI,CAAC7B,YAAY,CAACQ,MAAM,CAACC,MAAM,2BAAwB,IAAI,EAAE,CAAC,CAAC;MACxG;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAN,GAAA;IAAAC,KAAA,EAMA,SAAAkB,iBAAiBA,CAACkB,KAAK,EAAEC,IAAI,EAAE;MAC3B;MACA,IAAMC,sBAAsB,GAAG,IAAIC,GAAG,CAAC,CAAC;MAAC,IAAAC,SAAA,GAAAC,0BAAA,CACtBL,KAAK;QAAAM,KAAA;MAAA;QAAxB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA0B;UAAA,IAAfC,IAAI,GAAAJ,KAAA,CAAA1C,KAAA;UACX,IAAI8C,IAAI,CAACC,IAAI,KAAK,aAAa,IAAID,IAAI,CAACE,OAAO,EAAE;YAC7CV,sBAAsB,CAACW,GAAG,CAACH,IAAI,CAACE,OAAO,CAAC;UAC5C;QACJ;;QAEA;MAAA,SAAAE,GAAA;QAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;MAAA;QAAAV,SAAA,CAAAY,CAAA;MAAA;MACA,IAAIC,IAAI,mBAAA5B,MAAA,CAAkBjC,4DAAS,CAACkC,IAAI,CAAC4B,YAAY,CAAC1B,IAAI,CAAC,CAAC,aAAS,CAAC,CAAC;MACvEyB,IAAI,oBAAA5B,MAAA,CAAmBjC,4DAAS,CAACkC,IAAI,CAAC6B,aAAa,CAAC3B,IAAI,CAAC,CAAC,QAAI;MAC9DyB,IAAI,sBAAA5B,MAAA,CAAqBjC,4DAAS,CAACgE,IAAI,CAACC,KAAK,CAAC7B,IAAI,CAAC,CAAC,eAAW;MAE/D,IAAI8B,WAAW,GAAG,CAAC;MAAC,IAAAC,UAAA,GAAAlB,0BAAA,CAEDL,KAAK;QAAAwB,MAAA;MAAA;QAAxB,KAAAD,UAAA,CAAAhB,CAAA,MAAAiB,MAAA,GAAAD,UAAA,CAAAf,CAAA,IAAAC,IAAA,GAA0B;UAAA,IAAfC,KAAI,GAAAc,MAAA,CAAA5D,KAAA;UACXqD,IAAI,IAAI,IAAI,CAACQ,eAAe,CAACf,KAAI,EAAET,IAAI,EAAE,EAAEqB,WAAW,EAAEpB,sBAAsB,CAAC;QACnF;MAAC,SAAAY,GAAA;QAAAS,UAAA,CAAAR,CAAA,CAAAD,GAAA;MAAA;QAAAS,UAAA,CAAAP,CAAA;MAAA;MAEDC,IAAI,IAAI,kBAAkB;MAC1BA,IAAI,IAAI,QAAQ,CAAC,CAAC;MAClBA,IAAI,IAAI,QAAQ,CAAC,CAAC;;MAElB,OAAOA,IAAI;IACf;;IAEA;AACJ;AACA;AACA;EAHI;IAAAtD,GAAA;IAAAC,KAAA,EAIA,SAAA6D,eAAeA,CAACf,IAAI,EAAET,IAAI,EAAEyB,UAAU,EAAExB,sBAAsB,EAAE;MAC5D,IAAIe,IAAI,GAAG,MAAM;MAEjB,IAAML,OAAO,GAAGF,IAAI,CAACE,OAAO,KAAKe,SAAS,GAAGjB,IAAI,CAACE,OAAO,GAAG,EAAE;;MAE9D;MACA,IAAIgB,SAAS,GAAG,EAAE;MAClB,IAAIhB,OAAO,KAAK,EAAE,EAAE;QAChB,IAAMiB,KAAK,GAAG,IAAI,CAACrE,YAAY,CAACQ,MAAM,CAAC8D,IAAI,CAAC,UAAAC,CAAC;UAAA,OAAIA,CAAC,CAACC,EAAE,KAAKpB,OAAO;QAAA,EAAC;QAClEgB,SAAS,GAAGC,KAAK,GAAGA,KAAK,CAAClB,IAAI,GAAG,EAAE;MACvC;;MAEA;MACAM,IAAI,mBAAA5B,MAAA,CAAkBjC,4DAAS,CAACgE,IAAI,CAACa,WAAW,CAACzC,IAAI,CAAC,CAAC,SAAAH,MAAA,CAAKqC,UAAU,UAAO;;MAE7E;MACA,IAAMQ,cAAc,GAAGtB,OAAO,KAAK,EAAE,IAAIV,sBAAsB,CAACiC,GAAG,CAACvB,OAAO,CAAC;MAE5E,IAAIF,IAAI,CAACC,IAAI,KAAK,aAAa,EAAE;QAC7BM,IAAI,IAAI,IAAI,CAACmB,sBAAsB,CAAC1B,IAAI,EAAEE,OAAO,EAAEgB,SAAS,EAAE3B,IAAI,EAAEyB,UAAU,CAAC;MACnF,CAAC,MAAM;QACHT,IAAI,IAAI,IAAI,CAACoB,kBAAkB,CAAC3B,IAAI,EAAEE,OAAO,EAAEgB,SAAS,EAAE3B,IAAI,EAAEyB,UAAU,EAAEQ,cAAc,CAAC;MAC/F;MAEAjB,IAAI,IAAI,OAAO;MACf,OAAOA,IAAI;IACf;;IAEA;AACJ;AACA;AACA;EAHI;IAAAtD,GAAA;IAAAC,KAAA,EAIA,SAAAwE,sBAAsBA,CAAC1B,IAAI,EAAEE,OAAO,EAAEgB,SAAS,EAAE3B,IAAI,EAAEyB,UAAU,EAAE;MAC/D;MACA,IAAIY,eAAe,GAAG,EAAE;MACxB,IAAI1B,OAAO,KAAK,EAAE,EAAE;QAChB;QACA0B,eAAe,QAAAjD,MAAA,CAAQjC,4DAAS,CAACkC,IAAI,CAACiD,KAAK,CAAC/C,IAAI,CAAC,CAAC,CAAE;QAEpD,IAAIkB,IAAI,CAAC8B,QAAQ,IAAIZ,SAAS,KAAK,SAAS,IAAIA,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,QAAQ,EAAE;UAC3FU,eAAe,QAAAjD,MAAA,CAAQjC,4DAAS,CAACqF,MAAM,CAACC,UAAU,CAAClD,IAAI,CAAC,CAAC,CAAE;QAC/D;MACJ;MAEA,sBAAAH,MAAA,CAAqBjC,4DAAS,CAACgE,IAAI,CAACuB,YAAY,CAACnD,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACkC,IAAI,CAACsD,kBAAkB,CAACpD,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACkC,IAAI,CAACuD,gBAAgB,CAACrD,IAAI,CAAC,CAAC,EAAAH,MAAA,CAAGiD,eAAe,6CAAAjD,MAAA,CACnIuB,OAAO,+CAAAvB,MAAA,CACLuC,SAAS,yCAAAvC,MAAA,CACfY,IAAI,qDAAAZ,MAAA,CACQqB,IAAI,CAACoC,eAAe,IAAI,SAAS,4CAAAzD,MAAA,CAC1CY,IAAI,OAAAZ,MAAA,CAAIqC,UAAU;IAEjD;;IAEA;AACJ;AACA;AACA;EAHI;IAAA/D,GAAA;IAAAC,KAAA,EAIA,SAAAyE,kBAAkBA,CAAC3B,IAAI,EAAEE,OAAO,EAAEgB,SAAS,EAAE3B,IAAI,EAAEyB,UAAU,EAAEQ,cAAc,EAAE;MAC3E,IAAMa,WAAW,GAAGrC,IAAI,CAACA,IAAI;MAC7B,IAAMsC,OAAO,GAAG,CAACD,WAAW,IAAIA,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,IAAI;;MAE5E;MACA,IAAIT,eAAe,GAAG,EAAE;MACxB,IAAI1B,OAAO,KAAK,EAAE,EAAE;QAChB0B,eAAe,GAAG,IAAI,CAACW,cAAc,CAACrB,SAAS,EAAE3B,IAAI,CAAC;;QAEtD;QACAqC,eAAe,QAAAjD,MAAA,CAAQjC,4DAAS,CAACkC,IAAI,CAACiD,KAAK,CAAC/C,IAAI,CAAC,CAAC,CAAE;;QAEpD;QACA,IAAIkB,IAAI,CAAC8B,QAAQ,IAAIZ,SAAS,KAAK,SAAS,IAAIA,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,QAAQ,EAAE;UAC3FU,eAAe,QAAAjD,MAAA,CAAQjC,4DAAS,CAACqF,MAAM,CAACC,UAAU,CAAClD,IAAI,CAAC,CAAC,CAAE;QAC/D;MACJ;MAEA,IAAIwD,OAAO,EAAE;QACTV,eAAe,QAAAjD,MAAA,CAAQjC,4DAAS,CAACgE,IAAI,CAAC8B,UAAU,CAAC1D,IAAI,CAAC,CAAC,CAAE;QACzD,sBAAAH,MAAA,CAAqBjC,4DAAS,CAACgE,IAAI,CAACuB,YAAY,CAACnD,IAAI,CAAC,CAAC,EAAAH,MAAA,CAAGiD,eAAe,iDAAAjD,MAAA,CAC7CuB,OAAO,mDAAAvB,MAAA,CACLuC,SAAS,6CAAAvC,MAAA,CACfY,IAAI,gDAAAZ,MAAA,CACDY,IAAI,OAAAZ,MAAA,CAAIqC,UAAU,iCAAArC,MAAA,CAChC6C,cAAc,GAAG,6BAA6B,GAAG,EAAE;MACpE,CAAC,MAAM;QACH;QACA,IAAMiB,cAAc,GAAGhG,2DAAW,CAACiG,UAAU,GACtBjG,2DAAW,CAACiG,UAAU,CAACL,WAAW,CAAC,GACnCA,WAAW,CAACM,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;;QAE9E;QACA,IAAMC,SAAS,GAAG1C,OAAO,KAAK,EAAE,GAAG,2BAA2B,GAAG,EAAE;QAEnE,sBAAAvB,MAAA,CAAqBjC,4DAAS,CAACgE,IAAI,CAACuB,YAAY,CAACnD,IAAI,CAAC,CAAC,EAAAH,MAAA,CAAGiD,eAAe,iDAAAjD,MAAA,CAC7CuB,OAAO,mDAAAvB,MAAA,CACLuC,SAAS,6CAAAvC,MAAA,CACfY,IAAI,gDAAAZ,MAAA,CACDY,IAAI,OAAAZ,MAAA,CAAIqC,UAAU,iCAAArC,MAAA,CAChC6C,cAAc,GAAG,6BAA6B,GAAG,EAAE,EAAA7C,MAAA,CAAGiE,SAAS,OAAAjE,MAAA,CAAI8D,cAAc;MAClG;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAxF,GAAA;IAAAC,KAAA,EAIA,SAAAqF,cAAcA,CAACrB,SAAS,EAAE3B,IAAI,EAAE;MAC5B,IAAI2B,SAAS,KAAK,QAAQ,IAAI3B,IAAI,KAAK,MAAM,EAAE;QAC3C,WAAAZ,MAAA,CAAWjC,4DAAS,CAACkC,IAAI,CAACiE,WAAW,CAAC/D,IAAI,CAAC,CAAC;MAChD,CAAC,MAAM,IAAIoC,SAAS,KAAK,KAAK,IAAI3B,IAAI,KAAK,OAAO,EAAE;QAChD,WAAAZ,MAAA,CAAWjC,4DAAS,CAACkC,IAAI,CAACkE,QAAQ,CAAChE,IAAI,CAAC,CAAC;MAC7C,CAAC,MAAM,IAAIoC,SAAS,KAAK,SAAS,EAAE;QAChC,IAAI6B,GAAG,OAAApE,MAAA,CAAOjC,4DAAS,CAACkC,IAAI,CAACkE,QAAQ,CAAChE,IAAI,CAAC,CAAC,CAAE;QAC9C,IAAIS,IAAI,KAAK,MAAM,EAAE;UACjBwD,GAAG,QAAApE,MAAA,CAAQjC,4DAAS,CAACkC,IAAI,CAACoE,iBAAiB,CAAClE,IAAI,CAAC,CAAC,CAAE;QACxD,CAAC,MAAM;UACHiE,GAAG,QAAApE,MAAA,CAAQjC,4DAAS,CAACkC,IAAI,CAACqE,kBAAkB,CAACnE,IAAI,CAAC,CAAC,CAAE;QACzD;QACA,OAAOiE,GAAG;MACd;MACA,OAAO,EAAE;IACb;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrOqC;AACM;AACE;AACE;AACI;AACY;AACV;AAEU;;AAEpE;AACA;AACA;AACO,IAAMO,qBAAqB;EAC9B;AACJ;AACA;EACI,SAAAA,sBAAYxG,YAAY,EAAE;IAAAC,eAAA,OAAAuG,qBAAA;IACtB,IAAI,CAACxG,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACyG,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,CAACC,kBAAkB,GAAG,IAAIH,6EAAuB,CAACvG,YAAY,CAAC;;IAEnE;IACA,IAAI,CAAC2G,QAAQ,GAAG/G,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC;IACpD,IAAI,CAAC6E,UAAU,GAAGjH,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC;;IAExD;IACA,IAAI,CAAC+E,mBAAmB,GAAG;MACvBC,iBAAiB,EAAE,CAAC;MACpBC,cAAc,EAAE;IACpB,CAAC;EACL;;EAEA;AACJ;AACA;EAFI,OAAA/G,YAAA,CAAAsG,qBAAA;IAAArG,GAAA;IAAAC,KAAA,EAGA,SAAA8G,mBAAmBA,CAAA,EAAG;MAAA,IAAAC,KAAA;MAClB;MACA,IAAI,CAACC,kBAAkB,GAAG,UAACC,KAAK;QAAA,OAAKF,KAAI,CAACG,YAAY,CAACD,KAAK,CAAC;MAAA;MAC7D,IAAI,CAACE,qBAAqB,GAAG,UAACF,KAAK;QAAA,OAAKF,KAAI,CAACK,eAAe,CAACH,KAAK,CAAC;MAAA;;MAEnE;MACA;MACAjB,qDAAQ,CAACqB,kBAAkB,CACvB,yCAAyC,EACzC,OAAO,EACP,IAAI,CAACL,kBAAkB,EACvB;QACIM,cAAc,EAAE,IAAI;QACpBC,MAAM,EAAE;UAAEC,MAAM,EAAE;QAAU;MAChC,CACJ,CAAC;;MAED;MACA,IAAI,CAACC,qBAAqB,CAAC,CAAC;;MAE5B;MACAxB,yDAAU,CAACyB,UAAU,CAAC,CAAC;MAEvBpI,+CAAK,CAACY,GAAG,CAAC,8EAA8E,EAAE,IAAI,EAAE,CAAC,CAAC;IACtG;;IAEA;AACJ;AACA;AACA;EAHI;IAAAH,GAAA;IAAAC,KAAA,EAIA,SAAAyH,qBAAqBA,CAAA,EAAG;MACpB;MACA,IAAME,KAAK,GAAG,IAAI,CAAC/H,YAAY,CAAC0B,UAAU,CAACC,SAAS,CAACqG,gBAAgB,CAACpI,4DAAS,CAACkC,IAAI,CAACG,IAAI,CAAC;MAE1F,IAAI8F,KAAK,CAACtH,MAAM,KAAK,CAAC,EAAE;QACpBf,+CAAK,CAACY,GAAG,CAAC,+EAA+E,EAAE,IAAI,EAAE,CAAC,CAAC;QACnG;MACJ;MAEA,IAAM2H,QAAQ,GAAGF,KAAK,CAAC,CAAC,CAAC;MACzB,IAAMG,SAAS,GAAGH,KAAK,CAAC,CAAC,CAAC;;MAE1B;MACA,IAAI,CAACI,2BAA2B,CAACF,QAAQ,EAAE,MAAM,CAAC;MAClD,IAAI,CAACE,2BAA2B,CAACD,SAAS,EAAE,OAAO,CAAC;IACxD;;IAEA;AACJ;AACA;AACA;EAHI;IAAA/H,GAAA;IAAAC,KAAA,EAIA,SAAA+H,2BAA2BA,CAACC,IAAI,EAAE3F,IAAI,EAAE;MACpC;MACA,IAAM/B,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;;MAE3D;MACA,IAAM0H,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC5CF,MAAM,CAACG,SAAS,GAAG5I,4DAAS,CAACkC,IAAI,CAAC2G,WAAW,CAACzG,IAAI,CAAC,CAAC;;MAEpD;MACAqG,MAAM,CAACK,SAAS,CAACrF,GAAG,CAAC,YAAY,EAAE,6BAA6B,EAAE,wBAAwB,CAAC;;MAE3F;MACA,IAAMsF,QAAQ,GAAG,IAAI,CAAC3I,YAAY,CAAC0B,UAAU,CAACkH,YAAY,CAACC,QAAQ,CAACF,QAAQ,IAAI,MAAM;;MAEtF;MACA,IAAMG,SAAS,GAAGR,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;MAChDO,SAAS,CAACN,SAAS,GAAG,2BAA2B;MACjDM,SAAS,CAACC,WAAW,GAAGJ,QAAQ;;MAEhC;MACA,IAAMK,cAAc,GAAGV,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MACvDS,cAAc,CAACR,SAAS,MAAA3G,MAAA,CAAMjC,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACE,kBAAkB,CAACnH,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACG,gBAAgB,CAACpH,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACkC,IAAI,CAACuH,aAAa,CAACrH,IAAI,CAAC,CAAC,CAAE;MAClMgH,cAAc,CAACM,YAAY,CAAC,WAAW,EAAE7G,IAAI,CAAC;MAC9CuG,cAAc,CAACM,YAAY,CAAC,iBAAiB,EAAE,WAAW,CAAC;MAC3DN,cAAc,CAACO,KAAK,kCAAA1H,MAAA,CAAkCY,IAAI,UAAO;MACjEuG,cAAc,CAACQ,KAAK,CAACC,OAAO,GAAG,aAAa;MAC5CT,cAAc,CAACQ,KAAK,CAACE,UAAU,GAAG,QAAQ;MAC1CV,cAAc,CAACQ,KAAK,CAACG,aAAa,GAAG,QAAQ;;MAE7C;MACA,IAAMC,WAAW,GAAGtB,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;MAClDqB,WAAW,CAACpB,SAAS,GAAG,kBAAkB;MAC1CoB,WAAW,CAACJ,KAAK,CAACK,WAAW,GAAG,KAAK;MACrCD,WAAW,CAACJ,KAAK,CAACC,OAAO,GAAG,aAAa;MACzCG,WAAW,CAACJ,KAAK,CAACE,UAAU,GAAG,QAAQ;MACvCE,WAAW,CAACJ,KAAK,CAACG,aAAa,GAAG,QAAQ;MAC1CC,WAAW,CAACJ,KAAK,CAACM,MAAM,GAAG,MAAM;MACjCF,WAAW,CAACJ,KAAK,CAACO,UAAU,GAAG,GAAG;;MAElC;MACA,IAAMC,WAAW,GAAG1D,6DAAY,CAAC2D,UAAU,CAAC,oBAAoB,EAAE;QAC9DC,KAAK,EAAE,EAAE;QACTJ,MAAM,EAAE,EAAE;QACVK,OAAO,EAAE;MACb,CAAC,CAAC;MAEFP,WAAW,CAACQ,WAAW,CAACJ,WAAW,CAAC;;MAEpC;MACA,IAAMK,QAAQ,GAAG/B,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;MAC/C8B,QAAQ,CAACb,KAAK,CAACC,OAAO,GAAG,cAAc;MACvCY,QAAQ,CAACb,KAAK,CAACG,aAAa,GAAG,QAAQ;MACvCU,QAAQ,CAACb,KAAK,CAACO,UAAU,GAAG,GAAG;MAC/BM,QAAQ,CAACD,WAAW,CAAC9B,QAAQ,CAACgC,cAAc,CAAC5J,kBAAkB,CAACI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;;MAEjF;MACAkI,cAAc,CAACoB,WAAW,CAACR,WAAW,CAAC;MACvCZ,cAAc,CAACoB,WAAW,CAACC,QAAQ,CAAC;;MAEpC;MACAhC,MAAM,CAAC+B,WAAW,CAACtB,SAAS,CAAC;MAC7BT,MAAM,CAAC+B,WAAW,CAACpB,cAAc,CAAC;;MAElC;MACAZ,IAAI,CAACmC,YAAY,CAAClC,MAAM,EAAED,IAAI,CAACoC,UAAU,CAAC;;MAE1C;MACAxB,cAAc,CAACyB,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAClD,qBAAqB,CAAC;IACxE;;IAEA;AACJ;AACA;AACA;EAHI;IAAApH,GAAA;IAAAC,KAAA,EAIA,SAAAoH,eAAeA,CAACH,KAAK,EAAE;MAAA,IAAAqD,MAAA;MACnB,IAAMC,MAAM,GAAGtD,KAAK,CAACuD,aAAa;MAClC,IAAMnI,IAAI,GAAGkI,MAAM,CAACE,YAAY,CAAC,WAAW,CAAC;MAC7C,IAAMC,SAAS,GAAGH,MAAM,CAACE,YAAY,CAAC,iBAAiB,CAAC;MACxD,IAAME,cAAc,GAAG,IAAI,CAACC,kBAAkB,CAACvI,IAAI,CAAC;;MAEpD;MACA,IAAM/B,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;MAC3D,IAAMC,aAAa,GAAGf,+DAAa,CAACc,WAAW,CAAC,CAAC;MAEjD,IAAI,CAAC8B,IAAI,EAAE;;MAEX;MACA,IAAMwI,OAAO,GAAGvK,kBAAkB,CAACI,GAAG,CAAC,kBAAkB,CAAC,IAAI,sBAAsB;MACpF,IAAMP,QAAQ,GAAGK,aAAa,CAACG,UAAU,CAACkK,OAAO,EAAE;QAC/CjK,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,IAAI,CAACiK,yBAAyB,CAACP,MAAM,EAAE,IAAI,CAAC;;MAE5C;MACA,IAAMzJ,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;;MAEnC;MACA+J,UAAU,CAAC,YAAM;QACb;QACA,IAAIL,SAAS,KAAK,SAAS,EAAE;UACzBpL,+CAAK,CAACY,GAAG,CAAC,kDAAkD,EAAE,IAAI,EAAE,CAAC,CAAC;;UAEtE;UACAoK,MAAI,CAACU,sBAAsB,CAACT,MAAM,EAAE,SAAS,CAAC;;UAE9C;UACA,IAAII,cAAc,IAAIA,cAAc,CAACF,YAAY,CAAC,iBAAiB,CAAC,KAAK,SAAS,EAAE;YAChFH,MAAI,CAACU,sBAAsB,CAACL,cAAc,EAAE,SAAS,CAAC;UAC1D;;UAEA;UACAL,MAAI,CAACW,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;QACnC;QACA;QAAA,KACK,IAAIN,cAAc,IAAIA,cAAc,CAACF,YAAY,CAAC,iBAAiB,CAAC,KAAK,SAAS,EAAE;UACrF;UACAH,MAAI,CAACU,sBAAsB,CAACL,cAAc,EAAE,SAAS,CAAC;;UAEtD;UACAL,MAAI,CAACU,sBAAsB,CAACT,MAAM,EAAE,WAAW,CAAC;;UAEhD;UACAD,MAAI,CAACY,eAAe,CAAC7I,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACtC;QACA;QAAA,KACK;UACDiI,MAAI,CAACU,sBAAsB,CAACT,MAAM,EAAE,WAAW,CAAC;UAChDD,MAAI,CAACY,eAAe,CAAC7I,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACtC;;QAEA;QACAiI,MAAI,CAACQ,yBAAyB,CAACP,MAAM,EAAE,KAAK,CAAC;;QAE7C;QACA/J,aAAa,CAACwB,UAAU,CAAC7B,QAAQ,CAAC;;QAElC;QACAmK,MAAI,CAACa,yBAAyB,CAACrK,SAAS,CAAC;MAC7C,CAAC,EAAE,EAAE,CAAC;IACV;;IAEA;AACJ;AACA;AACA;EAHI;IAAAf,GAAA;IAAAC,KAAA,EAIA,SAAA8K,yBAAyBA,CAACP,MAAM,EAAEa,YAAY,EAAE;MAC5C,IAAIA,YAAY,EAAE;QACdb,MAAM,CAACjC,SAAS,CAACrF,GAAG,CAAC,YAAY,CAAC;QAClCsH,MAAM,CAACnB,KAAK,CAACiC,OAAO,GAAG,KAAK;QAC5Bd,MAAM,CAACnB,KAAK,CAAC5B,MAAM,GAAG,MAAM;MAChC,CAAC,MAAM;QACH+C,MAAM,CAACjC,SAAS,CAACgD,MAAM,CAAC,YAAY,CAAC;QACrCf,MAAM,CAACnB,KAAK,CAACiC,OAAO,GAAG,EAAE;QACzBd,MAAM,CAACnB,KAAK,CAAC5B,MAAM,GAAG,EAAE;MAC5B;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAzH,GAAA;IAAAC,KAAA,EAIA,SAAAmL,yBAAyBA,CAACrK,SAAS,EAAE;MACjC,IAAMmB,OAAO,GAAGlB,WAAW,CAACC,GAAG,CAAC,CAAC;MACjC,IAAMuK,aAAa,GAAGtJ,OAAO,GAAGnB,SAAS;MAEzC,IAAI,CAAC6F,mBAAmB,CAACC,iBAAiB,GAAG2E,aAAa;MAC1D,IAAI,CAAC5E,mBAAmB,CAACE,cAAc,EAAE;;MAEzC;MACA,IAAM2E,UAAU,GAAGvF,yDAAU,CAACwF,aAAa,CAAC,CAAC;MAC7C,IAAMC,eAAe,GAAGF,UAAU,CAACG,gBAAgB,IAC9CH,UAAU,CAACG,gBAAgB,GAAGH,UAAU,CAACI,kBAAkB,CAAC,GAAG,GAAG,IAAI,CAAC;MAC5E,IAAMC,YAAY,GAAGL,UAAU,CAACM,mBAAmB,IAC9CN,UAAU,CAACM,mBAAmB,GAAGN,UAAU,CAACO,qBAAqB,CAAC,GAAG,GAAG,IAAI,CAAC;MAElFzM,+CAAK,CAACY,GAAG,kDAAAuB,MAAA,CAAkD8J,aAAa,CAACpJ,OAAO,CAAC,CAAC,CAAC,SAC/E;QACI6J,eAAe,EAAE,IAAI,CAACrF,mBAAmB,CAACE,cAAc;QACxD2E,UAAU,EAAE;UACRG,gBAAgB,EAAEH,UAAU,CAACG,gBAAgB;UAC7CC,kBAAkB,EAAEJ,UAAU,CAACI,kBAAkB;UACjDF,eAAe,KAAAjK,MAAA,CAAKiK,eAAe,CAACvJ,OAAO,CAAC,CAAC,CAAC,MAAG;UACjD2J,mBAAmB,EAAEN,UAAU,CAACM,mBAAmB;UACnDC,qBAAqB,EAAEP,UAAU,CAACO,qBAAqB;UACvDF,YAAY,KAAApK,MAAA,CAAKoK,YAAY,CAAC1J,OAAO,CAAC,CAAC,CAAC;QAC5C;MACJ,CAAC,EAAE,CAAC,CAAC;IACb;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAApC,GAAA;IAAAC,KAAA,EAMA,SAAA4K,kBAAkBA,CAACqB,WAAW,EAAE;MAC5B,IAAMC,YAAY,GAAGD,WAAW,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;MAC9D,OAAO,IAAI,CAACrM,YAAY,CAAC0B,UAAU,CAACC,SAAS,CAAC4K,aAAa,KAAA1K,MAAA,CACnDjC,4DAAS,CAACkC,IAAI,CAACuH,aAAa,CAACrH,IAAI,CAAC,CAAC,mBAAAH,MAAA,CAAeyK,YAAY,QACtE,CAAC;IACL;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAnM,GAAA;IAAAC,KAAA,EAMA,SAAAgL,sBAAsBA,CAACT,MAAM,EAAE6B,YAAY,EAAE;MACzC,IAAM5C,WAAW,GAAGe,MAAM,CAAC4B,aAAa,CAAC,mBAAmB,CAAC;MAC7D,IAAI,CAAC3C,WAAW,EAAE;;MAElB;MACAA,WAAW,CAAChI,SAAS,GAAG,EAAE;;MAE1B;MACA,IAAI6K,YAAY;MAChB,IAAID,YAAY,KAAK,WAAW,EAAE;QAC9BC,YAAY,GAAG,SAAS;QACxB7C,WAAW,CAACQ,WAAW,CAAC9D,6DAAY,CAAC2D,UAAU,CAAC,kBAAkB,EAAE;UAChEC,KAAK,EAAE,EAAE;UACTJ,MAAM,EAAE,EAAE;UACVK,OAAO,EAAE;QACb,CAAC,CAAC,CAAC;MACP,CAAC,MAAM;QACHsC,YAAY,GAAG,WAAW;QAC1B7C,WAAW,CAACQ,WAAW,CAAC9D,6DAAY,CAAC2D,UAAU,CAAC,oBAAoB,EAAE;UAClEC,KAAK,EAAE,EAAE;UACTJ,MAAM,EAAE,EAAE;UACVK,OAAO,EAAE;QACb,CAAC,CAAC,CAAC;MACP;;MAEA;MACAQ,MAAM,CAACrB,YAAY,CAAC,iBAAiB,EAAEmD,YAAY,CAAC;IACxD;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAtM,GAAA;IAAAC,KAAA,EAKA,SAAAkL,eAAeA,CAAC7I,IAAI,EAAoB;MAAA,IAAAiK,MAAA;MAAA,IAAlBC,QAAQ,GAAAC,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,KAAK;MAClC,IAAMN,YAAY,GAAG7J,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;MAEvD/C,+CAAK,CAACY,GAAG,mDAAAuB,MAAA,CAAmDY,IAAI,WAAAZ,MAAA,CAAQ8K,QAAQ,GAAG,YAAY,GAAG,EAAE,GAAI,IAAI,EAAE,CAAC,CAAC;;MAEhH;MACA,IAAME,cAAc,GAAG,IAAI,CAAC7M,YAAY,CAACQ,MAAM,CAACsM,MAAM,CAAC,UAAAzI,KAAK;QAAA,OACxDA,KAAK,CAACW,QAAQ,IAAIX,KAAK,CAAClB,IAAI,KAAK,SAAS,IAAIkB,KAAK,CAAClB,IAAI,KAAK,KAAK,IAAIkB,KAAK,CAAClB,IAAI,KAAK,QAAQ;MAAA,CACjG,CAAC;;MAED;MACA,IAAM4J,SAAS,GAAGF,cAAc,CAACpM,MAAM,GAAG,EAAE,CAAC,CAAC;MAC9CkM,QAAQ,GAAGA,QAAQ,IAAII,SAAS;;MAEhC;MACA,IAAIxM,QAAQ,GAAG,IAAI;MACnB,IAAIoM,QAAQ,IAAIE,cAAc,CAACpM,MAAM,GAAG,EAAE,EAAE;QACxC,IAAMC,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;QAC3D,IAAMC,aAAa,GAAGf,+DAAa,CAACc,WAAW,CAAC,CAAC;QACjD,IAAMsK,OAAO,GAAGvK,kBAAkB,CAACI,GAAG,CAAC,kBAAkB,CAAC,IAAI,sBAAsB;QACpFP,QAAQ,GAAGK,aAAa,CAACG,UAAU,CAACkK,OAAO,EAAE;UACzCjK,UAAU,EAAE,IAAI;UAChBC,MAAM,EAAE;QACZ,CAAC,CAAC;MACN;;MAEA;MACA,IAAMC,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;MAEnC,IAAIuL,QAAQ,EAAE;QACV;QACAE,cAAc,CAACG,OAAO,CAAC,UAAA3I,KAAK,EAAI;UAC5B;UACAqI,MAAI,CAACjG,UAAU,CAACpC,KAAK,CAACG,EAAE,CAAC,GAAG/B,IAAI;;UAEhC;UACAiK,MAAI,CAACO,mBAAmB,CAAC5I,KAAK,CAACG,EAAE,EAAE/B,IAAI,CAAC;QAC5C,CAAC,CAAC;;QAEF;QACA,IAAMyK,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;;QAE9B;QACAN,cAAc,CAACG,OAAO,CAAC,UAAA3I,KAAK,EAAI;UAC5B;UACAqI,MAAI,CAAChG,kBAAkB,CAAC0G,iBAAiB,CAAC/I,KAAK,CAACG,EAAE,EAAE/B,IAAI,EAAEiK,MAAI,CAAC/F,QAAQ,EAAE,IAAI,CAAC;UAC9E+F,MAAI,CAAChG,kBAAkB,CAAC0G,iBAAiB,CAAC/I,KAAK,CAACG,EAAE,EAAE8H,YAAY,EAAEI,MAAI,CAAC7F,UAAU,EAAE,IAAI,CAAC;;UAExF;UACA,IAAI,CAACqG,YAAY,CAACvI,GAAG,CAACN,KAAK,CAACG,EAAE,CAAC,EAAE;YAC7B,IAAM6I,QAAQ,GAAGhH,yDAAU,CAACiH,gBAAgB,CAACjJ,KAAK,CAACG,EAAE,CAAC;YACtD0I,YAAY,CAACK,GAAG,CAAClJ,KAAK,CAACG,EAAE,EAAE6I,QAAQ,CAAC;UACxC;QACJ,CAAC,CAAC;;QAEF;QACA,IAAI,CAAC3G,kBAAkB,CAAC8G,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;;QAE3C;QACAC,qBAAqB,CAAC,YAAM;UACxB;UACAf,MAAI,CAACgB,kBAAkB,CAACjL,IAAI,EAAEoK,cAAc,CAAC;UAE7CK,YAAY,CAACF,OAAO,CAAC,UAACK,QAAQ,EAAK;YAC/BA,QAAQ,CAACL,OAAO,CAAC,UAAAW,OAAO,EAAI;cACxBA,OAAO,CAACjF,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqF,MAAM,CAAC2I,QAAQ,CAAC5L,IAAI,CAAC,CAAC,CAAC;cACvD2L,OAAO,CAACjF,SAAS,CAACgD,MAAM,CAAC9L,4DAAS,CAACqF,MAAM,CAACC,UAAU,CAAClD,IAAI,CAAC,CAAC,CAAC;YAChE,CAAC,CAAC;UACN,CAAC,CAAC;;UAEF;UACA0K,MAAI,CAACmB,wBAAwB,CAAC,CAAC;;UAE/B;UACA,IAAI,OAAOnB,MAAI,CAAC1M,YAAY,CAAC8N,iBAAiB,KAAK,UAAU,EAAE;YAC3DpB,MAAI,CAAC1M,YAAY,CAAC8N,iBAAiB,CAAC,CAAC;UACzC;;UAEA;UACA,IAAIvN,QAAQ,EAAE;YACV,IAAMK,cAAa,GAAGf,+DAAa,CAACc,WAAW,CAAC,CAAC;YACjDC,cAAa,CAACwB,UAAU,CAAC7B,QAAQ,CAAC;UACtC;;UAEA;UACAmM,MAAI,CAACnB,yBAAyB,CAACrK,SAAS,CAAC;QAC7C,CAAC,CAAC;MACN,CAAC,MAAM;QACH;QACA2L,cAAc,CAACG,OAAO,CAAC,UAAA3I,KAAK,EAAI;UAC5BqI,MAAI,CAACqB,oBAAoB,CAAC1J,KAAK,CAACG,EAAE,EAAE/B,IAAI,EAAEiK,MAAI,CAAC/F,QAAQ,CAAC;UACxD+F,MAAI,CAACqB,oBAAoB,CAAC1J,KAAK,CAACG,EAAE,EAAE8H,YAAY,EAAEI,MAAI,CAAC7F,UAAU,CAAC;QACtE,CAAC,CAAC;;QAEF;QACA,IAAI,OAAO,IAAI,CAAC7G,YAAY,CAAC8N,iBAAiB,KAAK,UAAU,EAAE;UAC3D,IAAI,CAAC9N,YAAY,CAAC8N,iBAAiB,CAAC,CAAC;QACzC;;QAEA;QACA,IAAI,CAACvC,yBAAyB,CAACrK,SAAS,CAAC;MAC7C;IACJ;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAf,GAAA;IAAAC,KAAA,EAKA,SAAAsN,kBAAkBA,CAACM,YAAY,EAAExN,MAAM,EAAE;MACrC,IAAM8L,YAAY,GAAG0B,YAAY,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;;MAE/D;MACAxN,MAAM,CAACwM,OAAO,CAAC,UAAA3I,KAAK,EAAI;QACpB;QACA,IAAM4J,gBAAgB,GAAG5H,yDAAU,CAACiH,gBAAgB,CAACjJ,KAAK,CAACG,EAAE,EAAEwJ,YAAY,CAAC;QAC5E,IAAME,gBAAgB,GAAG7H,yDAAU,CAACiH,gBAAgB,CAACjJ,KAAK,CAACG,EAAE,EAAE8H,YAAY,CAAC;;QAE5E;QACA,IAAI2B,gBAAgB,CAACxN,MAAM,GAAG,CAAC,EAAE;UAC7B;UACA,IAAM0N,cAAc,GAAG9H,yDAAU,CAAC+H,wBAAwB,CAACH,gBAAgB,CAAC;UAC5E,IAAMI,YAAY,GAAGF,cAAc,CAAC,CAAC,CAAC;UAEtC,IAAIE,YAAY,EAAE;YACd,IAAMC,MAAM,GAAGD,YAAY,CAACE,OAAO,CAACD,MAAM;YAC1C,IAAIA,MAAM,EAAE;cACR;cACA,IAAME,UAAU,GAAGnI,yDAAU,CAACoI,aAAa,CAACH,MAAM,CAAC;cACnD,IAAIE,UAAU,EAAE;gBACZ;gBACAA,UAAU,CAAC9F,SAAS,CAACgD,MAAM,CACvB9L,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,EACtCpC,4DAAS,CAAC8O,KAAK,CAACC,MAAM,CAAC3M,IAAI,CAAC,CAAC,EAC7BpC,4DAAS,CAAC8O,KAAK,CAACE,WAAW,CAAC5M,IAAI,CAAC,CAAC,EAClCpC,4DAAS,CAAC8O,KAAK,CAACG,YAAY,CAAC7M,IAAI,CAAC,CACtC,CAAC;;gBAED;gBACAwM,UAAU,CAAC9F,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,CAAC;;gBAE9D;gBACA,IAAIgM,YAAY,KAAK,MAAM,EAAE;kBACzBQ,UAAU,CAAC9F,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAAC8O,KAAK,CAACE,WAAW,CAAC5M,IAAI,CAAC,CAAC,CAAC;gBAChE,CAAC,MAAM;kBACHwM,UAAU,CAAC9F,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAAC8O,KAAK,CAACG,YAAY,CAAC7M,IAAI,CAAC,CAAC,CAAC;gBACjE;cACJ;YACJ;UACJ;;UAEA;UACAiM,gBAAgB,CAACjB,OAAO,CAAC,UAAAW,OAAO,EAAI;YAChC;YACAA,OAAO,CAACjF,SAAS,CAACgD,MAAM,CACpB9L,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CACzC,CAAC;;YAED;YACA2L,OAAO,CAACjF,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,CAAC;;YAE3D;YACA,IAAM8M,GAAG,GAAGzI,yDAAU,CAAC0I,YAAY,CAACpB,OAAO,CAAC;YAC5C,IAAImB,GAAG,EAAE;cACLA,GAAG,CAACpG,SAAS,CAACgD,MAAM,CAChB9L,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CACzC,CAAC;cACD8M,GAAG,CAACpG,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,CAAC;YAC3D;UACJ,CAAC,CAAC;QACN;;QAEA;QACA,IAAIkM,gBAAgB,CAACzN,MAAM,GAAG,CAAC,EAAE;UAC7B;UACA,IAAMuO,sBAAsB,GAAG3I,yDAAU,CAAC+H,wBAAwB,CAACF,gBAAgB,CAAC;UACpF,IAAMe,oBAAoB,GAAGD,sBAAsB,CAAC,CAAC,CAAC;UAEtD,IAAIC,oBAAoB,EAAE;YACtB,IAAMC,cAAc,GAAGD,oBAAoB,CAACV,OAAO,CAACD,MAAM;YAC1D,IAAIY,cAAc,EAAE;cAChB,IAAMC,kBAAkB,GAAG9I,yDAAU,CAACoI,aAAa,CAACS,cAAc,CAAC;cACnE,IAAIC,kBAAkB,EAAE;gBACpB;gBACAA,kBAAkB,CAACzG,SAAS,CAACgD,MAAM,CAC/B9L,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,EACtCpC,4DAAS,CAAC8O,KAAK,CAACC,MAAM,CAAC3M,IAAI,CAAC,CAAC,EAC7BpC,4DAAS,CAAC8O,KAAK,CAACE,WAAW,CAAC5M,IAAI,CAAC,CAAC,EAClCpC,4DAAS,CAAC8O,KAAK,CAACG,YAAY,CAAC7M,IAAI,CAAC,CACtC,CAAC;;gBAED;gBACA;;gBAEA;gBACA,IAAM0C,cAAc,GAAGuK,oBAAoB,CAACV,OAAO,CAAC7J,cAAc,KAAK,MAAM;gBAC7E,IAAM0K,iBAAiB,GAAGH,oBAAoB,CAACvG,SAAS,CAAC2G,QAAQ,CAACzP,4DAAS,CAACkC,IAAI,CAACuD,gBAAgB,CAACrD,IAAI,CAAC,CAAC,CAAC;gBACzG,IAAMsN,cAAc,GAAGH,kBAAkB,CAACzG,SAAS,CAAC2G,QAAQ,CAACzP,4DAAS,CAAC8O,KAAK,CAACa,kBAAkB,CAACvN,IAAI,CAAC,CAAC,CAAC;;gBAEvG;gBACA,IAAMkC,UAAU,GAAGgL,cAAc,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC/C,IAAMC,cAAc,MAAA5N,MAAA,CAAMmM,YAAY,OAAAnM,MAAA,CAAIqC,UAAU,CAAE;gBACtD,IAAMwL,eAAe,GAAGpH,QAAQ,CAACiE,aAAa,oBAAA1K,MAAA,CAAmB4N,cAAc,QAAI,CAAC;;gBAEpF;gBACA,IAAME,sBAAsB,GAAG,CAAAD,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEnB,OAAO,CAAC7J,cAAc,MAAK,MAAM;gBACjF,IAAMkL,yBAAyB,GAAGF,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEhH,SAAS,CAAC2G,QAAQ,CAACzP,4DAAS,CAACkC,IAAI,CAACuD,gBAAgB,CAACrD,IAAI,CAAC,CAAC,CAAC;;gBAE7G;gBACA,IAAI0C,cAAc,IAAI0K,iBAAiB,IAAIE,cAAc,IACrDK,sBAAsB,IAAIC,yBAAyB,EAAE;kBACrD;kBACAT,kBAAkB,CAACzG,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAAC8O,KAAK,CAACa,kBAAkB,CAACvN,IAAI,CAAC,CAAC,CAAC;kBAC3EtC,+CAAK,CAACY,GAAG,+CAAAuB,MAAA,CAA+CqN,cAAc,2CAAwC,IAAI,EAAE,CAAC,CAAC;gBAC1H,CAAC,MAAM;kBACH;kBACAC,kBAAkB,CAACzG,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,CAAC;gBAC5E;cACJ;YACJ;UACJ;;UAEA;UACAkM,gBAAgB,CAAClB,OAAO,CAAC,UAAAW,OAAO,EAAI;YAChC;YACAA,OAAO,CAACjF,SAAS,CAACgD,MAAM,CACpB9L,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CACzC,CAAC;;YAED;YACA2L,OAAO,CAACjF,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,CAAC;;YAE7D;YACA,IAAM8M,GAAG,GAAGzI,yDAAU,CAAC0I,YAAY,CAACpB,OAAO,CAAC;YAC5C,IAAImB,GAAG,EAAE;cACLA,GAAG,CAACpG,SAAS,CAACgD,MAAM,CAChB9L,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CACzC,CAAC;cACD8M,GAAG,CAACpG,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,CAAC;YAC7D;UACJ,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;IACN;;IAEA;AACJ;AACA;AACA;EAHI;IAAA7B,GAAA;IAAAC,KAAA,EAIA,SAAAkH,YAAYA,CAACD,KAAK,EAAE;MAChB,IAAMsG,OAAO,GAAGtG,KAAK,CAACuD,aAAa;MACnC,IAAMxH,OAAO,GAAGuK,OAAO,CAAC9C,YAAY,CAAC,eAAe,CAAC;MACrD,IAAMpI,IAAI,GAAGkL,OAAO,CAAC9C,YAAY,CAAC,WAAW,CAAC;MAE9CnL,+CAAK,CAACY,GAAG,kDAAAuB,MAAA,CAAkDY,IAAI,iBAAAZ,MAAA,CAAcuB,OAAO,GAAI;QACpFuK,OAAO,EAAEA,OAAO,CAACkC,SAAS,CAACC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;MACzD,CAAC,EAAE,CAAC,CAAC;MAEL,IAAI1M,OAAO,IAAIX,IAAI,EAAE;QACjB;QACA,IAAMsN,iBAAiB,GAAG,IAAI,CAACtJ,UAAU,CAACrD,OAAO,CAAC,KAAKX,IAAI,IACvDkL,OAAO,CAACjF,SAAS,CAAC2G,QAAQ,CAACzP,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,CAAC;QAEpE,IAAI+N,iBAAiB,EAAE;UAAA,IAAAC,qBAAA;UACnB;UACAtQ,+CAAK,CAACY,GAAG,6CAAAuB,MAAA,CAA6CuB,OAAO,kCAA+B,IAAI,EAAE,CAAC,CAAC;;UAEpG;UACA,OAAO,IAAI,CAACqD,UAAU,CAACrD,OAAO,CAAC;;UAE/B;UACA,KAAA4M,qBAAA,GAAI,IAAI,CAAChQ,YAAY,CAAC0B,UAAU,cAAAsO,qBAAA,gBAAAA,qBAAA,GAA5BA,qBAAA,CAA8BC,UAAU,cAAAD,qBAAA,eAAxCA,qBAAA,CAA0CE,eAAe,EAAE;YAC3D,OAAO,IAAI,CAAClQ,YAAY,CAAC0B,UAAU,CAACuO,UAAU,CAACC,eAAe,CAAC9M,OAAO,CAAC;UAC3E;;UAEA;UACA,IAAI,CAACsD,kBAAkB,CAACyJ,gBAAgB,CAAC/M,OAAO,CAAC;;UAEjD;UACA,IAAMgN,aAAa,GAAG/J,yDAAU,CAACiH,gBAAgB,CAAClK,OAAO,CAAC;UAC1DgN,aAAa,CAACpD,OAAO,CAAC,UAAAW,OAAO,EAAI;YAC7BA,OAAO,CAACjF,SAAS,CAACgD,MAAM,CAAC9L,4DAAS,CAACqF,MAAM,CAAC2I,QAAQ,CAAC5L,IAAI,CAAC,CAAC,CAAC;YAC1D2L,OAAO,CAACjF,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqF,MAAM,CAACC,UAAU,CAAClD,IAAI,CAAC,CAAC,CAAC;UAC7D,CAAC,CAAC;;UAEF;UACA,IAAI,CAAC6L,wBAAwB,CAAC,CAAC;;UAE/B;UACA,IAAI,OAAO,IAAI,CAAC7N,YAAY,CAAC8N,iBAAiB,KAAK,UAAU,EAAE;YAC3D,IAAI,CAAC9N,YAAY,CAAC8N,iBAAiB,CAAC,CAAC;UACzC;QACJ,CAAC,MAAM;UACH;UACA,IAAMxB,YAAY,GAAG7J,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;;UAEvD;UACA/C,+CAAK,CAACY,GAAG,0CAAAuB,MAAA,CAA0CuB,OAAO,GAAI;YAC1D4K,YAAY,EAAEvL,IAAI;YAClB6J,YAAY,EAAEA;UAClB,CAAC,EAAE,CAAC,CAAC;;UAEL;UACA,IAAI,CAACyB,oBAAoB,CAAC3K,OAAO,EAAEX,IAAI,EAAE,IAAI,CAACkE,QAAQ,CAAC;UACvD,IAAI,CAACoH,oBAAoB,CAAC3K,OAAO,EAAEkJ,YAAY,EAAE,IAAI,CAACzF,UAAU,CAAC;QACrE;MACJ;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA1G,GAAA;IAAAC,KAAA,EAOA,SAAA2N,oBAAoBA,CAAC3K,OAAO,EAAEX,IAAI,EAAE4N,KAAK,EAAiB;MAAA,IAAfC,KAAK,GAAA1D,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,KAAK;MACpD;MACA,IAAIyD,KAAK,KAAK,IAAI,CAAC1J,QAAQ,EAAE;QACzB,IAAI,CAACF,UAAU,CAACrD,OAAO,CAAC,GAAGX,IAAI;;QAE/B;QACA,IAAI,CAACwK,mBAAmB,CAAC7J,OAAO,EAAEX,IAAI,CAAC;;QAEvC;QACA,IAAI,CAACoL,wBAAwB,CAAC,CAAC;QAE/B,IAAI,CAACyC,KAAK,EAAE;UACR;UACA,IAAMF,aAAa,GAAG/J,yDAAU,CAACiH,gBAAgB,CAAClK,OAAO,CAAC;UAC1DgN,aAAa,CAACpD,OAAO,CAAC,UAAAW,OAAO,EAAI;YAC7BA,OAAO,CAACjF,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqF,MAAM,CAAC2I,QAAQ,CAAC5L,IAAI,CAAC,CAAC,CAAC;YACvD2L,OAAO,CAACjF,SAAS,CAACgD,MAAM,CAAC9L,4DAAS,CAACqF,MAAM,CAACC,UAAU,CAAClD,IAAI,CAAC,CAAC,CAAC;UAChE,CAAC,CAAC;QACN;MACJ;;MAEA;MACA,IAAI,CAAC0E,kBAAkB,CAAC0G,iBAAiB,CAAChK,OAAO,EAAEX,IAAI,EAAE4N,KAAK,EAAEC,KAAK,CAAC;IAC1E;;IAEA;AACJ;AACA;AACA;EAHI;IAAAnQ,GAAA;IAAAC,KAAA,EAIA,SAAA6M,mBAAmBA,CAAC7J,OAAO,EAAEX,IAAI,EAAE;MAAA,IAAA8N,sBAAA;MAC/B,KAAAA,sBAAA,GAAI,IAAI,CAACvQ,YAAY,CAAC0B,UAAU,cAAA6O,sBAAA,gBAAAA,sBAAA,GAA5BA,sBAAA,CAA8BN,UAAU,cAAAM,sBAAA,eAAxCA,sBAAA,CAA0CL,eAAe,EAAE;QAC3D,IAAI,CAAClQ,YAAY,CAAC0B,UAAU,CAACuO,UAAU,CAACC,eAAe,CAAC9M,OAAO,CAAC,GAAGX,IAAI;MAC3E;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAtC,GAAA;IAAAC,KAAA,EAIA,SAAAyN,wBAAwBA,CAAA,EAAG;MAAA,IAAA2C,sBAAA;MACvB,KAAAA,sBAAA,GAAI,IAAI,CAACxQ,YAAY,CAAC0B,UAAU,cAAA8O,sBAAA,eAA5BA,sBAAA,CAA8BC,aAAa,EAAE;QAC7C,IAAI,CAACzQ,YAAY,CAAC0B,UAAU,CAAC+O,aAAa,CAACC,aAAa,CAAC,CAAC;MAC9D;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAvQ,GAAA;IAAAC,KAAA,EAIA,SAAAuQ,aAAaA,CAAA,EAAG;MACZ,OAAAC,aAAA,KAAW,IAAI,CAACnK,UAAU;IAC9B;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAtG,GAAA;IAAAC,KAAA,EAKA,SAAAyQ,eAAeA,CAACzN,OAAO,EAAE;MACrB,OAAO,CAAC,CAAC,IAAI,CAACqD,UAAU,CAACrD,OAAO,CAAC;IACrC;;IAEA;AACJ;AACA;AACA;EAHI;IAAAjD,GAAA;IAAAC,KAAA,EAIA,SAAA0Q,kBAAkBA,CAAA,EAAG;MACjB,IAAMjE,cAAc,GAAG,IAAI,CAAC7M,YAAY,CAACQ,MAAM,CAACsM,MAAM,CAAC,UAAAvI,CAAC;QAAA,OAAIA,CAAC,CAACS,QAAQ;MAAA,EAAC;MACvE,OAAO6H,cAAc,CAACpM,MAAM,GAAGsQ,MAAM,CAACC,IAAI,CAAC,IAAI,CAACvK,UAAU,CAAC,CAAChG,MAAM;IACtE;;IAEA;AACJ;AACA;AACA;EAHI;IAAAN,GAAA;IAAAC,KAAA,EAIA,SAAAiL,kBAAkBA,CAAA,EAAmB;MAAA,IAAA4F,MAAA;MAAA,IAAlBtE,QAAQ,GAAAC,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,KAAK;MAC/B;MACA,IAAMC,cAAc,GAAG,IAAI,CAAC7M,YAAY,CAACQ,MAAM,CAACsM,MAAM,CAAC,UAAAzI,KAAK;QAAA,OACxDA,KAAK,CAACW,QAAQ,IAAIX,KAAK,CAAClB,IAAI,KAAK,SAAS,IAAIkB,KAAK,CAAClB,IAAI,KAAK,KAAK,IAAIkB,KAAK,CAAClB,IAAI,KAAK,QAAQ;MAAA,CACjG,CAAC;;MAED;MACA,IAAM4J,SAAS,GAAGF,cAAc,CAACpM,MAAM,GAAG,EAAE,CAAC,CAAC;MAC9CkM,QAAQ,GAAGA,QAAQ,IAAII,SAAS;;MAEhC;MACA,IAAIxM,QAAQ,GAAG,IAAI;MACnB,IAAIoM,QAAQ,EAAE;QACV,IAAMuE,cAAc,GAAGrE,cAAc,CAACC,MAAM,CAAC,UAAAzI,KAAK;UAAA,OAAI4M,MAAI,CAACJ,eAAe,CAACxM,KAAK,CAACG,EAAE,CAAC;QAAA,EAAC;QACrF,IAAI0M,cAAc,CAACzQ,MAAM,GAAG,EAAE,EAAE;UAAE;UAC9B,IAAMC,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;UAC3D,IAAMC,aAAa,GAAGf,+DAAa,CAACc,WAAW,CAAC,CAAC;UACjD,IAAMsK,OAAO,GAAGvK,kBAAkB,CAACI,GAAG,CAAC,kBAAkB,CAAC,IAAI,sBAAsB;UACpFP,QAAQ,GAAGK,aAAa,CAACG,UAAU,CAACkK,OAAO,EAAE;YACzCjK,UAAU,EAAE,IAAI;YAChBC,MAAM,EAAE;UACZ,CAAC,CAAC;QACN;MACJ;;MAEA;MACA,IAAMC,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;MAEnC,IAAIuL,QAAQ,EAAE;QACVjN,+CAAK,CAACY,GAAG,0EAA0E,IAAI,EAAE,CAAC,CAAC;;QAE3F;QACA,IAAM4Q,eAAc,GAAGrE,cAAc,CAACC,MAAM,CAAC,UAAAzI,KAAK;UAAA,OAAI4M,MAAI,CAACJ,eAAe,CAACxM,KAAK,CAACG,EAAE,CAAC;QAAA,EAAC;;QAErF;QACA,IAAM2M,gBAAgB,GAAG,IAAIxO,GAAG,CAACuO,eAAc,CAACE,GAAG,CAAC,UAAA/M,KAAK;UAAA,OAAIA,KAAK,CAACG,EAAE;QAAA,EAAC,CAAC;;QAEvE;QACA,IAAM6M,gBAAgB,GAAG,IAAIlE,GAAG,CAAC,CAAC;;QAElC;QACAgE,gBAAgB,CAACnE,OAAO,CAAC,UAAA5J,OAAO,EAAI;UAAA,IAAAkO,qBAAA;UAChC;UACA,OAAOL,MAAI,CAACxK,UAAU,CAACrD,OAAO,CAAC;;UAE/B;UACA,KAAAkO,qBAAA,GAAIL,MAAI,CAACjR,YAAY,CAAC0B,UAAU,cAAA4P,qBAAA,gBAAAA,qBAAA,GAA5BA,qBAAA,CAA8BrB,UAAU,cAAAqB,qBAAA,eAAxCA,qBAAA,CAA0CpB,eAAe,EAAE;YAC3D,OAAOe,MAAI,CAACjR,YAAY,CAAC0B,UAAU,CAACuO,UAAU,CAACC,eAAe,CAAC9M,OAAO,CAAC;UAC3E;;UAEA;UACA6N,MAAI,CAACvK,kBAAkB,CAACyJ,gBAAgB,CAAC/M,OAAO,EAAE,IAAI,CAAC;;UAEvD;UACA,IAAMiK,QAAQ,GAAGhH,yDAAU,CAACiH,gBAAgB,CAAClK,OAAO,CAAC;UACrDiO,gBAAgB,CAAC9D,GAAG,CAACnK,OAAO,EAAEiK,QAAQ,CAAC;QAC3C,CAAC,CAAC;;QAEF;QACA,IAAI,CAAC3G,kBAAkB,CAAC8G,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;;QAE3C;QACAC,qBAAqB,CAAC,YAAM;UACxB4D,gBAAgB,CAACrE,OAAO,CAAC,UAACK,QAAQ,EAAEkE,QAAQ,EAAK;YAC7ClE,QAAQ,CAACL,OAAO,CAAC,UAAAW,OAAO,EAAI;cACxBA,OAAO,CAACjF,SAAS,CAACgD,MAAM,CAAC9L,4DAAS,CAACqF,MAAM,CAAC2I,QAAQ,CAAC5L,IAAI,CAAC,CAAC,CAAC;cAC1D2L,OAAO,CAACjF,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqF,MAAM,CAACC,UAAU,CAAClD,IAAI,CAAC,CAAC,CAAC;YAC7D,CAAC,CAAC;UACN,CAAC,CAAC;;UAEF;UACAiP,MAAI,CAACpD,wBAAwB,CAAC,CAAC;;UAE/B;UACA,IAAI,OAAOoD,MAAI,CAACjR,YAAY,CAAC8N,iBAAiB,KAAK,UAAU,EAAE;YAC3DmD,MAAI,CAACjR,YAAY,CAAC8N,iBAAiB,CAAC,CAAC;UACzC;;UAEA;UACA,IAAIvN,QAAQ,EAAE;YACV,IAAMK,eAAa,GAAGf,+DAAa,CAACc,WAAW,CAAC,CAAC;YACjDC,eAAa,CAACwB,UAAU,CAAC7B,QAAQ,CAAC;UACtC;;UAEA;UACA0Q,MAAI,CAAC1F,yBAAyB,CAACrK,SAAS,CAAC;QAC7C,CAAC,CAAC;MACN,CAAC,MAAM;QACH;QACA2L,cAAc,CAACG,OAAO,CAAC,UAAA3I,KAAK,EAAI;UAAA,IAAAmN,sBAAA;UAC5B;UACA,IAAI,CAACP,MAAI,CAACJ,eAAe,CAACxM,KAAK,CAACG,EAAE,CAAC,EAAE;;UAErC;UACA,IAAM4L,aAAa,GAAG/J,yDAAU,CAACiH,gBAAgB,CAACjJ,KAAK,CAACG,EAAE,CAAC;UAC3D4L,aAAa,CAACpD,OAAO,CAAC,UAAAW,OAAO,EAAI;YAC7BA,OAAO,CAACjF,SAAS,CAACgD,MAAM,CAAC9L,4DAAS,CAACqF,MAAM,CAAC2I,QAAQ,CAAC5L,IAAI,CAAC,CAAC,CAAC;YAC1D2L,OAAO,CAACjF,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqF,MAAM,CAACC,UAAU,CAAClD,IAAI,CAAC,CAAC,CAAC;UAC7D,CAAC,CAAC;;UAEF;UACA,OAAOiP,MAAI,CAACxK,UAAU,CAACpC,KAAK,CAACG,EAAE,CAAC;;UAEhC;UACA,KAAAgN,sBAAA,GAAIP,MAAI,CAACjR,YAAY,CAAC0B,UAAU,cAAA8P,sBAAA,gBAAAA,sBAAA,GAA5BA,sBAAA,CAA8BvB,UAAU,cAAAuB,sBAAA,eAAxCA,sBAAA,CAA0CtB,eAAe,EAAE;YAC3D,OAAOe,MAAI,CAACjR,YAAY,CAAC0B,UAAU,CAACuO,UAAU,CAACC,eAAe,CAAC7L,KAAK,CAACG,EAAE,CAAC;UAC5E;;UAEA;UACAyM,MAAI,CAACvK,kBAAkB,CAACyJ,gBAAgB,CAAC9L,KAAK,CAACG,EAAE,CAAC;QACtD,CAAC,CAAC;;QAEF;QACA,IAAI,CAACqJ,wBAAwB,CAAC,CAAC;;QAE/B;QACA,IAAI,OAAO,IAAI,CAAC7N,YAAY,CAAC8N,iBAAiB,KAAK,UAAU,EAAE;UAC3D,IAAI,CAAC9N,YAAY,CAAC8N,iBAAiB,CAAC,CAAC;QACzC;;QAEA;QACA,IAAI,CAACvC,yBAAyB,CAACrK,SAAS,CAAC;MAC7C;IACJ;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACp1B+C;AACF;AACR;;AAE1C;AACA;AACA;AACO,IAAMqF,uBAAuB;EAChC;AACJ;AACA;EACI,SAAAA,wBAAYvG,YAAY,EAAE;IAAAC,eAAA,OAAAsG,uBAAA;IACtB,IAAI,CAACvG,YAAY,GAAGA,YAAY;IAChC;IACA,IAAI,CAACyR,kBAAkB,GAAG,EAAE;IAC5B;IACA,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB;IACA,IAAI,CAACC,QAAQ,GAAG;MACZC,aAAa,EAAE,CAAC;MAChBC,aAAa,EAAE;IACnB,CAAC;IACDnS,+CAAK,CAACY,GAAG,CAAC,sCAAsC,EAAE,IAAI,EAAE,CAAC,CAAC;EAC9D;;EAEA;AACJ;AACA;AACA;EAHI,OAAAJ,YAAA,CAAAqG,uBAAA;IAAApG,GAAA;IAAAC,KAAA,EAIA,SAAA0R,UAAUA,CAAA,EAAG;MACT;MACAzL,yDAAU,CAAC0L,aAAa,CAAC,CAAC;MAC1BrS,+CAAK,CAACY,GAAG,CAAC,4DAA4D,EAAE,IAAI,EAAE,CAAC,CAAC;IACpF;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAH,GAAA;IAAAC,KAAA,EAOA,SAAAgN,iBAAiBA,CAAChK,OAAO,EAAEX,IAAI,EAAE4N,KAAK,EAAiB;MAAA,IAAfC,KAAK,GAAA1D,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,KAAK;MACjDlN,+CAAK,CAACY,GAAG,6DAAAuB,MAAA,CAA6DuB,OAAO,aAAAvB,MAAA,CAAUY,IAAI,cAAAZ,MAAA,CAAWwO,KAAK,GAAI,IAAI,EAAE,CAAC,CAAC;;MAEvH;MACA,IAAMhD,QAAQ,GAAGhH,yDAAU,CAACiH,gBAAgB,CAAClK,OAAO,EAAEX,IAAI,CAAC;MAC3D/C,+CAAK,CAACY,GAAG,mCAAAuB,MAAA,CAAmCwL,QAAQ,CAAC5M,MAAM,0BAAAoB,MAAA,CAAuBuB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;;MAErG;MACA,IAAM+K,cAAc,GAAG9H,yDAAU,CAAC+H,wBAAwB,CAACf,QAAQ,CAAC;;MAEpE;MACA,IAAMf,YAAY,GAAG7J,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;MAEvD,IAAI6N,KAAK,EAAE;QACP;QACA,IAAI,CAACmB,kBAAkB,CAACO,IAAI,CAAC;UACzB7O,IAAI,EAAE,aAAa;UACnBC,OAAO,EAAPA,OAAO;UACPX,IAAI,EAAJA,IAAI;UACJ4K,QAAQ,EAAEA,QAAQ;UAClBgB,YAAY,EAAEF,cAAc,CAAC1N,MAAM,GAAG,CAAC,GAAG0N,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI;UAClEkC,KAAK,EAAEA,KAAK;UACZ/D,YAAY,EAAEA;QAClB,CAAC,CAAC;MACN,CAAC,MAAM;QACH;QACA,IAAI,CAAC2F,qBAAqB,CAAC5E,QAAQ,EAAEgD,KAAK,CAAC;;QAE3C;QACA,IAAIlC,cAAc,CAAC1N,MAAM,GAAG,CAAC,EAAE;UAC3Bf,+CAAK,CAACY,GAAG,6EAAAuB,MAAA,CAA6EuB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;;UAEzG;UACA,IAAMiL,YAAY,GAAGF,cAAc,CAAC,CAAC,CAAC;UACtC,IAAIE,YAAY,IAAIgC,KAAK,KAAK,UAAU,EAAE;YACtC;YACA,IAAI,CAAC6B,iBAAiB,CAAC7D,YAAY,EAAEgC,KAAK,CAAC;;YAE3C;YACA,IAAI,CAAC8B,qBAAqB,CAAC9D,YAAY,EAAE/B,YAAY,CAAC;UAC1D,CAAC,MAAM;YACH;YACA,IAAI,CAAC4F,iBAAiB,CAAC7D,YAAY,EAAEgC,KAAK,CAAC;UAC/C;QACJ,CAAC,MAAM;UACH3Q,+CAAK,CAAC0S,IAAI,wEAAAvQ,MAAA,CAAwEuB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;QACzG;;QAEA;QACA,IAAI,CAACiP,sBAAsB,CAAC,CAAC;MACjC;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAlS,GAAA;IAAAC,KAAA,EAMA,SAAA+R,qBAAqBA,CAACxE,OAAO,EAAErB,YAAY,EAAE;MAAA,IAAAgG,gBAAA;MACzC,IAAI,EAAC3E,OAAO,aAAPA,OAAO,gBAAA2E,gBAAA,GAAP3E,OAAO,CAAEY,OAAO,cAAA+D,gBAAA,eAAhBA,gBAAA,CAAkBhE,MAAM,GAAE;;MAE/B;MACA,IAAMiE,WAAW,GAAG5E,OAAO,CAACY,OAAO,CAACD,MAAM,CAACkB,KAAK,CAAC,GAAG,CAAC;MACrD,IAAI+C,WAAW,CAAC9R,MAAM,KAAK,CAAC,EAAE;MAE9B,IAAMyD,UAAU,GAAGqO,WAAW,CAAC,CAAC,CAAC;MACjC,IAAMrD,cAAc,MAAArN,MAAA,CAAMyK,YAAY,OAAAzK,MAAA,CAAIqC,UAAU,CAAE;;MAEtD;MACA,IAAMsO,cAAc,GAAGnM,yDAAU,CAACoI,aAAa,CAACS,cAAc,CAAC;MAC/D,IAAI,CAACsD,cAAc,EAAE;QACjB9S,+CAAK,CAAC0S,IAAI,gEAAAvQ,MAAA,CAAgEqN,cAAc,GAAI,IAAI,EAAE,CAAC,CAAC;QACpG;MACJ;MAEAxP,+CAAK,CAACY,GAAG,sDAAAuB,MAAA,CAAsDqN,cAAc,GAAI;QAC7EuD,cAAc,EAAEC,KAAK,CAACC,IAAI,CAACH,cAAc,CAAC9J,SAAS;MACvD,CAAC,EAAE,CAAC,CAAC;;MAEL;MACA8J,cAAc,CAAC9J,SAAS,CAACgD,MAAM,CAC3B9L,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,EACtCpC,4DAAS,CAAC8O,KAAK,CAACC,MAAM,CAAC3M,IAAI,CAAC,CAAC,EAC7BpC,4DAAS,CAAC8O,KAAK,CAACE,WAAW,CAAC5M,IAAI,CAAC,CAAC,EAClCpC,4DAAS,CAAC8O,KAAK,CAACG,YAAY,CAAC7M,IAAI,CAAC,CACtC,CAAC;;MAED;MACA;;MAEA;MACA,IAAMsN,cAAc,GAAGkD,cAAc,CAAC9J,SAAS,CAAC2G,QAAQ,CAACzP,4DAAS,CAAC8O,KAAK,CAACa,kBAAkB,CAACvN,IAAI,CAAC,CAAC,CAAC;MAEnG,IAAIsN,cAAc,EAAE;QAChB;QACAkD,cAAc,CAAC9J,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAAC8O,KAAK,CAACa,kBAAkB,CAACvN,IAAI,CAAC,CAAC,CAAC;QACvEtC,+CAAK,CAACY,GAAG,8DAAAuB,MAAA,CAA8DqN,cAAc,GAAI,IAAI,EAAE,CAAC,CAAC;MACrG,CAAC,MAAM;QACH;QACAsD,cAAc,CAAC9J,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,CAAC;QACpEtC,+CAAK,CAACY,GAAG,iDAAAuB,MAAA,CAAiDqN,cAAc,qBAAkB,IAAI,EAAE,CAAC,CAAC;MACtG;IACJ;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA/O,GAAA;IAAAC,KAAA,EAKA,SAAA+P,gBAAgBA,CAAC/M,OAAO,EAAiB;MAAA,IAAfkN,KAAK,GAAA1D,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,KAAK;MACnClN,+CAAK,CAACY,GAAG,8DAAAuB,MAAA,CAA8DuB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;;MAE1F;MACA,IAAMiK,QAAQ,GAAGhH,yDAAU,CAACiH,gBAAgB,CAAClK,OAAO,CAAC;MACrD1D,+CAAK,CAACY,GAAG,mCAAAuB,MAAA,CAAmCwL,QAAQ,CAAC5M,MAAM,0BAAAoB,MAAA,CAAuBuB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;;MAErG;MACA,IAAMwP,WAAW,GAAGvM,yDAAU,CAACwM,mBAAmB,CAACzP,OAAO,CAAC;MAE3D,IAAIkN,KAAK,EAAE;QACP;QACA,IAAI,CAACmB,kBAAkB,CAACO,IAAI,CAAC;UACzB7O,IAAI,EAAE,YAAY;UAClBC,OAAO,EAAPA,OAAO;UACPiK,QAAQ,EAAEA,QAAQ;UAClBuF,WAAW,EAAEA;QACjB,CAAC,CAAC;MACN,CAAC,MAAM;QACH;QACA,IAAI,CAACE,qBAAqB,CAACzF,QAAQ,EAAEuF,WAAW,CAAC;QAEjDlT,+CAAK,CAACY,GAAG,mCAAAuB,MAAA,CAAmC+Q,WAAW,CAACnS,MAAM,8BAAAoB,MAAA,CAA2BuB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;;QAE5G;QACA,IAAI,CAACiP,sBAAsB,CAAC,CAAC;MACjC;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAlS,GAAA;IAAAC,KAAA,EAIA,SAAAoN,UAAUA,CAAA,EAAgB;MAAA,IAAArG,KAAA;MAAA,IAAf4L,MAAM,GAAAnG,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,IAAI;MACpB,IAAI,IAAI,CAAC6E,kBAAkB,CAAChR,MAAM,KAAK,CAAC,EAAE;QACtC;MACJ;;MAEA;MACA,IAAI,CAACiR,WAAW,GAAG,IAAI;MACvB,IAAMsB,SAAS,GAAG,IAAI,CAACvB,kBAAkB,CAAChR,MAAM;MAChD,IAAI,CAACkR,QAAQ,CAACC,aAAa,GAAGoB,SAAS;;MAEvC;MACAvF,qBAAqB,CAAC,YAAM;QACxB,IAAMvM,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;QACnC1B,+CAAK,CAACY,GAAG,+CAAAuB,MAAA,CAA+CmR,SAAS,kBAAe,IAAI,EAAE,CAAC,CAAC;QAExF,IAAI;UACA;UACA,IAAMC,gBAAgB,GAAG,EAAE;UAC3B,IAAMC,eAAe,GAAG,EAAE;;UAE1B;UACA/L,KAAI,CAACsK,kBAAkB,CAACzE,OAAO,CAAC,UAAAmG,SAAS,EAAI;YACzC,IAAIA,SAAS,CAAChQ,IAAI,KAAK,aAAa,EAAE;cAClC8P,gBAAgB,CAACjB,IAAI,CAACmB,SAAS,CAAC;YACpC,CAAC,MAAM,IAAIA,SAAS,CAAChQ,IAAI,KAAK,YAAY,EAAE;cACxC+P,eAAe,CAAClB,IAAI,CAACmB,SAAS,CAAC;YACnC;UACJ,CAAC,CAAC;;UAEF;UACA,IAAID,eAAe,CAACzS,MAAM,GAAG,CAAC,EAAE;YAC5B0G,KAAI,CAACiM,qBAAqB,CAACF,eAAe,CAAC;UAC/C;;UAEA;UACA,IAAID,gBAAgB,CAACxS,MAAM,GAAG,CAAC,EAAE;YAC7B0G,KAAI,CAACkM,sBAAsB,CAACJ,gBAAgB,CAAC;UACjD;;UAEA;UACA,IAAM5Q,OAAO,GAAGlB,WAAW,CAACC,GAAG,CAAC,CAAC;UACjC,IAAMkS,cAAc,GAAGjR,OAAO,GAAGnB,SAAS;UAC1CiG,KAAI,CAACwK,QAAQ,CAACE,aAAa,GAAGyB,cAAc;UAE5C5T,+CAAK,CAACY,GAAG,2DAAAuB,MAAA,CAA2DyR,cAAc,CAAC/Q,OAAO,CAAC,CAAC,CAAC,SACzF;YACIgR,UAAU,EAAEP,SAAS;YACrBQ,QAAQ,EAAEN,eAAe,CAACzS,MAAM;YAChCgT,SAAS,EAAER,gBAAgB,CAACxS,MAAM;YAClCiT,cAAc,EAAE,CAACJ,cAAc,GAAGN,SAAS,EAAEzQ,OAAO,CAAC,CAAC;UAC1D,CAAC,EAAE,CAAC,CAAC;QACb,CAAC,CACD,OAAOoR,KAAK,EAAE;UACVjU,+CAAK,CAACiU,KAAK,mCAAA9R,MAAA,CAAmC8R,KAAK,CAAC1I,OAAO,GAAI0I,KAAK,EAAE,CAAC,CAAC;QAC5E,CAAC,SACO;UACJ;UACAxM,KAAI,CAACsK,kBAAkB,GAAG,EAAE;;UAE5B;UACAtK,KAAI,CAACuK,WAAW,GAAG,KAAK;;UAExB;UACA,IAAIqB,MAAM,EAAE;YACR5L,KAAI,CAACkL,sBAAsB,CAAC,CAAC;UACjC;QACJ;MACJ,CAAC,CAAC;IACN;;IAEA;AACJ;AACA;AACA;EAHI;IAAAlS,GAAA;IAAAC,KAAA,EAIA,SAAAgT,qBAAqBA,CAACG,UAAU,EAAE;MAC9B,IAAIA,UAAU,CAAC9S,MAAM,KAAK,CAAC,EAAE;;MAE7B;MACA,IAAMmT,WAAW,GAAG,EAAE;MACtB,IAAMC,cAAc,GAAG,EAAE;;MAEzB;MACAN,UAAU,CAACvG,OAAO,CAAC,UAAAmG,SAAS,EAAI;QAC5B,IAAIA,SAAS,CAAC9F,QAAQ,EAAE;UACpBuG,WAAW,CAAC5B,IAAI,CAAA8B,KAAA,CAAhBF,WAAW,EAAAG,kBAAA,CAASZ,SAAS,CAAC9F,QAAQ,EAAC;QAC3C;QACA,IAAI8F,SAAS,CAACP,WAAW,EAAE;UACvBiB,cAAc,CAAC7B,IAAI,CAAA8B,KAAA,CAAnBD,cAAc,EAAAE,kBAAA,CAASZ,SAAS,CAACP,WAAW,EAAC;QACjD;MACJ,CAAC,CAAC;;MAEF;MACA,IAAI,CAACE,qBAAqB,CAACc,WAAW,EAAEC,cAAc,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;EAHI;IAAA1T,GAAA;IAAAC,KAAA,EAIA,SAAAiT,sBAAsBA,CAACE,UAAU,EAAE;MAAA,IAAA7I,MAAA;MAC/B,IAAI6I,UAAU,CAAC9S,MAAM,KAAK,CAAC,EAAE;;MAE7B;MACA,IAAMuT,eAAe,GAAG;QACpB,UAAU,EAAE,EAAE;QACd,YAAY,EAAE;MAClB,CAAC;;MAED;MACA,IAAMC,oBAAoB,GAAG;QACzB,UAAU,EAAE,CAAC,CAAC;QAAG;QACjB,YAAY,EAAE,CAAC,CAAC,CAAC;MACrB,CAAC;;MAED;MACAV,UAAU,CAACvG,OAAO,CAAC,UAAAmG,SAAS,EAAI;QAC5B,IAAQ9F,QAAQ,GAAuD8F,SAAS,CAAxE9F,QAAQ;UAAEgB,YAAY,GAAyC8E,SAAS,CAA9D9E,YAAY;UAAEgC,KAAK,GAAkC8C,SAAS,CAAhD9C,KAAK;UAAEjN,OAAO,GAAyB+P,SAAS,CAAzC/P,OAAO;UAAEX,IAAI,GAAmB0Q,SAAS,CAAhC1Q,IAAI;UAAE6J,YAAY,GAAK6G,SAAS,CAA1B7G,YAAY;QAElE,IAAIe,QAAQ,IAAIA,QAAQ,CAAC5M,MAAM,GAAG,CAAC,EAAE;UACjC,IAAI4P,KAAK,KAAK,UAAU,IAAIA,KAAK,KAAK,YAAY,EAAE;YAAA,IAAA6D,qBAAA;YAChD,CAAAA,qBAAA,GAAAF,eAAe,CAAC3D,KAAK,CAAC,EAAC2B,IAAI,CAAA8B,KAAA,CAAAI,qBAAA,EAAAH,kBAAA,CAAI1G,QAAQ,EAAC;UAC5C;QACJ;;QAEA;QACA,IAAIgB,YAAY,IAAIjL,OAAO,EAAE;UACzB,IAAIiN,KAAK,KAAK,UAAU,IAAIA,KAAK,KAAK,YAAY,EAAE;YAChD4D,oBAAoB,CAAC5D,KAAK,CAAC,CAACjN,OAAO,CAAC,GAAG;cACnCuK,OAAO,EAAEU,YAAY;cACrB5L,IAAI,EAAEA,IAAI;cACV6J,YAAY,EAAEA;YAClB,CAAC;UACL;QACJ;MACJ,CAAC,CAAC;;MAEF;MACAyE,MAAM,CAACoD,OAAO,CAACH,eAAe,CAAC,CAAChH,OAAO,CAAC,UAAAoH,IAAA,EAAuB;QAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;UAArB/D,KAAK,GAAAgE,KAAA;UAAEhH,QAAQ,GAAAgH,KAAA;QACrD,IAAIhH,QAAQ,CAAC5M,MAAM,GAAG,CAAC,EAAE;UACrBiK,MAAI,CAACuH,qBAAqB,CAAC5E,QAAQ,EAAEgD,KAAK,CAAC;QAC/C;MACJ,CAAC,CAAC;;MAEF;MACAU,MAAM,CAACoD,OAAO,CAACF,oBAAoB,CAAC,CAACjH,OAAO,CAAC,UAAAuH,KAAA,EAAwB;QAAA,IAAAC,KAAA,GAAAF,cAAA,CAAAC,KAAA;UAAtBlE,KAAK,GAAAmE,KAAA;UAAEC,SAAS,GAAAD,KAAA;QAC3DzD,MAAM,CAACoD,OAAO,CAACM,SAAS,CAAC,CAACzH,OAAO,CAAC,UAAA0H,KAAA,EAAsB;UAAA,IAAAC,KAAA,GAAAL,cAAA,CAAAI,KAAA;YAApBnD,QAAQ,GAAAoD,KAAA;YAAEC,IAAI,GAAAD,KAAA;UAC9C;UACAjK,MAAI,CAACwH,iBAAiB,CAAC0C,IAAI,CAACjH,OAAO,EAAE0C,KAAK,CAAC;;UAE3C;UACA,IAAIA,KAAK,KAAK,UAAU,IAAIuE,IAAI,CAACtI,YAAY,EAAE;YAC3C5B,MAAI,CAACyH,qBAAqB,CAACyC,IAAI,CAACjH,OAAO,EAAEiH,IAAI,CAACtI,YAAY,CAAC;UAC/D;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;;MAEF;MACA,IAAIhE,QAAQ,CAACuM,IAAI,EAAE;QACfvM,QAAQ,CAACuM,IAAI,CAACC,qBAAqB,CAAC,CAAC;MACzC;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAA3U,GAAA;IAAAC,KAAA,EAIA,SAAA6R,qBAAqBA,CAAC5E,QAAQ,EAAEgD,KAAK,EAAE;MACnC,IAAI,CAAChD,QAAQ,IAAIA,QAAQ,CAAC5M,MAAM,KAAK,CAAC,EAAE;;MAExC;MACA,IAAMsU,aAAa,GAAG,CAClBnV,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,CACzC;MAED,IAAIgT,QAAQ,GAAG,EAAE;MACjB,IAAI3E,KAAK,KAAK,UAAU,EAAE;QACtB2E,QAAQ,GAAGpV,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC;MACnD,CAAC,MAAM,IAAIqO,KAAK,KAAK,YAAY,EAAE;QAC/B2E,QAAQ,GAAGpV,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC;MACrD,CAAC,MAAM;QACH;QACAgT,QAAQ,GAAG3E,KAAK;MACpB;;MAEA;MACA,IAAM4E,IAAI,GAAG,IAAItS,GAAG,CAAC,CAAC;;MAEtB;MACA0K,QAAQ,CAACL,OAAO,CAAC,UAAAW,OAAO,EAAI;QAAA,IAAAuH,kBAAA;QACxB;QACA,CAAAA,kBAAA,GAAAvH,OAAO,CAACjF,SAAS,EAACgD,MAAM,CAAAoI,KAAA,CAAAoB,kBAAA,EAAIH,aAAa,CAAC;;QAE1C;QACApH,OAAO,CAACjF,SAAS,CAACrF,GAAG,CAAC2R,QAAQ,CAAC;;QAE/B;QACA,IAAIrH,OAAO,CAACjF,SAAS,CAAC2G,QAAQ,CAACzP,4DAAS,CAACkC,IAAI,CAACuD,gBAAgB,CAACrD,IAAI,CAAC,CAAC,CAAC,EAAE;UACpE2L,OAAO,CAACjF,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACkC,IAAI,CAACqT,WAAW,CAACnT,IAAI,CAAC,CAAC,CAAC;QAC5D;;QAEA;QACA,IAAM8M,GAAG,GAAGzI,yDAAU,CAAC0I,YAAY,CAACpB,OAAO,CAAC;QAC5C,IAAImB,GAAG,EAAE;UACLmG,IAAI,CAAC5R,GAAG,CAACyL,GAAG,CAAC;QACjB;MACJ,CAAC,CAAC;;MAEF;MACAmG,IAAI,CAACjI,OAAO,CAAC,UAAA8B,GAAG,EAAI;QAAA,IAAAsG,cAAA;QAChB,CAAAA,cAAA,GAAAtG,GAAG,CAACpG,SAAS,EAACgD,MAAM,CAAAoI,KAAA,CAAAsB,cAAA,EAAIL,aAAa,CAAC;QACtCjG,GAAG,CAACpG,SAAS,CAACrF,GAAG,CAAC2R,QAAQ,CAAC;MAC/B,CAAC,CAAC;IACN;;IAEA;AACJ;AACA;AACA;EAHI;IAAA7U,GAAA;IAAAC,KAAA,EAIA,SAAA0S,qBAAqBA,CAACzF,QAAQ,EAAEuF,WAAW,EAAE;MACzC,IAAI,CAAC,CAACvF,QAAQ,IAAIA,QAAQ,CAAC5M,MAAM,KAAK,CAAC,MAAM,CAACmS,WAAW,IAAIA,WAAW,CAACnS,MAAM,KAAK,CAAC,CAAC,EAAE;;MAExF;MACA,IAAMsU,aAAa,GAAG,CAClBnV,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,CACzC;MAED,IAAMqT,iBAAiB,GAAG,CACtBzV,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,EACtCpC,4DAAS,CAAC8O,KAAK,CAACC,MAAM,CAAC3M,IAAI,CAAC,CAAC,EAC7BpC,4DAAS,CAAC8O,KAAK,CAACE,WAAW,CAAC5M,IAAI,CAAC,CAAC,EAClCpC,4DAAS,CAAC8O,KAAK,CAACG,YAAY,CAAC7M,IAAI,CAAC,CAAC,CACtC;;MAED;MACA,IAAMiT,IAAI,GAAG,IAAItS,GAAG,CAAC,CAAC;;MAEtB;MACA,IAAI0K,QAAQ,IAAIA,QAAQ,CAAC5M,MAAM,GAAG,CAAC,EAAE;QACjC4M,QAAQ,CAACL,OAAO,CAAC,UAAAsI,EAAE,EAAI;UAAA,IAAAC,aAAA;UACnB;UACA,IAAI,CAACD,EAAE,EAAE;;UAET;UACA,CAAAC,aAAA,GAAAD,EAAE,CAAC5M,SAAS,EAACgD,MAAM,CAAAoI,KAAA,CAAAyB,aAAA,EAAIR,aAAa,CAAC;;UAErC;UACA,IAAMjG,GAAG,GAAGzI,yDAAU,CAAC0I,YAAY,CAACuG,EAAE,CAAC;UACvC,IAAIxG,GAAG,EAAE;YACLmG,IAAI,CAAC5R,GAAG,CAACyL,GAAG,CAAC;UACjB;QACJ,CAAC,CAAC;;QAEF;QACAmG,IAAI,CAACjI,OAAO,CAAC,UAAA8B,GAAG,EAAI;UAAA,IAAA0G,eAAA;UAChB,CAAAA,eAAA,GAAA1G,GAAG,CAACpG,SAAS,EAACgD,MAAM,CAAAoI,KAAA,CAAA0B,eAAA,EAAIT,aAAa,CAAC;QAC1C,CAAC,CAAC;MACN;;MAEA;MACA,IAAInC,WAAW,IAAIA,WAAW,CAACnS,MAAM,GAAG,CAAC,EAAE;QACvCmS,WAAW,CAAC5F,OAAO,CAAC,UAAAyI,MAAM,EAAI;UAC1B,IAAIA,MAAM,EAAE;YAAA,IAAAC,iBAAA;YACR;YACA,IAAMC,aAAa,GAAGF,MAAM,CAAC/M,SAAS,CAAC2G,QAAQ,CAACzP,4DAAS,CAAC8O,KAAK,CAACa,kBAAkB,CAACvN,IAAI,CAAC,CAAC,CAAC;;YAE1F;YACA,CAAA0T,iBAAA,GAAAD,MAAM,CAAC/M,SAAS,EAACgD,MAAM,CAAAoI,KAAA,CAAA4B,iBAAA,EAAIL,iBAAiB,CAAC;;YAE7C;YACA,IAAIM,aAAa,EAAE;cACfF,MAAM,CAAC/M,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAAC8O,KAAK,CAACa,kBAAkB,CAACvN,IAAI,CAAC,CAAC,CAAC;YACnE;UACJ;QACJ,CAAC,CAAC;MACN;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAA7B,GAAA;IAAAC,KAAA,EAIA,SAAA8R,iBAAiBA,CAACvE,OAAO,EAAE0C,KAAK,EAAE;MAC9B,IAAI,CAAC1C,OAAO,EAAE;MAEd,IAAMW,MAAM,GAAGX,OAAO,CAACY,OAAO,CAACD,MAAM;MACrC,IAAI,CAACA,MAAM,EAAE;MAEb5O,+CAAK,CAACY,GAAG,iEAAAuB,MAAA,CAAiEyM,MAAM,GAAI,IAAI,EAAE,CAAC,CAAC;MAC5F;MACA,IAAME,UAAU,GAAGnI,yDAAU,CAACoI,aAAa,CAACH,MAAM,CAAC;MAEnD,IAAIE,UAAU,EAAE;QACZ9O,+CAAK,CAACY,GAAG,2DAAAuB,MAAA,CAA2DwO,KAAK,GAAI;UACzE/B,MAAM,EAAEA,MAAM;UACdmE,cAAc,EAAEC,KAAK,CAACC,IAAI,CAACnE,UAAU,CAAC9F,SAAS;QACnD,CAAC,EAAE,CAAC,CAAC;;QAEL;QACA,IAAMiN,aAAa,GAAGnH,UAAU,CAAC9F,SAAS,CAAC2G,QAAQ,CAACzP,4DAAS,CAAC8O,KAAK,CAACa,kBAAkB,CAACvN,IAAI,CAAC,CAAC,CAAC;;QAE9F;QACAwM,UAAU,CAAC9F,SAAS,CAACgD,MAAM,CACvB9L,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,EACtCpC,4DAAS,CAAC8O,KAAK,CAACC,MAAM,CAAC3M,IAAI,CAAC,CAAC,EAC7BpC,4DAAS,CAAC8O,KAAK,CAACE,WAAW,CAAC5M,IAAI,CAAC,CAAC,EAClCpC,4DAAS,CAAC8O,KAAK,CAACG,YAAY,CAAC7M,IAAI,CAAC,CACtC,CAAC;;QAED;QACA,IAAIqO,KAAK,KAAK,UAAU,EAAE;UACtB7B,UAAU,CAAC9F,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACkC,IAAI,CAAC8E,cAAc,CAAC5E,IAAI,CAAC,CAAC,CAAC;;UAE9D;UACA,IAAI2L,OAAO,CAACY,OAAO,CAAC9L,IAAI,KAAK,MAAM,EAAE;YACjC+L,UAAU,CAAC9F,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAAC8O,KAAK,CAACE,WAAW,CAAC5M,IAAI,CAAC,CAAC,CAAC;UAChE,CAAC,MAAM;YACHwM,UAAU,CAAC9F,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAAC8O,KAAK,CAACG,YAAY,CAAC7M,IAAI,CAAC,CAAC,CAAC;UACjE;QACJ,CAAC,MAAM,IAAIqO,KAAK,KAAK,YAAY,EAAE;UAC/B7B,UAAU,CAAC9F,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACkC,IAAI,CAACgF,gBAAgB,CAAC9E,IAAI,CAAC,CAAC,CAAC;QACpE,CAAC,MAAM;UACH;UACAwM,UAAU,CAAC9F,SAAS,CAACrF,GAAG,CAACgN,KAAK,CAAC;QACnC;;QAEA;QACA,IAAIsF,aAAa,IAAI,CAACnH,UAAU,CAAC9F,SAAS,CAAC2G,QAAQ,CAACzP,4DAAS,CAAC8O,KAAK,CAACa,kBAAkB,CAACvN,IAAI,CAAC,CAAC,CAAC,EAAE;UAC5FwM,UAAU,CAAC9F,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAAC8O,KAAK,CAACa,kBAAkB,CAACvN,IAAI,CAAC,CAAC,CAAC;UACnEtC,+CAAK,CAACY,GAAG,iEAAiE,IAAI,EAAE,CAAC,CAAC;QACtF;MACJ,CAAC,MAAM;QACHZ,+CAAK,CAAC0S,IAAI,2DAAAvQ,MAAA,CAA2DyM,MAAM,GAAI,IAAI,EAAE,CAAC,CAAC;MAC3F;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAnO,GAAA;IAAAC,KAAA,EAIA,SAAAiS,sBAAsBA,CAAA,EAAG;MACrB3S,+CAAK,CAACY,GAAG,8DAA8D,IAAI,EAAE,CAAC,CAAC;MAC/E,IAAI,OAAO,IAAI,CAACN,YAAY,CAAC8N,iBAAiB,KAAK,UAAU,EAAE;QAC3D,IAAI,CAAC9N,YAAY,CAAC8N,iBAAiB,CAAC,CAAC;MACzC,CAAC,MAAM;QACHpO,+CAAK,CAACY,GAAG,kEAAkE,IAAI,EAAE,CAAC,CAAC;MACvF;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAH,GAAA;IAAAC,KAAA,EAIA,SAAAwV,UAAUA,CAAA,EAAG;MACT,OAAAhF,aAAA,KAAW,IAAI,CAACe,QAAQ;IAC5B;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;;;AChiB+C;AACV;;AAE1C;AACA;AACA;AACO,IAAMkE,qBAAqB;EAC9B;AACJ;AACA;EACI,SAAAA,sBAAY7V,YAAY,EAAE;IAAAC,eAAA,OAAA4V,qBAAA;IACtB,IAAI,CAAC7V,YAAY,GAAGA,YAAY;EACpC;;EAEA;AACJ;AACA;AACA;AACA;EAJI,OAAAE,YAAA,CAAA2V,qBAAA;IAAA1V,GAAA;IAAAC,KAAA,EAKA,SAAA0V,qBAAqBA,CAACrP,UAAU,EAAE;MAC9B;MACA,IAAIsK,MAAM,CAACC,IAAI,CAACvK,UAAU,CAAC,CAAChG,MAAM,KAAK,CAAC,EAAE;QACtC,OAAO4F,yDAAU,CAAC0P,mBAAmB,CAAC,IAAI,CAAC/V,YAAY,CAACyB,UAAU,CAAC;MACvE;;MAEA;MACA,IAAMuU,MAAM,GAAG,EAAE;;MAEjB;MACA,IAAMC,eAAe,GAAG,CAAC,CAAC;MAC1B,IAAI,CAACjW,YAAY,CAACyB,UAAU,CAACuL,OAAO,CAAC,UAAA9J,IAAI,EAAI;QACzC,IAAIA,IAAI,CAACE,OAAO,EAAE;UACd,IAAI,CAAC6S,eAAe,CAAC/S,IAAI,CAACE,OAAO,CAAC,EAAE;YAChC6S,eAAe,CAAC/S,IAAI,CAACE,OAAO,CAAC,GAAG,EAAE;UACtC;UACA6S,eAAe,CAAC/S,IAAI,CAACE,OAAO,CAAC,CAAC4O,IAAI,CAAC9O,IAAI,CAAC;QAC5C;MACJ,CAAC,CAAC;;MAEF;MACA,IAAMgT,cAAc,GAAG,CAAC,CAAC;MACzB,IAAI,CAAClW,YAAY,CAACuB,UAAU,CAACyL,OAAO,CAAC,UAAA9J,IAAI,EAAI;QACzC,IAAIA,IAAI,CAACE,OAAO,EAAE;UACd,IAAI,CAAC8S,cAAc,CAAChT,IAAI,CAACE,OAAO,CAAC,EAAE;YAC/B8S,cAAc,CAAChT,IAAI,CAACE,OAAO,CAAC,GAAG,EAAE;UACrC;UACA8S,cAAc,CAAChT,IAAI,CAACE,OAAO,CAAC,CAAC4O,IAAI,CAAC9O,IAAI,CAAC;QAC3C;MACJ,CAAC,CAAC;MAEFxD,+CAAK,CAACY,GAAG,CAAC,gBAAgB,EAAE4V,cAAc,EAAE,CAAC,CAAC;MAC9CxW,+CAAK,CAACY,GAAG,CAAC,iBAAiB,EAAE2V,eAAe,EAAE,CAAC,CAAC;MAChDvW,+CAAK,CAACY,GAAG,CAAC,YAAY,EAAEmG,UAAU,EAAE,CAAC,CAAC;;MAEtC;MACA,IAAM0P,eAAe,GAAG,IAAIxT,GAAG,CAAC,CAAC;;MAEjC;MACA,KAAK,IAAIyT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACpW,YAAY,CAACyB,UAAU,CAAChB,MAAM,EAAE2V,CAAC,EAAE,EAAE;QAC1D,IAAMlT,IAAI,GAAG,IAAI,CAAClD,YAAY,CAACyB,UAAU,CAAC2U,CAAC,CAAC;;QAE5C;QACA,IAAI,CAAClT,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACC,IAAI,KAAK,SAAS,EAAE;UAC1C6S,MAAM,CAAChE,IAAI,CAAC9O,IAAI,CAACA,IAAI,CAAC;UACtB;QACJ;;QAEA;QACA,IAAIA,IAAI,CAACC,IAAI,KAAK,SAAS,EAAE;UACzB;QACJ;;QAEA;QACA,IAAID,IAAI,CAACE,OAAO,IAAI,CAAC+S,eAAe,CAACxR,GAAG,CAACzB,IAAI,CAACE,OAAO,CAAC,EAAE;UACpD;UACA+S,eAAe,CAAC9S,GAAG,CAACH,IAAI,CAACE,OAAO,CAAC;;UAEjC;UACA,IAAMiT,SAAS,GAAG5P,UAAU,CAACvD,IAAI,CAACE,OAAO,CAAC;;UAE1C;UACA,IAAIiT,SAAS,KAAK,MAAM,EAAE;YACtB;YACA,IAAMC,SAAS,GAAGJ,cAAc,CAAChT,IAAI,CAACE,OAAO,CAAC,IAAI,EAAE;YACpD,IAAMmT,YAAY,GAAGD,SAAS,CAACxJ,MAAM,CAAC,UAAA0J,CAAC;cAAA,OAAIA,CAAC,CAACrT,IAAI,KAAK,SAAS;YAAA,EAAC;YAEhE,IAAIoT,YAAY,CAAC9V,MAAM,GAAG,CAAC,EAAE;cACzB8V,YAAY,CAACvJ,OAAO,CAAC,UAAAwJ,CAAC;gBAAA,OAAIR,MAAM,CAAChE,IAAI,CAACwE,CAAC,CAACtT,IAAI,CAAC;cAAA,EAAC;YAClD;UACJ,CAAC,MAAM;YACH;YACA,IAAMuT,UAAU,GAAGR,eAAe,CAAC/S,IAAI,CAACE,OAAO,CAAC,IAAI,EAAE;YACtD,IAAMmT,aAAY,GAAGE,UAAU,CAAC3J,MAAM,CAAC,UAAA0J,CAAC;cAAA,OAAIA,CAAC,CAACrT,IAAI,KAAK,SAAS;YAAA,EAAC;YAEjE,IAAIoT,aAAY,CAAC9V,MAAM,GAAG,CAAC,EAAE;cACzB8V,aAAY,CAACvJ,OAAO,CAAC,UAAAwJ,CAAC;gBAAA,OAAIR,MAAM,CAAChE,IAAI,CAACwE,CAAC,CAACtT,IAAI,CAAC;cAAA,EAAC;YAClD;UACJ;QACJ;MACJ;;MAEA;MACA,OAAO8S,MAAM,CAACU,IAAI,CAAC,IAAI,CAAC;IAC5B;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAvW,GAAA;IAAAC,KAAA,EAKA,SAAAuW,qBAAqBA,CAACnU,KAAK,EAAE;MACzB,OAAO6D,yDAAU,CAAC0P,mBAAmB,CAACvT,KAAK,CAAC;IAChD;EAAC;AAAA;;;;;;;;;;;;;;;;;;;+CC/GL,qJAAAoU,mBAAA,YAAAA,oBAAA,WAAArT,CAAA,SAAAsT,CAAA,EAAAtT,CAAA,OAAAuT,CAAA,GAAA/F,MAAA,CAAAgG,SAAA,EAAA/T,CAAA,GAAA8T,CAAA,CAAAE,cAAA,EAAAC,CAAA,GAAAlG,MAAA,CAAAmG,cAAA,cAAAL,CAAA,EAAAtT,CAAA,EAAAuT,CAAA,IAAAD,CAAA,CAAAtT,CAAA,IAAAuT,CAAA,CAAA1W,KAAA,KAAAgW,CAAA,wBAAAe,MAAA,GAAAA,MAAA,OAAAC,CAAA,GAAAhB,CAAA,CAAAiB,QAAA,kBAAA9S,CAAA,GAAA6R,CAAA,CAAAkB,aAAA,uBAAAC,CAAA,GAAAnB,CAAA,CAAAoB,WAAA,8BAAAC,OAAAZ,CAAA,EAAAtT,CAAA,EAAAuT,CAAA,WAAA/F,MAAA,CAAAmG,cAAA,CAAAL,CAAA,EAAAtT,CAAA,IAAAnD,KAAA,EAAA0W,CAAA,EAAAY,UAAA,MAAAC,YAAA,MAAAC,QAAA,SAAAf,CAAA,CAAAtT,CAAA,WAAAkU,MAAA,mBAAAZ,CAAA,IAAAY,MAAA,YAAAA,OAAAZ,CAAA,EAAAtT,CAAA,EAAAuT,CAAA,WAAAD,CAAA,CAAAtT,CAAA,IAAAuT,CAAA,gBAAAe,KAAAhB,CAAA,EAAAtT,CAAA,EAAAuT,CAAA,EAAA9T,CAAA,QAAAoT,CAAA,GAAA7S,CAAA,IAAAA,CAAA,CAAAwT,SAAA,YAAAe,SAAA,GAAAvU,CAAA,GAAAuU,SAAA,EAAAV,CAAA,GAAArG,MAAA,CAAAgH,MAAA,CAAA3B,CAAA,CAAAW,SAAA,GAAAxS,CAAA,OAAAyT,OAAA,CAAAhV,CAAA,gBAAAiU,CAAA,CAAAG,CAAA,eAAAhX,KAAA,EAAA6X,gBAAA,CAAApB,CAAA,EAAAC,CAAA,EAAAvS,CAAA,MAAA6S,CAAA,aAAAc,SAAArB,CAAA,EAAAtT,CAAA,EAAAuT,CAAA,mBAAA3T,IAAA,YAAAgV,GAAA,EAAAtB,CAAA,CAAAuB,IAAA,CAAA7U,CAAA,EAAAuT,CAAA,cAAAD,CAAA,aAAA1T,IAAA,WAAAgV,GAAA,EAAAtB,CAAA,QAAAtT,CAAA,CAAAsU,IAAA,GAAAA,IAAA,MAAAQ,CAAA,qBAAA7B,CAAA,qBAAAhT,CAAA,gBAAAT,CAAA,gBAAAuV,CAAA,gBAAAR,UAAA,cAAAS,kBAAA,cAAAC,2BAAA,SAAAC,CAAA,OAAAhB,MAAA,CAAAgB,CAAA,EAAArB,CAAA,qCAAAsB,CAAA,GAAA3H,MAAA,CAAA4H,cAAA,EAAAC,CAAA,GAAAF,CAAA,IAAAA,CAAA,CAAAA,CAAA,CAAAG,MAAA,QAAAD,CAAA,IAAAA,CAAA,KAAA9B,CAAA,IAAA9T,CAAA,CAAAoV,IAAA,CAAAQ,CAAA,EAAAxB,CAAA,MAAAqB,CAAA,GAAAG,CAAA,OAAAE,CAAA,GAAAN,0BAAA,CAAAzB,SAAA,GAAAe,SAAA,CAAAf,SAAA,GAAAhG,MAAA,CAAAgH,MAAA,CAAAU,CAAA,YAAAM,sBAAAlC,CAAA,gCAAA7J,OAAA,WAAAzJ,CAAA,IAAAkU,MAAA,CAAAZ,CAAA,EAAAtT,CAAA,YAAAsT,CAAA,gBAAAmC,OAAA,CAAAzV,CAAA,EAAAsT,CAAA,sBAAAoC,cAAApC,CAAA,EAAAtT,CAAA,aAAA2V,OAAApC,CAAA,EAAAG,CAAA,EAAAb,CAAA,EAAAgB,CAAA,QAAA7S,CAAA,GAAA2T,QAAA,CAAArB,CAAA,CAAAC,CAAA,GAAAD,CAAA,EAAAI,CAAA,mBAAA1S,CAAA,CAAApB,IAAA,QAAAoU,CAAA,GAAAhT,CAAA,CAAA4T,GAAA,EAAAE,CAAA,GAAAd,CAAA,CAAAnX,KAAA,SAAAiY,CAAA,gBAAAc,OAAA,CAAAd,CAAA,KAAArV,CAAA,CAAAoV,IAAA,CAAAC,CAAA,eAAA9U,CAAA,CAAA6V,OAAA,CAAAf,CAAA,CAAAgB,OAAA,EAAAC,IAAA,WAAAzC,CAAA,IAAAqC,MAAA,SAAArC,CAAA,EAAAT,CAAA,EAAAgB,CAAA,gBAAAP,CAAA,IAAAqC,MAAA,UAAArC,CAAA,EAAAT,CAAA,EAAAgB,CAAA,QAAA7T,CAAA,CAAA6V,OAAA,CAAAf,CAAA,EAAAiB,IAAA,WAAAzC,CAAA,IAAAU,CAAA,CAAAnX,KAAA,GAAAyW,CAAA,EAAAT,CAAA,CAAAmB,CAAA,gBAAAV,CAAA,WAAAqC,MAAA,UAAArC,CAAA,EAAAT,CAAA,EAAAgB,CAAA,SAAAA,CAAA,CAAA7S,CAAA,CAAA4T,GAAA,SAAArB,CAAA,EAAAG,CAAA,oBAAA7W,KAAA,WAAAA,MAAAyW,CAAA,EAAA7T,CAAA,aAAAuW,2BAAA,eAAAhW,CAAA,WAAAA,CAAA,EAAAuT,CAAA,IAAAoC,MAAA,CAAArC,CAAA,EAAA7T,CAAA,EAAAO,CAAA,EAAAuT,CAAA,gBAAAA,CAAA,GAAAA,CAAA,GAAAA,CAAA,CAAAwC,IAAA,CAAAC,0BAAA,EAAAA,0BAAA,IAAAA,0BAAA,qBAAAtB,iBAAA1U,CAAA,EAAAuT,CAAA,EAAA9T,CAAA,QAAAiU,CAAA,GAAAoB,CAAA,mBAAAjC,CAAA,EAAAgB,CAAA,QAAAH,CAAA,KAAAzT,CAAA,QAAAgW,KAAA,sCAAAvC,CAAA,KAAAlU,CAAA,oBAAAqT,CAAA,QAAAgB,CAAA,WAAAhX,KAAA,EAAAyW,CAAA,EAAA5T,IAAA,eAAAD,CAAA,CAAAyW,MAAA,GAAArD,CAAA,EAAApT,CAAA,CAAAmV,GAAA,GAAAf,CAAA,UAAA7S,CAAA,GAAAvB,CAAA,CAAA0W,QAAA,MAAAnV,CAAA,QAAAgT,CAAA,GAAAoC,mBAAA,CAAApV,CAAA,EAAAvB,CAAA,OAAAuU,CAAA,QAAAA,CAAA,KAAAe,CAAA,mBAAAf,CAAA,qBAAAvU,CAAA,CAAAyW,MAAA,EAAAzW,CAAA,CAAA4W,IAAA,GAAA5W,CAAA,CAAA6W,KAAA,GAAA7W,CAAA,CAAAmV,GAAA,sBAAAnV,CAAA,CAAAyW,MAAA,QAAAxC,CAAA,KAAAoB,CAAA,QAAApB,CAAA,GAAAlU,CAAA,EAAAC,CAAA,CAAAmV,GAAA,EAAAnV,CAAA,CAAA8W,iBAAA,CAAA9W,CAAA,CAAAmV,GAAA,uBAAAnV,CAAA,CAAAyW,MAAA,IAAAzW,CAAA,CAAA+W,MAAA,WAAA/W,CAAA,CAAAmV,GAAA,GAAAlB,CAAA,GAAAzT,CAAA,MAAAiV,CAAA,GAAAP,QAAA,CAAA3U,CAAA,EAAAuT,CAAA,EAAA9T,CAAA,oBAAAyV,CAAA,CAAAtV,IAAA,QAAA8T,CAAA,GAAAjU,CAAA,CAAAC,IAAA,GAAAF,CAAA,GAAAyT,CAAA,EAAAiC,CAAA,CAAAN,GAAA,KAAAG,CAAA,qBAAAlY,KAAA,EAAAqY,CAAA,CAAAN,GAAA,EAAAlV,IAAA,EAAAD,CAAA,CAAAC,IAAA,kBAAAwV,CAAA,CAAAtV,IAAA,KAAA8T,CAAA,GAAAlU,CAAA,EAAAC,CAAA,CAAAyW,MAAA,YAAAzW,CAAA,CAAAmV,GAAA,GAAAM,CAAA,CAAAN,GAAA,mBAAAwB,oBAAApW,CAAA,EAAAuT,CAAA,QAAA9T,CAAA,GAAA8T,CAAA,CAAA2C,MAAA,EAAAxC,CAAA,GAAA1T,CAAA,CAAA8T,QAAA,CAAArU,CAAA,OAAAiU,CAAA,KAAAJ,CAAA,SAAAC,CAAA,CAAA4C,QAAA,qBAAA1W,CAAA,IAAAO,CAAA,CAAA8T,QAAA,eAAAP,CAAA,CAAA2C,MAAA,aAAA3C,CAAA,CAAAqB,GAAA,GAAAtB,CAAA,EAAA8C,mBAAA,CAAApW,CAAA,EAAAuT,CAAA,eAAAA,CAAA,CAAA2C,MAAA,kBAAAzW,CAAA,KAAA8T,CAAA,CAAA2C,MAAA,YAAA3C,CAAA,CAAAqB,GAAA,OAAA6B,SAAA,uCAAAhX,CAAA,iBAAAsV,CAAA,MAAAlC,CAAA,GAAA8B,QAAA,CAAAjB,CAAA,EAAA1T,CAAA,CAAA8T,QAAA,EAAAP,CAAA,CAAAqB,GAAA,mBAAA/B,CAAA,CAAAjT,IAAA,SAAA2T,CAAA,CAAA2C,MAAA,YAAA3C,CAAA,CAAAqB,GAAA,GAAA/B,CAAA,CAAA+B,GAAA,EAAArB,CAAA,CAAA4C,QAAA,SAAApB,CAAA,MAAAlB,CAAA,GAAAhB,CAAA,CAAA+B,GAAA,SAAAf,CAAA,GAAAA,CAAA,CAAAnU,IAAA,IAAA6T,CAAA,CAAAvT,CAAA,CAAA0W,UAAA,IAAA7C,CAAA,CAAAhX,KAAA,EAAA0W,CAAA,CAAAoD,IAAA,GAAA3W,CAAA,CAAA4W,OAAA,eAAArD,CAAA,CAAA2C,MAAA,KAAA3C,CAAA,CAAA2C,MAAA,WAAA3C,CAAA,CAAAqB,GAAA,GAAAtB,CAAA,GAAAC,CAAA,CAAA4C,QAAA,SAAApB,CAAA,IAAAlB,CAAA,IAAAN,CAAA,CAAA2C,MAAA,YAAA3C,CAAA,CAAAqB,GAAA,OAAA6B,SAAA,sCAAAlD,CAAA,CAAA4C,QAAA,SAAApB,CAAA,cAAA8B,aAAAvD,CAAA,QAAAtT,CAAA,KAAA8W,MAAA,EAAAxD,CAAA,YAAAA,CAAA,KAAAtT,CAAA,CAAA+W,QAAA,GAAAzD,CAAA,WAAAA,CAAA,KAAAtT,CAAA,CAAAgX,UAAA,GAAA1D,CAAA,KAAAtT,CAAA,CAAAiX,QAAA,GAAA3D,CAAA,WAAA4D,UAAA,CAAAzI,IAAA,CAAAzO,CAAA,cAAAmX,cAAA7D,CAAA,QAAAtT,CAAA,GAAAsT,CAAA,CAAA8D,UAAA,QAAApX,CAAA,CAAAJ,IAAA,oBAAAI,CAAA,CAAA4U,GAAA,EAAAtB,CAAA,CAAA8D,UAAA,GAAApX,CAAA,aAAAyU,QAAAnB,CAAA,SAAA4D,UAAA,MAAAJ,MAAA,aAAAxD,CAAA,CAAA7J,OAAA,CAAAoN,YAAA,cAAAQ,KAAA,iBAAA/B,OAAAtV,CAAA,QAAAA,CAAA,WAAAA,CAAA,QAAAuT,CAAA,GAAAvT,CAAA,CAAA6T,CAAA,OAAAN,CAAA,SAAAA,CAAA,CAAAsB,IAAA,CAAA7U,CAAA,4BAAAA,CAAA,CAAA2W,IAAA,SAAA3W,CAAA,OAAAsX,KAAA,CAAAtX,CAAA,CAAA9C,MAAA,SAAAwW,CAAA,OAAAb,CAAA,YAAA8D,KAAA,aAAAjD,CAAA,GAAA1T,CAAA,CAAA9C,MAAA,OAAAuC,CAAA,CAAAoV,IAAA,CAAA7U,CAAA,EAAA0T,CAAA,UAAAiD,IAAA,CAAA9Z,KAAA,GAAAmD,CAAA,CAAA0T,CAAA,GAAAiD,IAAA,CAAAjX,IAAA,OAAAiX,IAAA,SAAAA,IAAA,CAAA9Z,KAAA,GAAAyW,CAAA,EAAAqD,IAAA,CAAAjX,IAAA,OAAAiX,IAAA,YAAA9D,CAAA,CAAA8D,IAAA,GAAA9D,CAAA,gBAAA4D,SAAA,CAAAb,OAAA,CAAA5V,CAAA,kCAAAgV,iBAAA,CAAAxB,SAAA,GAAAyB,0BAAA,EAAAvB,CAAA,CAAA6B,CAAA,mBAAA1Y,KAAA,EAAAoY,0BAAA,EAAAb,YAAA,SAAAV,CAAA,CAAAuB,0BAAA,mBAAApY,KAAA,EAAAmY,iBAAA,EAAAZ,YAAA,SAAAY,iBAAA,CAAAuC,WAAA,GAAArD,MAAA,CAAAe,0BAAA,EAAAjB,CAAA,wBAAAhU,CAAA,CAAAwX,mBAAA,aAAAlE,CAAA,QAAAtT,CAAA,wBAAAsT,CAAA,IAAAA,CAAA,CAAAmE,WAAA,WAAAzX,CAAA,KAAAA,CAAA,KAAAgV,iBAAA,6BAAAhV,CAAA,CAAAuX,WAAA,IAAAvX,CAAA,CAAAvB,IAAA,OAAAuB,CAAA,CAAA0X,IAAA,aAAApE,CAAA,WAAA9F,MAAA,CAAAmK,cAAA,GAAAnK,MAAA,CAAAmK,cAAA,CAAArE,CAAA,EAAA2B,0BAAA,KAAA3B,CAAA,CAAAsE,SAAA,GAAA3C,0BAAA,EAAAf,MAAA,CAAAZ,CAAA,EAAAU,CAAA,yBAAAV,CAAA,CAAAE,SAAA,GAAAhG,MAAA,CAAAgH,MAAA,CAAAe,CAAA,GAAAjC,CAAA,KAAAtT,CAAA,CAAA6X,KAAA,aAAAvE,CAAA,aAAAwC,OAAA,EAAAxC,CAAA,OAAAkC,qBAAA,CAAAE,aAAA,CAAAlC,SAAA,GAAAU,MAAA,CAAAwB,aAAA,CAAAlC,SAAA,EAAAxS,CAAA,iCAAAhB,CAAA,CAAA0V,aAAA,GAAAA,aAAA,EAAA1V,CAAA,CAAA8X,KAAA,aAAAxE,CAAA,EAAAC,CAAA,EAAA9T,CAAA,EAAAiU,CAAA,EAAAb,CAAA,eAAAA,CAAA,KAAAA,CAAA,GAAAkF,OAAA,OAAAlE,CAAA,OAAA6B,aAAA,CAAApB,IAAA,CAAAhB,CAAA,EAAAC,CAAA,EAAA9T,CAAA,EAAAiU,CAAA,GAAAb,CAAA,UAAA7S,CAAA,CAAAwX,mBAAA,CAAAjE,CAAA,IAAAM,CAAA,GAAAA,CAAA,CAAA8C,IAAA,GAAAZ,IAAA,WAAAzC,CAAA,WAAAA,CAAA,CAAA5T,IAAA,GAAA4T,CAAA,CAAAzW,KAAA,GAAAgX,CAAA,CAAA8C,IAAA,WAAAnB,qBAAA,CAAAD,CAAA,GAAArB,MAAA,CAAAqB,CAAA,EAAAvB,CAAA,gBAAAE,MAAA,CAAAqB,CAAA,EAAA1B,CAAA,iCAAAK,MAAA,CAAAqB,CAAA,6DAAAvV,CAAA,CAAAyN,IAAA,aAAA6F,CAAA,QAAAtT,CAAA,GAAAwN,MAAA,CAAA8F,CAAA,GAAAC,CAAA,gBAAA9T,CAAA,IAAAO,CAAA,EAAAuT,CAAA,CAAA9E,IAAA,CAAAhP,CAAA,UAAA8T,CAAA,CAAAyE,OAAA,aAAArB,KAAA,WAAApD,CAAA,CAAArW,MAAA,SAAAoW,CAAA,GAAAC,CAAA,CAAA0E,GAAA,QAAA3E,CAAA,IAAAtT,CAAA,SAAA2W,IAAA,CAAA9Z,KAAA,GAAAyW,CAAA,EAAAqD,IAAA,CAAAjX,IAAA,OAAAiX,IAAA,WAAAA,IAAA,CAAAjX,IAAA,OAAAiX,IAAA,QAAA3W,CAAA,CAAAsV,MAAA,GAAAA,MAAA,EAAAb,OAAA,CAAAjB,SAAA,KAAAiE,WAAA,EAAAhD,OAAA,EAAA4C,KAAA,WAAAA,MAAArX,CAAA,aAAAkY,IAAA,WAAAvB,IAAA,WAAAN,IAAA,QAAAC,KAAA,GAAAhD,CAAA,OAAA5T,IAAA,YAAAyW,QAAA,cAAAD,MAAA,gBAAAtB,GAAA,GAAAtB,CAAA,OAAA4D,UAAA,CAAAzN,OAAA,CAAA0N,aAAA,IAAAnX,CAAA,WAAAuT,CAAA,kBAAAA,CAAA,CAAA4E,MAAA,OAAA1Y,CAAA,CAAAoV,IAAA,OAAAtB,CAAA,MAAA+D,KAAA,EAAA/D,CAAA,CAAA6E,KAAA,cAAA7E,CAAA,IAAAD,CAAA,MAAA+E,IAAA,WAAAA,KAAA,SAAA3Y,IAAA,WAAA4T,CAAA,QAAA4D,UAAA,IAAAE,UAAA,kBAAA9D,CAAA,CAAA1T,IAAA,QAAA0T,CAAA,CAAAsB,GAAA,cAAA0D,IAAA,KAAA/B,iBAAA,WAAAA,kBAAAvW,CAAA,aAAAN,IAAA,QAAAM,CAAA,MAAAuT,CAAA,kBAAAgF,OAAA9Y,CAAA,EAAAiU,CAAA,WAAAG,CAAA,CAAAjU,IAAA,YAAAiU,CAAA,CAAAe,GAAA,GAAA5U,CAAA,EAAAuT,CAAA,CAAAoD,IAAA,GAAAlX,CAAA,EAAAiU,CAAA,KAAAH,CAAA,CAAA2C,MAAA,WAAA3C,CAAA,CAAAqB,GAAA,GAAAtB,CAAA,KAAAI,CAAA,aAAAA,CAAA,QAAAwD,UAAA,CAAAha,MAAA,MAAAwW,CAAA,SAAAA,CAAA,QAAAb,CAAA,QAAAqE,UAAA,CAAAxD,CAAA,GAAAG,CAAA,GAAAhB,CAAA,CAAAuE,UAAA,iBAAAvE,CAAA,CAAAiE,MAAA,SAAAyB,MAAA,aAAA1F,CAAA,CAAAiE,MAAA,SAAAoB,IAAA,QAAAlX,CAAA,GAAAvB,CAAA,CAAAoV,IAAA,CAAAhC,CAAA,eAAAmB,CAAA,GAAAvU,CAAA,CAAAoV,IAAA,CAAAhC,CAAA,qBAAA7R,CAAA,IAAAgT,CAAA,aAAAkE,IAAA,GAAArF,CAAA,CAAAkE,QAAA,SAAAwB,MAAA,CAAA1F,CAAA,CAAAkE,QAAA,gBAAAmB,IAAA,GAAArF,CAAA,CAAAmE,UAAA,SAAAuB,MAAA,CAAA1F,CAAA,CAAAmE,UAAA,cAAAhW,CAAA,aAAAkX,IAAA,GAAArF,CAAA,CAAAkE,QAAA,SAAAwB,MAAA,CAAA1F,CAAA,CAAAkE,QAAA,qBAAA/C,CAAA,QAAAiC,KAAA,qDAAAiC,IAAA,GAAArF,CAAA,CAAAmE,UAAA,SAAAuB,MAAA,CAAA1F,CAAA,CAAAmE,UAAA,YAAAR,MAAA,WAAAA,OAAAlD,CAAA,EAAAtT,CAAA,aAAAuT,CAAA,QAAA2D,UAAA,CAAAha,MAAA,MAAAqW,CAAA,SAAAA,CAAA,QAAAG,CAAA,QAAAwD,UAAA,CAAA3D,CAAA,OAAAG,CAAA,CAAAoD,MAAA,SAAAoB,IAAA,IAAAzY,CAAA,CAAAoV,IAAA,CAAAnB,CAAA,wBAAAwE,IAAA,GAAAxE,CAAA,CAAAsD,UAAA,QAAAnE,CAAA,GAAAa,CAAA,aAAAb,CAAA,iBAAAS,CAAA,mBAAAA,CAAA,KAAAT,CAAA,CAAAiE,MAAA,IAAA9W,CAAA,IAAAA,CAAA,IAAA6S,CAAA,CAAAmE,UAAA,KAAAnE,CAAA,cAAAgB,CAAA,GAAAhB,CAAA,GAAAA,CAAA,CAAAuE,UAAA,cAAAvD,CAAA,CAAAjU,IAAA,GAAA0T,CAAA,EAAAO,CAAA,CAAAe,GAAA,GAAA5U,CAAA,EAAA6S,CAAA,SAAAqD,MAAA,gBAAAS,IAAA,GAAA9D,CAAA,CAAAmE,UAAA,EAAAjC,CAAA,SAAAyD,QAAA,CAAA3E,CAAA,MAAA2E,QAAA,WAAAA,SAAAlF,CAAA,EAAAtT,CAAA,oBAAAsT,CAAA,CAAA1T,IAAA,QAAA0T,CAAA,CAAAsB,GAAA,qBAAAtB,CAAA,CAAA1T,IAAA,mBAAA0T,CAAA,CAAA1T,IAAA,QAAA+W,IAAA,GAAArD,CAAA,CAAAsB,GAAA,gBAAAtB,CAAA,CAAA1T,IAAA,SAAA0Y,IAAA,QAAA1D,GAAA,GAAAtB,CAAA,CAAAsB,GAAA,OAAAsB,MAAA,kBAAAS,IAAA,yBAAArD,CAAA,CAAA1T,IAAA,IAAAI,CAAA,UAAA2W,IAAA,GAAA3W,CAAA,GAAA+U,CAAA,KAAA0D,MAAA,WAAAA,OAAAnF,CAAA,aAAAtT,CAAA,QAAAkX,UAAA,CAAAha,MAAA,MAAA8C,CAAA,SAAAA,CAAA,QAAAuT,CAAA,QAAA2D,UAAA,CAAAlX,CAAA,OAAAuT,CAAA,CAAAyD,UAAA,KAAA1D,CAAA,cAAAkF,QAAA,CAAAjF,CAAA,CAAA6D,UAAA,EAAA7D,CAAA,CAAA0D,QAAA,GAAAE,aAAA,CAAA5D,CAAA,GAAAwB,CAAA,yBAAA2D,OAAApF,CAAA,aAAAtT,CAAA,QAAAkX,UAAA,CAAAha,MAAA,MAAA8C,CAAA,SAAAA,CAAA,QAAAuT,CAAA,QAAA2D,UAAA,CAAAlX,CAAA,OAAAuT,CAAA,CAAAuD,MAAA,KAAAxD,CAAA,QAAA7T,CAAA,GAAA8T,CAAA,CAAA6D,UAAA,kBAAA3X,CAAA,CAAAG,IAAA,QAAA8T,CAAA,GAAAjU,CAAA,CAAAmV,GAAA,EAAAuC,aAAA,CAAA5D,CAAA,YAAAG,CAAA,YAAAuC,KAAA,8BAAA0C,aAAA,WAAAA,cAAA3Y,CAAA,EAAAuT,CAAA,EAAA9T,CAAA,gBAAA0W,QAAA,KAAArC,QAAA,EAAAwB,MAAA,CAAAtV,CAAA,GAAA0W,UAAA,EAAAnD,CAAA,EAAAqD,OAAA,EAAAnX,CAAA,oBAAAyW,MAAA,UAAAtB,GAAA,GAAAtB,CAAA,GAAAyB,CAAA,OAAA/U,CAAA;AAAA,SAAA4Y,mBAAAnZ,CAAA,EAAA6T,CAAA,EAAAtT,CAAA,EAAAuT,CAAA,EAAAG,CAAA,EAAAG,CAAA,EAAA7S,CAAA,cAAA6R,CAAA,GAAApT,CAAA,CAAAoU,CAAA,EAAA7S,CAAA,GAAAgT,CAAA,GAAAnB,CAAA,CAAAhW,KAAA,WAAA4C,CAAA,gBAAAO,CAAA,CAAAP,CAAA,KAAAoT,CAAA,CAAAnT,IAAA,GAAA4T,CAAA,CAAAU,CAAA,IAAA+D,OAAA,CAAAlC,OAAA,CAAA7B,CAAA,EAAA+B,IAAA,CAAAxC,CAAA,EAAAG,CAAA;AAAA,SAAAmF,kBAAApZ,CAAA,6BAAA6T,CAAA,SAAAtT,CAAA,GAAAqJ,SAAA,aAAA0O,OAAA,WAAAxE,CAAA,EAAAG,CAAA,QAAAG,CAAA,GAAApU,CAAA,CAAA8Q,KAAA,CAAA+C,CAAA,EAAAtT,CAAA,YAAA8Y,MAAArZ,CAAA,IAAAmZ,kBAAA,CAAA/E,CAAA,EAAAN,CAAA,EAAAG,CAAA,EAAAoF,KAAA,EAAAC,MAAA,UAAAtZ,CAAA,cAAAsZ,OAAAtZ,CAAA,IAAAmZ,kBAAA,CAAA/E,CAAA,EAAAN,CAAA,EAAAG,CAAA,EAAAoF,KAAA,EAAAC,MAAA,WAAAtZ,CAAA,KAAAqZ,KAAA;AAAA,SAAApc,gBAAAmX,CAAA,EAAApU,CAAA,UAAAoU,CAAA,YAAApU,CAAA,aAAAgX,SAAA;AAAA,SAAAuC,kBAAAhZ,CAAA,EAAAuT,CAAA,aAAAD,CAAA,MAAAA,CAAA,GAAAC,CAAA,CAAArW,MAAA,EAAAoW,CAAA,UAAAI,CAAA,GAAAH,CAAA,CAAAD,CAAA,GAAAI,CAAA,CAAAS,UAAA,GAAAT,CAAA,CAAAS,UAAA,QAAAT,CAAA,CAAAU,YAAA,kBAAAV,CAAA,KAAAA,CAAA,CAAAW,QAAA,QAAA7G,MAAA,CAAAmG,cAAA,CAAA3T,CAAA,EAAAiZ,cAAA,CAAAvF,CAAA,CAAA9W,GAAA,GAAA8W,CAAA;AAAA,SAAA/W,aAAAqD,CAAA,EAAAuT,CAAA,EAAAD,CAAA,WAAAC,CAAA,IAAAyF,iBAAA,CAAAhZ,CAAA,CAAAwT,SAAA,EAAAD,CAAA,GAAAD,CAAA,IAAA0F,iBAAA,CAAAhZ,CAAA,EAAAsT,CAAA,GAAA9F,MAAA,CAAAmG,cAAA,CAAA3T,CAAA,iBAAAqU,QAAA,SAAArU,CAAA;AAAA,SAAAiZ,eAAA3F,CAAA,QAAAT,CAAA,GAAAqG,YAAA,CAAA5F,CAAA,gCAAAsC,OAAA,CAAA/C,CAAA,IAAAA,CAAA,GAAAA,CAAA;AAAA,SAAAqG,aAAA5F,CAAA,EAAAC,CAAA,oBAAAqC,OAAA,CAAAtC,CAAA,MAAAA,CAAA,SAAAA,CAAA,MAAAtT,CAAA,GAAAsT,CAAA,CAAAM,MAAA,CAAAuF,WAAA,kBAAAnZ,CAAA,QAAA6S,CAAA,GAAA7S,CAAA,CAAA6U,IAAA,CAAAvB,CAAA,EAAAC,CAAA,gCAAAqC,OAAA,CAAA/C,CAAA,UAAAA,CAAA,YAAA4D,SAAA,yEAAAlD,CAAA,GAAA6F,MAAA,GAAAC,MAAA,EAAA/F,CAAA;AAD0C;AAC0B;AACV;AACN;;AAEpD;AACA;AACA;AACO,IAAMiG,qBAAqB;EAC9B;AACJ;AACA;EACI,SAAAA,sBAAYC,YAAY,EAAE;IAAA9c,eAAA,OAAA6c,qBAAA;IACtB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACrb,UAAU,GAAGqb,YAAY,CAACrb,UAAU;EAC7C;;EAEA;AACJ;AACA;AACA;AACA;EAJI,OAAAxB,YAAA,CAAA4c,qBAAA;IAAA3c,GAAA;IAAAC,KAAA;MAAA,IAAA4c,iBAAA,GAAAZ,iBAAA,cAAAxF,mBAAA,GAAAqE,IAAA,CAKA,SAAAgC,QAAuBC,SAAS;QAAA,IAAAtU,YAAA,EAAAuU,SAAA,EAAAC,YAAA,EAAA1c,kBAAA,EAAAG,cAAA,EAAAD,aAAA,EAAAL,QAAA,EAAA8c,aAAA,EAAArH,MAAA,EAAAsH,eAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,gBAAA,EAAAC,aAAA,EAAAC,aAAA,EAAAC,iBAAA,EAAAC,cAAA,EAAAC,YAAA,EAAAC,cAAA;QAAA,OAAAnH,mBAAA,GAAAiB,IAAA,UAAAmG,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAxC,IAAA,GAAAwC,QAAA,CAAA/D,IAAA;YAAA;cAC5Bxa,+CAAK,CAACY,GAAG,CAAC,8CAA8C,EAAE;gBAAE4c,SAAS,EAATA;cAAU,CAAC,EAAE,CAAC,CAAC;;cAE3E;cACMtU,YAAY,GAAG,IAAI,CAAClH,UAAU,CAACwc,eAAe,CAAC,CAAC;cAChDf,SAAS,GAAGvU,YAAY,CAACuU,SAAS,IAAI,EAAE;cACxCC,YAAY,GAAGxU,YAAY,CAACwU,YAAY,IAAI,EAAE,EAEpD;cACA;cACA,IAAI,CAACF,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,YAAY,KAAK,CAACC,SAAS,EAAE;gBACnEzd,+CAAK,CAACY,GAAG,CAAC,6EAA6E,EAAE,IAAI,EAAE,CAAC,CAAC;gBACjG4c,SAAS,GAAG,WAAW;cAC3B,CAAC,MAAM,IAAI,CAACA,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,YAAY,KAAK,CAACE,YAAY,EAAE;gBAC7E1d,+CAAK,CAACY,GAAG,CAAC,gFAAgF,EAAE,IAAI,EAAE,CAAC,CAAC;gBACpG4c,SAAS,GAAG,WAAW;cAC3B,CAAC,MAAM,IAAI,CAACA,SAAS,KAAK,MAAM,IAAIA,SAAS,KAAK,aAAa,MAAM,CAACC,SAAS,IAAI,CAACC,YAAY,CAAC,EAAE;gBAC/F1d,+CAAK,CAACY,GAAG,CAAC,iFAAiF,EAAE,IAAI,EAAE,CAAC,CAAC;gBACrG4c,SAAS,GAAG,WAAW;cAC3B;;cAEA;cACMxc,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;cACrDE,cAAc,GAAGH,kBAAkB,CAACI,GAAG,CAAC,gBAAgB,EAAE,qBAAqB,CAAC,EAEtF;cACMF,aAAa,GAAGf,+DAAa,CAACc,WAAW,CAAC,CAAC;cAC3CJ,QAAQ,GAAGK,aAAa,CAACG,UAAU,CAACF,cAAc,EAAE;gBACtDG,UAAU,EAAE,IAAI;gBAChBC,MAAM,EAAE,IAAI,CAAC;cACjB,CAAC,CAAC;cAAAgd,QAAA,CAAAxC,IAAA;cAGE;cACM4B,aAAa,GAAG,IAAI,CAAC3b,UAAU,CAAC1B,YAAY,CAAC8V,qBAAqB,CAAC,CAAC,EAE1E;cAAA,MAEIoH,SAAS,KAAK,WAAW;gBAAAe,QAAA,CAAA/D,IAAA;gBAAA;cAAA;cACzB;cACAlE,MAAM,GAAG;gBACLmI,OAAO,EAAE,IAAI;gBACblT,OAAO,EAAEvK,kBAAkB,CAACI,GAAG,CAAC,uBAAuB,EAAE,4DAA4D;cACzH,CAAC;cAACmd,QAAA,CAAA/D,IAAA;cAAA;YAAA;cAAA+D,QAAA,CAAA/D,IAAA;cAAA,OAGa,IAAI,CAACkE,UAAU,CAACf,aAAa,EAAEH,SAAS,CAAC;YAAA;cAAxDlH,MAAM,GAAAiI,QAAA,CAAArE,IAAA;YAAA;cAGV;cACAhZ,aAAa,CAACwB,UAAU,CAAC7B,QAAQ,CAAC;;cAElC;cACA,IAAIyV,MAAM,CAACmI,OAAO,EAAE;gBAChB;gBACMb,eAAe,GAAGhV,QAAQ,CAAC+V,cAAc,CAAC,mBAAmB,CAAC;gBACpE,IAAIf,eAAe,EAAE;kBACjBA,eAAe,CAAC1b,SAAS,GAAG,EAAE;kBAC9B0b,eAAe,CAAC5U,SAAS,CAACgD,MAAM,CAAC,YAAY,CAAC;;kBAE9C;kBACM6R,YAAY,GAAGV,2DAAY,CAAClc,WAAW,CAAC,CAAC;kBACzC6c,YAAY,GAAGD,YAAY,CAACe,WAAW,CAACtI,MAAM,CAAC/K,OAAO,EAAE;oBAC1DsT,OAAO,EAAE,CAAC;oBAAE;oBACZC,SAAS,EAAE,KAAK,CAAC;kBACrB,CAAC,CAAC;kBAEFlB,eAAe,CAAClT,WAAW,CAACoT,YAAY,CAAC;;kBAEzC;kBACA,IAAI,CAACiB,mBAAmB,CAAC,CAAC;gBAC9B;cACJ,CAAC,MAAM;gBACH;gBACMnB,gBAAe,GAAGhV,QAAQ,CAAC+V,cAAc,CAAC,mBAAmB,CAAC;gBACpE,IAAIf,gBAAe,EAAE;kBACjBA,gBAAe,CAAC1b,SAAS,GAAG,EAAE;kBAC9B0b,gBAAe,CAAC5U,SAAS,CAACgD,MAAM,CAAC,YAAY,CAAC;;kBAE9C;kBACM6R,aAAY,GAAGV,2DAAY,CAAClc,WAAW,CAAC,CAAC;kBACzC6c,aAAY,GAAGD,aAAY,CAACmB,SAAS,CAAC1I,MAAM,CAAC/K,OAAO,IAAI,+CAA+C,EAAE;oBAC3GsT,OAAO,EAAE,CAAC;oBAAE;oBACZC,SAAS,EAAE,KAAK,CAAC;kBACrB,CAAC,CAAC;kBAEFlB,gBAAe,CAAClT,WAAW,CAACoT,aAAY,CAAC;;kBAEzC;kBACA,IAAI,CAACiB,mBAAmB,CAAC,CAAC;gBAC9B;cACJ;cAAC,OAAAR,QAAA,CAAAlE,MAAA,WAEM/D,MAAM;YAAA;cAAAiI,QAAA,CAAAxC,IAAA;cAAAwC,QAAA,CAAAU,EAAA,GAAAV,QAAA;cAEb;cACArd,aAAa,CAACwB,UAAU,CAAC7B,QAAQ,CAAC;cAElCb,+CAAK,CAACiU,KAAK,CAAC,iDAAiD,EAAAsK,QAAA,CAAAU,EAAA,EAAS,CAAC,CAAC;;cAExE;cACMrB,iBAAe,GAAGhV,QAAQ,CAAC+V,cAAc,CAAC,mBAAmB,CAAC;cACpE,IAAIf,iBAAe,EAAE;gBACjBA,iBAAe,CAAC1b,SAAS,GAAG,EAAE;gBAC9B0b,iBAAe,CAAC5U,SAAS,CAACgD,MAAM,CAAC,YAAY,CAAC;;gBAE9C;gBACM6R,cAAY,GAAGV,2DAAY,CAAClc,WAAW,CAAC,CAAC;gBACzCmd,YAAY,aAAAjc,MAAA,CAAaoc,QAAA,CAAAU,EAAA,CAAM1T,OAAO,IAAI,4CAA4C;gBACtFuS,cAAY,GAAGD,cAAY,CAACmB,SAAS,CAACZ,YAAY,EAAE;kBACtDS,OAAO,EAAE,CAAC;kBAAE;kBACZC,SAAS,EAAE,KAAK,CAAC;gBACrB,CAAC,CAAC;gBAEFlB,iBAAe,CAAClT,WAAW,CAACoT,cAAY,CAAC;cAC7C;cAAC,OAAAS,QAAA,CAAAlE,MAAA,WAEM;gBACHoE,OAAO,EAAE,KAAK;gBACdlT,OAAO,EAAEgT,QAAA,CAAAU,EAAA,CAAM1T,OAAO,IAAI;cAC9B,CAAC;YAAA;YAAA;cAAA,OAAAgT,QAAA,CAAArC,IAAA;UAAA;QAAA,GAAAqB,OAAA;MAAA,CAER;MAAA,SA1HK2B,gBAAgBA,CAAAC,EAAA;QAAA,OAAA7B,iBAAA,CAAAlJ,KAAA,OAAAlH,SAAA;MAAA;MAAA,OAAhBgS,gBAAgB;IAAA;IA4HtB;AACJ;AACA;AACA;AACA;AACA;IALI;EAAA;IAAAze,GAAA;IAAAC,KAAA;MAAA,IAAA0e,WAAA,GAAA1C,iBAAA,cAAAxF,mBAAA,GAAAqE,IAAA,CAMA,SAAA8D,SAAiB1B,aAAa,EAAEH,SAAS;QAAA,IAAAtU,YAAA,EAAAuU,SAAA,EAAAC,YAAA,EAAA3W,UAAA,EAAAuY,aAAA,EAAAC,UAAA,EAAAC,QAAA,EAAAC,QAAA,EAAAnJ,MAAA;QAAA,OAAAY,mBAAA,GAAAiB,IAAA,UAAAuH,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA5D,IAAA,GAAA4D,SAAA,CAAAnF,IAAA;YAAA;cACrC;cACMtR,YAAY,GAAG,IAAI,CAAClH,UAAU,CAACwc,eAAe,CAAC,CAAC,EAEtD;cACMf,SAAS,GAAGvU,YAAY,CAACuU,SAAS,IAAI,EAAE;cACxCC,YAAY,GAAGxU,YAAY,CAACwU,YAAY,IAAI,EAAE;cAEpD1d,+CAAK,CAACY,GAAG,CAAC,4DAA4D,EAAE;gBACpE6c,SAAS,EAATA,SAAS;gBACTC,YAAY,EAAZA,YAAY;gBACZF,SAAS,EAATA;cACJ,CAAC,EAAE,CAAC,CAAC;;cAEL;cAAA,MACK,CAACA,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,YAAY,KAAK,CAACC,SAAS,IACjE,CAACD,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,YAAY,KAAK,CAACE,YAAa,IACrE,CAACF,SAAS,KAAK,MAAM,IAAIA,SAAS,KAAK,aAAa,MAAM,CAACC,SAAS,IAAI,CAACC,YAAY,CAAE;gBAAAiC,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cAExFxa,+CAAK,CAACY,GAAG,CAAC,4FAA4F,EAAE,IAAI,EAAE,CAAC,CAAC;cAAC,OAAA+e,SAAA,CAAAtF,MAAA,WAC1G;gBACHoE,OAAO,EAAE,IAAI;gBACblT,OAAO,EAAEnL,yEAAkB,CAACa,WAAW,CAAC,CAAC,CAACG,GAAG,CAAC,uBAAuB,EAAE,4DAA4D;cACvI,CAAC;YAAA;cAAA,MAID,CAACoc,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,YAAY,KAAK,CAACC,SAAS;gBAAAkC,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cACjExa,+CAAK,CAACiU,KAAK,CAAC,oEAAoE,EAAE,IAAI,EAAE,CAAC,CAAC;cAAC,OAAA0L,SAAA,CAAAtF,MAAA,WACpF;gBACHoE,OAAO,EAAE,KAAK;gBACdlT,OAAO,EAAE;cACb,CAAC;YAAA;cAAA,MACM,CAACiS,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,YAAY,KAAK,CAACE,YAAY;gBAAAiC,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cAC3Exa,+CAAK,CAACiU,KAAK,CAAC,oEAAoE,EAAE,IAAI,EAAE,CAAC,CAAC;cAAC,OAAA0L,SAAA,CAAAtF,MAAA,WACpF;gBACHoE,OAAO,EAAE,KAAK;gBACdlT,OAAO,EAAE;cACb,CAAC;YAAA;cAAA,MACM,CAACiS,SAAS,KAAK,MAAM,IAAIA,SAAS,KAAK,aAAa,MAAM,CAACC,SAAS,IAAI,CAACC,YAAY,CAAC;gBAAAiC,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cAC7Fxa,+CAAK,CAACiU,KAAK,CAAC,kEAAkE,EAAE,IAAI,EAAE,CAAC,CAAC;cAAC,OAAA0L,SAAA,CAAAtF,MAAA,WAClF;gBACHoE,OAAO,EAAE,KAAK;gBACdlT,OAAO,EAAE;cACb,CAAC;YAAA;cAGL;cACMxE,UAAU,GAAG6Y,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC7d,UAAU,CAAC1B,YAAY,CAACyG,UAAU,CAAC;cACpEuY,aAAa,GAAG,IAAI,CAACtd,UAAU,CAAC8d,mBAAmB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;cAAAH,SAAA,CAAA5D,IAAA;cAG/D;cACMwD,UAAU,GAAG;gBACfQ,MAAM,EAAE,uBAAuB;gBAC/BC,OAAO,EAAErC,aAAa;gBACtB5W,UAAU,EAAVA,UAAU;gBACVyW,SAAS,EAATA,SAAS;gBACT8B,aAAa,EAAbA;cACJ,CAAC,EAED;cACA,IAAI9B,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,YAAY,IAAIA,SAAS,KAAK,MAAM,IAAIA,SAAS,KAAK,aAAa,EAAE;gBAC1G+B,UAAU,CAAC9B,SAAS,GAAGA,SAAS;cACpC;cAEA,IAAID,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,YAAY,IAAIA,SAAS,KAAK,MAAM,IAAIA,SAAS,KAAK,aAAa,EAAE;gBAC1G+B,UAAU,CAAC7B,YAAY,GAAGA,YAAY;cAC1C;cAEA1d,+CAAK,CAACY,GAAG,CAAC,yDAAyD,EAAE2e,UAAU,EAAE,CAAC,CAAC;;cAEnF;cAAAI,SAAA,CAAAnF,IAAA;cAAA,OACuB,IAAI,CAACxY,UAAU,CAACie,WAAW,CAAC,eAAe,CAAC;YAAA;cAA7DT,QAAQ,GAAAG,SAAA,CAAAzF,IAAA;cACdla,+CAAK,CAACY,GAAG,CAAC,uCAAuC,EAAE;gBAAE4e,QAAQ,EAARA;cAAS,CAAC,EAAE,CAAC,CAAC;;cAEnE;cAAAG,SAAA,CAAAnF,IAAA;cAAA,OACuB0F,KAAK,CAACV,QAAQ,EAAE;gBACnCzF,MAAM,EAAE,MAAM;gBACdoG,OAAO,EAAE;kBACL,cAAc,EAAE;gBACpB,CAAC;gBACDhL,IAAI,EAAE,IAAIiL,eAAe,CAACb,UAAU;cACxC,CAAC,CAAC;YAAA;cANIE,QAAQ,GAAAE,SAAA,CAAAzF,IAAA;cAAAyF,SAAA,CAAAnF,IAAA;cAAA,OASOiF,QAAQ,CAACY,IAAI,CAAC,CAAC;YAAA;cAA9B/J,MAAM,GAAAqJ,SAAA,CAAAzF,IAAA;cACZla,+CAAK,CAACY,GAAG,CAAC,qCAAqC,EAAE0V,MAAM,EAAE,CAAC,CAAC;cAAC,OAAAqJ,SAAA,CAAAtF,MAAA,WAErD/D,MAAM;YAAA;cAAAqJ,SAAA,CAAA5D,IAAA;cAAA4D,SAAA,CAAAV,EAAA,GAAAU,SAAA;cAEb3f,+CAAK,CAACiU,KAAK,CAAC,8CAA8C,EAAA0L,SAAA,CAAAV,EAAA,EAAS,CAAC,CAAC;cAAC,OAAAU,SAAA,CAAAtF,MAAA,WAC/D;gBACHoE,OAAO,EAAE,KAAK;gBACdlT,OAAO,2BAAApJ,MAAA,CAA2Bwd,SAAA,CAAAV,EAAA,CAAM1T,OAAO;cACnD,CAAC;YAAA;YAAA;cAAA,OAAAoU,SAAA,CAAAzD,IAAA;UAAA;QAAA,GAAAmD,QAAA;MAAA,CAER;MAAA,SAjGKX,UAAUA,CAAA4B,GAAA,EAAAC,GAAA;QAAA,OAAAnB,WAAA,CAAAhL,KAAA,OAAAlH,SAAA;MAAA;MAAA,OAAVwR,UAAU;IAAA;IAmGhB;AACJ;AACA;IAFI;EAAA;IAAAje,GAAA;IAAAC,KAAA,EAGA,SAAAqe,mBAAmBA,CAAA,EAAG;MAClB,IAAMyB,aAAa,GAAG5X,QAAQ,CAAC+V,cAAc,CAAC,mBAAmB,CAAC;MAClE,IAAI6B,aAAa,EAAE;QACf;QACAA,aAAa,CAACC,cAAc,CAAC;UACzBC,QAAQ,EAAE,QAAQ;UAClBC,KAAK,EAAE;QACX,CAAC,CAAC;QAEF3gB,+CAAK,CAACY,GAAG,CAAC,iDAAiD,EAAE,IAAI,EAAE,CAAC,CAAC;MACzE;IACJ;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzQqC;AACgC;AAC1B;AACM;AACJ;AACA;AACkB;AACV;;AAE1D;AACA;AACA;AACO,IAAMkgB,mBAAmB;EAC5B;AACJ;AACA;AACA;EACI,SAAAA,oBAAYzD,YAAY,EAAE;IAAA9c,eAAA,OAAAugB,mBAAA;IACtB,IAAI,CAACzD,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACrb,UAAU,GAAGqb,YAAY,CAACrb,UAAU;IACzC,IAAI,CAAC+e,YAAY,GAAG1D,YAAY,CAAC0D,YAAY;EACjD;;EAEA;AACJ;AACA;AACA;EAHI,OAAAvgB,YAAA,CAAAsgB,mBAAA;IAAArgB,GAAA;IAAAC,KAAA,EAIA,SAAA0R,UAAUA,CAAA,EAAG;MACT;MACA,IAAI,CAAC4O,kBAAkB,CAAC,CAAC;MACzBhhB,+CAAK,CAACY,GAAG,CAAC,kCAAkC,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;EAHI;IAAAH,GAAA;IAAAC,KAAA,EAIA,SAAAsgB,kBAAkBA,CAAA,EAAG;MACjB;MACA,IAAMC,aAAa,GAAGrY,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACghB,KAAK,CAACC,cAAc,CAAC7e,IAAI,CAAC,CAAC,CAAC;;MAEpF;MACA,IAAM8e,qBAAqB,GAAG,CAACH,aAAa,GACxCrY,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACghB,KAAK,CAACG,qBAAqB,CAAC/e,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;;MAEhF;MACA,IAAMgf,WAAW,GAAGL,aAAa,IAAIG,qBAAqB;MAE1D,IAAI,CAACE,WAAW,EAAE;QACdthB,+CAAK,CAAC0S,IAAI,CAAC,+CAA+C,EAAE,IAAI,EAAE,CAAC,CAAC;QACpE;MACJ;;MAEA;MACA,IAAM6O,MAAM,GAAGD,WAAW,CAACE,SAAS,CAAC,IAAI,CAAC;MAC1C,IAAIF,WAAW,CAACG,UAAU,EAAE;QACxBH,WAAW,CAACG,UAAU,CAACC,YAAY,CAACH,MAAM,EAAED,WAAW,CAAC;MAC5D;;MAEA;MACA,IAAIA,WAAW,KAAKL,aAAa,KAAK,CAACM,MAAM,CAACrf,SAAS,IAAIqf,MAAM,CAACrf,SAAS,CAACyf,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;QACxFJ,MAAM,CAACrf,SAAS,GAAGwE,qDAAQ,CAACkb,WAAW,CAAC,KAAK,EAAE;UAAEnX,OAAO,EAAE;QAAO,CAAC,CAAC,GAAG,SAAS;MACnF;;MAEA;MACA8W,MAAM,CAACxW,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC8W,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;MACpE9hB,+CAAK,CAACY,GAAG,yBAAAuB,MAAA,CAAyBmf,WAAW,KAAKL,aAAa,GAAG,SAAS,GAAG,mBAAmB,6BAA0B,IAAI,EAAE,CAAC,CAAC;IACvI;;IAEA;AACJ;AACA;AACA;EAHI;IAAAxgB,GAAA;IAAAC,KAAA,EAIA,SAAAmhB,kBAAkBA,CAAA,EAAG;MACjB7hB,+CAAK,CAACY,GAAG,CAAC,6CAA6C,EAAE,IAAI,EAAE,CAAC,CAAC;;MAEjE;MACA,IAAMI,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;MAC3D,IAAME,cAAc,GAAGH,kBAAkB,CAACI,GAAG,CAAC,gBAAgB,EAAE,uBAAuB,CAAC;;MAExF;MACA,IAAMF,aAAa,GAAGf,+DAAa,CAACc,WAAW,CAAC,CAAC;MACjD,IAAMJ,QAAQ,GAAGK,aAAa,CAACG,UAAU,CAACF,cAAc,EAAE;QACtDG,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE,IAAI,CAAC;MACjB,CAAC,CAAC;MAEF,IAAI;QAAA,IAAAwgB,qBAAA;QACA;QACA,IAAMpE,aAAa,GAAG,IAAI,CAACN,YAAY,CAAC2E,gBAAgB,CAAC,CAAC;;QAE1D;QACA,IAAMC,WAAW,GAAG,EAAAF,qBAAA,OAAI,CAAC/f,UAAU,CAACkH,YAAY,cAAA6Y,qBAAA,uBAA5BA,qBAAA,CAA8BG,QAAQ,KAAI,EAAE;QAChE,IAAMC,SAAS,GAAGF,WAAW,CAACnS,KAAK,CAAC,GAAG,CAAC,CAACgM,GAAG,CAAC,CAAC,CAACsG,WAAW,CAAC,CAAC;;QAE5D;QACA,IAAMC,gBAAgB,GAAGzB,+EAAqB,CAAC0B,aAAa,CAAC3E,aAAa,EAAEwE,SAAS,EAAE,IAAI,CAAC;;QAE5F;QACAjhB,aAAa,CAACwB,UAAU,CAAC7B,QAAQ,CAAC;;QAElC;QACA6F,qDAAQ,CAAC6b,UAAU,CACfriB,4DAAS,CAACsiB,KAAK,CAACC,gBAAgB,CAACngB,IAAI,CAAC,CAAC,EACvC,IAAI,CAACN,UAAU,CAACkH,YAAY,CAACgZ,QAAQ,IAAI,aAC7C,CAAC;;QAED;QACA,IAAI,CAACnB,YAAY,CAACwB,UAAU,CACxBriB,4DAAS,CAACsiB,KAAK,CAACE,OAAO,CAACpgB,IAAI,CAAC,CAAC,EAC9B+f,gBAAgB,EAChBniB,4DAAS,CAACsiB,KAAK,CAACG,kBAAkB,CAACrgB,IAAI,CAAC,CAC5C,CAAC;;QAED;QACA,IAAMsgB,iBAAiB,GAAGha,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;QACvD+Z,iBAAiB,CAAC5Z,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqJ,OAAO,CAACsZ,IAAI,CAACvgB,IAAI,CAAC,CAAC,EAC9BpC,4DAAS,CAACqJ,OAAO,CAACuZ,uBAAuB,CAACxgB,IAAI,CAAC,CAAC,EAChDpC,4DAAS,CAACqJ,OAAO,CAACwZ,YAAY,CAACzgB,IAAI,CAAC,CAAC,EACrCpC,4DAAS,CAACqJ,OAAO,CAACyZ,SAAS,CAAC1gB,IAAI,CAAC,CAAC,CAAC;;QAElE;QACA,IAAM2gB,WAAW,GAAGra,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;QACjDoa,WAAW,CAACne,EAAE,GAAG,uBAAuB;QACxCme,WAAW,CAACja,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqJ,OAAO,CAACsZ,IAAI,CAACvgB,IAAI,CAAC,CAAC,EAC9BpC,4DAAS,CAACqJ,OAAO,CAAC2Z,kBAAkB,CAAC5gB,IAAI,CAAC,CAAC,CAAC;QACrEsgB,iBAAiB,CAAClY,WAAW,CAACuY,WAAW,CAAC;;QAE1C;QACA,IAAI,CAAClC,YAAY,CAACoC,IAAI,CAACjjB,4DAAS,CAACsiB,KAAK,CAACE,OAAO,CAACpgB,IAAI,CAAC,CAAC,CAAC;;QAEtD;QACA,IAAI,CAAC8gB,uBAAuB,CAAC,CAAC;;QAE9B;QACAvC,0DAAU,CAACwC,uBAAuB,CAACnjB,4DAAS,CAACsiB,KAAK,CAACG,kBAAkB,CAACrgB,IAAI,CAAC,CAAC,CAAC;QAE7EtC,+CAAK,CAACY,GAAG,CAAC,kDAAkD,EAAE,IAAI,EAAE,CAAC,CAAC;MAC1E,CAAC,CAAC,OAAOqT,KAAK,EAAE;QACZ;QACA/S,aAAa,CAACwB,UAAU,CAAC7B,QAAQ,CAAC;QAElCb,+CAAK,CAACiU,KAAK,CAAC,4CAA4C,EAAEA,KAAK,EAAE,CAAC,CAAC;QACnE,IAAI,CAACqP,gBAAgB,CAACrP,KAAK,CAAC;MAChC;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAxT,GAAA;IAAAC,KAAA,EAIA,SAAA0iB,uBAAuBA,CAAA,EAAG;MACtB,IAAI,CAACG,MAAM,CAACC,IAAI,EAAE;QACdxjB,+CAAK,CAACY,GAAG,CAAC,iDAAiD,EAAE,IAAI,EAAE,CAAC,CAAC;QACrE;MACJ;MAEA,IAAI;QAAA,IAAA6iB,oBAAA;QACA;QACA,IAAMC,UAAU,IAAAD,oBAAA,GAAG/c,qDAAQ,CAACid,UAAU,CAACzjB,4DAAS,CAACsiB,KAAK,CAACG,kBAAkB,CAACrgB,IAAI,CAAC,CAAC,CAAC,cAAAmhB,oBAAA,uBAA9DA,oBAAA,CAAgE5W,aAAa,CAAC,KAAK,CAAC;QACvG,IAAM+W,WAAW,GAAGF,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE7W,aAAa,CAAC,MAAM,CAAC;QAErD,IAAI,CAAC+W,WAAW,EAAE;UACd5jB,+CAAK,CAAC0S,IAAI,CAAC,6DAA6D,EAAE,IAAI,EAAE,CAAC,CAAC;UAClF;QACJ;;QAEA;QACA6Q,MAAM,CAACC,IAAI,CAACK,gBAAgB,CAACD,WAAW,CAAC;;QAEzC;QACA,IAAIF,UAAU,CAACvY,YAAY,CAAC,mBAAmB,CAAC,KAAK,MAAM,IAAIoY,MAAM,CAACC,IAAI,CAACM,gBAAgB,EAAE;UACzFP,MAAM,CAACC,IAAI,CAACM,gBAAgB,CAACF,WAAW,CAAC;UACzC5jB,+CAAK,CAACY,GAAG,CAAC,oDAAoD,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5E;QAEAZ,+CAAK,CAACY,GAAG,CAAC,kDAAkD,EAAE,IAAI,EAAE,CAAC,CAAC;MAC1E,CAAC,CAAC,OAAOqT,KAAK,EAAE;QACZjU,+CAAK,CAAC0S,IAAI,CAAC,0DAA0D,EAAEuB,KAAK,EAAE,CAAC,CAAC;MACpF;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAxT,GAAA;IAAAC,KAAA,EAIA,SAAA4iB,gBAAgBA,CAACrP,KAAK,EAAE;MACpB,IAAMmK,YAAY,GAAGnK,KAAK,YAAY6F,KAAK,GAAG7F,KAAK,CAAC1I,OAAO,GAAG0R,MAAM,CAAChJ,KAAK,CAAC;MAC3E,IAAM8P,YAAY,GAAG9jB,2DAAW,CAACiG,UAAU,CAACkY,YAAY,CAAC;;MAEzD;MACA,IAAI,CAAC2C,YAAY,CAACwB,UAAU,CACxBriB,4DAAS,CAACsiB,KAAK,CAACE,OAAO,CAACpgB,IAAI,CAAC,CAAC,EAC9B,EAAE,EACFpC,4DAAS,CAACsiB,KAAK,CAACG,kBAAkB,CAACrgB,IAAI,CAAC,CAC5C,CAAC;;MAED;MACAoE,qDAAQ,CAACsd,WAAW,CAChB9jB,4DAAS,CAACsiB,KAAK,CAACG,kBAAkB,CAACrgB,IAAI,CAAC,CAAC,yCAAAH,MAAA,CACF4hB,YAAY,WACnD,QAAQ,EACR;QAAEjb,SAAS,EAAE;MAAG,CAAC,CAAC;MACtB,CAAC;MAED,IAAI,CAACiY,YAAY,CAACoC,IAAI,CAACjjB,4DAAS,CAACsiB,KAAK,CAACE,OAAO,CAACpgB,IAAI,CAAC,CAAC,CAAC;IAC1D;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9MqC;AACM;AAC0B;AACZ;AACM;AAClB;;AAElD;AACA;AACA;AACO,IAAM4hB,iBAAiB;EAC1B;AACJ;AACA;AACA;EACI,SAAAA,kBAAY7G,YAAY,EAAE;IAAA9c,eAAA,OAAA2jB,iBAAA;IACtB,IAAI,CAAC7G,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACrb,UAAU,GAAGqb,YAAY,CAACrb,UAAU;IACzC,IAAI,CAAC+e,YAAY,GAAG1D,YAAY,CAAC0D,YAAY;IAC7C,IAAI,CAAC/f,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;;IAE1D;IACA,IAAI,CAACkjB,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,eAAe,GAAG,IAAI;EAC/B;;EAEA;AACJ;AACA;EAFI,OAAA9jB,YAAA,CAAA0jB,iBAAA;IAAAzjB,GAAA;IAAAC,KAAA,EAGA,SAAA0R,UAAUA,CAAA,EAAG;MACT;MACA,IAAI,CAACmS,0BAA0B,CAAC,CAAC;;MAEjC;MACA,IAAI,CAACC,iBAAiB,CAAC,CAAC;;MAExB;MACA,IAAI,CAACC,qBAAqB,CAAC,CAAC;MAE5BzkB,+CAAK,CAACY,GAAG,CAAC,gCAAgC,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD;;IAEA;AACJ;AACA;EAFI;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAA6jB,0BAA0BA,CAAA,EAAG;MACzB;MACA,IAAI,CAACJ,gBAAgB,GAAGzd,qDAAQ,CAACid,UAAU,CAACzjB,4DAAS,CAACghB,KAAK,CAACwD,oBAAoB,CAAC;MACjF,IAAI,CAACN,cAAc,GAAG1d,qDAAQ,CAACid,UAAU,CAACzjB,4DAAS,CAACghB,KAAK,CAACyD,kBAAkB,CAAC;;MAE7E;MACA,IAAI,CAACN,eAAe,GAAGzb,QAAQ,CAAC+V,cAAc,CAAC,iCAAiC,CAAC;MACjF,IAAI,CAAC2F,eAAe,GAAG1b,QAAQ,CAAC+V,cAAc,CAAC,iCAAiC,CAAC;MAEjF,IAAI,CAAC,IAAI,CAACwF,gBAAgB,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE;QAChDpkB,+CAAK,CAAC0S,IAAI,CAAC,uDAAuD,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5E;MACJ;;MAEA;MACA,IAAI,IAAI,CAAC0R,cAAc,EAAE;QACrB,IAAI,CAACA,cAAc,CAACxa,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;MACtD;;MAEA;MACA;MACA5J,+CAAK,CAACY,GAAG,CAAC,yDAAyD,EAAE,IAAI,EAAE,CAAC,CAAC;MAC7E,IAAI,CAACgkB,yBAAyB,CAAC,CAAC;;MAEhC;MACA,IAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,2BAA2B,CAAC,IAAI,KAAK;;MAEnF;MACA,IAAIC,WAAW,GAAG,KAAK;MACvB,KAAK,IAAItO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACyN,gBAAgB,CAACc,OAAO,CAAClkB,MAAM,EAAE2V,CAAC,EAAE,EAAE;QAC3D,IAAI,IAAI,CAACyN,gBAAgB,CAACc,OAAO,CAACvO,CAAC,CAAC,CAAChW,KAAK,KAAKmkB,gBAAgB,EAAE;UAC7DG,WAAW,GAAG,IAAI;UAClB;QACJ;MACJ;;MAEA;MACA,IAAIA,WAAW,EAAE;QACb,IAAI,CAACb,gBAAgB,CAACzjB,KAAK,GAAGmkB,gBAAgB;MAClD,CAAC,MAAM,IAAI,IAAI,CAACV,gBAAgB,CAACc,OAAO,CAAClkB,MAAM,GAAG,CAAC,EAAE;QACjD,IAAI,CAACojB,gBAAgB,CAACe,aAAa,GAAG,CAAC;MAC3C;MAEAllB,+CAAK,CAACY,GAAG,wDAAAuB,MAAA,CAAwD,IAAI,CAACgiB,gBAAgB,CAACzjB,KAAK,GAAI,IAAI,EAAE,CAAC,CAAC;;MAExG;MACA,IAAI,CAACykB,sBAAsB,CAAC,CAAC;MAE7BnlB,+CAAK,CAACY,GAAG,CAAC,yDAAyD,EAAE,IAAI,EAAE,CAAC,CAAC;IACjF;;IAEA;AACJ;AACA;EAFI;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAkkB,yBAAyBA,CAAA,EAAG;MAAA,IAAAQ,aAAA,EAAAC,qBAAA,EAAAC,aAAA;MACxB;MACA,IAAMpc,YAAY,GAAG,IAAI,CAAClH,UAAU,CAACwc,eAAe,CAAC,CAAC;;MAEtD;MACA,IAAMrV,QAAQ,GAAGD,YAAY,CAACC,QAAQ,IAAI,CAAC,CAAC;;MAE5C;MACA;MACA,IAAMoc,WAAW,GAAGrc,YAAY,CAACqc,WAAW,MAAAH,aAAA,GAAIjc,QAAQ,OAAI,cAAAic,aAAA,uBAAZA,aAAA,CAAcI,QAAQ,OAAAH,qBAAA,GAAInc,YAAY,CAACgZ,QAAQ,cAAAmD,qBAAA,uBAArBA,qBAAA,CAAuBvV,KAAK,CAAC,GAAG,CAAC,CAACgM,GAAG,CAAC,CAAC,KAAI,UAAU;MAC/H,IAAM2J,WAAW,GAAGvc,YAAY,CAACuc,WAAW,MAAAH,aAAA,GAAInc,QAAQ,CAACuc,GAAG,cAAAJ,aAAA,uBAAZA,aAAA,CAAcE,QAAQ,KAAI,UAAU;;MAEpF;MACA,IAAMG,OAAO,GAAGJ,WAAW,CAACzV,KAAK,CAAC,QAAQ,CAAC,CAACgM,GAAG,CAAC,CAAC;MACjD,IAAM8J,OAAO,GAAGH,WAAW,CAAC3V,KAAK,CAAC,QAAQ,CAAC,CAACgM,GAAG,CAAC,CAAC;MAEjD9b,+CAAK,CAACY,GAAG,CAAC,sDAAsD,EAAE;QAC9D2kB,WAAW,EAAXA,WAAW;QACXE,WAAW,EAAXA,WAAW;QACXE,OAAO,EAAPA,OAAO;QACPC,OAAO,EAAPA;MACJ,CAAC,EAAE,CAAC,CAAC;;MAEL;MACA,IAAMC,iBAAiB,GAAGF,OAAO,CAACvV,SAAS,CAAC,CAAC,EAAEuV,OAAO,CAACG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAIH,OAAO;MACnF,IAAMI,iBAAiB,GAAGH,OAAO,CAACxV,SAAS,CAAC,CAAC,EAAEwV,OAAO,CAACE,WAAW,CAAC,GAAG,CAAC,CAAC,IAAIF,OAAO;MACnF,IAAMI,UAAU,GAAGL,OAAO,CAACvV,SAAS,CAACuV,OAAO,CAACG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE;MACpE,IAAMG,UAAU,GAAGL,OAAO,CAACxV,SAAS,CAACwV,OAAO,CAACE,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE;MAEpE,IAAMI,aAAa,MAAA/jB,MAAA,CAAM0jB,iBAAiB,aAAA1jB,MAAA,CAAU6jB,UAAU,CAAE;MAChE,IAAMG,aAAa,MAAAhkB,MAAA,CAAM4jB,iBAAiB,aAAA5jB,MAAA,CAAU8jB,UAAU,CAAE;;MAEhE;MACA,IAAMG,MAAM,GAAG,IAAI,CAACpkB,UAAU,CAACqkB,SAAS,CAAC,CAAC;MAC1C,IAAMC,WAAW,GAAG,CAAAF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEE,WAAW,KAAI;QACvCC,cAAc,EAAE,IAAI;QACpBC,cAAc,EAAE,IAAI;QACpBC,SAAS,EAAE,IAAI;QACfC,mBAAmB,EAAE,IAAI;QACzBC,UAAU,EAAE,IAAI;QAChBC,oBAAoB,EAAE;MAC1B,CAAC;MAED5mB,+CAAK,CAACY,GAAG,CAAC,+CAA+C,EAAE0lB,WAAW,EAAE,CAAC,CAAC;;MAE1E;MACA,OAAO,IAAI,CAACnC,gBAAgB,CAACc,OAAO,CAAClkB,MAAM,GAAG,CAAC,EAAE;QAC7C,IAAI,CAACojB,gBAAgB,CAACnY,MAAM,CAAC,CAAC,CAAC;MACnC;;MAEA;MACA,IAAI,CAACmY,gBAAgB,CAACjiB,SAAS,GAAG,EAAE;MAEpClC,+CAAK,CAACY,GAAG,CAAC,sDAAsD,EAAE,IAAI,EAAE,CAAC,CAAC;MAE1E,IAAIimB,WAAW,GAAG,CAAC;;MAEnB;MACA,IAAIP,WAAW,CAACC,cAAc,EAAE;QAC5B7f,qDAAQ,CAACogB,sBAAsB,CAAC,QAAQ,EAAE,IAAI,CAAC3C,gBAAgB,EAAE;UAC7D4C,UAAU,EAAE;YACRrmB,KAAK,EAAE,KAAK;YACZ,cAAc,EAAE,IAAI,CAACM,kBAAkB,CAACI,GAAG,CAAC,uBAAuB,EAAE,8CAA8C;UACvH,CAAC;UACD4e,OAAO,KAAA7d,MAAA,CAAKwjB,OAAO;QACvB,CAAC,CAAC;QACFkB,WAAW,EAAE;MACjB;MAEA,IAAIP,WAAW,CAACE,cAAc,EAAE;QAC5B9f,qDAAQ,CAACogB,sBAAsB,CAAC,QAAQ,EAAE,IAAI,CAAC3C,gBAAgB,EAAE;UAC7D4C,UAAU,EAAE;YACRrmB,KAAK,EAAE,YAAY;YACnB,cAAc,EAAE,IAAI,CAACM,kBAAkB,CAACI,GAAG,CAAC,uBAAuB,EAAE,uDAAuD;UAChI,CAAC;UACD4e,OAAO,KAAA7d,MAAA,CAAK+jB,aAAa;QAC7B,CAAC,CAAC;QACFW,WAAW,EAAE;MACjB;MAEA,IAAIP,WAAW,CAACG,SAAS,EAAE;QACvB/f,qDAAQ,CAACogB,sBAAsB,CAAC,QAAQ,EAAE,IAAI,CAAC3C,gBAAgB,EAAE;UAC7D4C,UAAU,EAAE;YACRrmB,KAAK,EAAE,KAAK;YACZ,cAAc,EAAE,IAAI,CAACM,kBAAkB,CAACI,GAAG,CAAC,kBAAkB,EAAE,0CAA0C;UAC9G,CAAC;UACD4e,OAAO,KAAA7d,MAAA,CAAKyjB,OAAO;QACvB,CAAC,CAAC;QACFiB,WAAW,EAAE;MACjB;MAEA,IAAIP,WAAW,CAACI,mBAAmB,EAAE;QACjChgB,qDAAQ,CAACogB,sBAAsB,CAAC,QAAQ,EAAE,IAAI,CAAC3C,gBAAgB,EAAE;UAC7D4C,UAAU,EAAE;YACRrmB,KAAK,EAAE,YAAY;YACnB,cAAc,EAAE,IAAI,CAACM,kBAAkB,CAACI,GAAG,CAAC,4BAA4B,EAAE,uEAAuE;UACrJ,CAAC;UACD4e,OAAO,KAAA7d,MAAA,CAAKgkB,aAAa;QAC7B,CAAC,CAAC;QACFU,WAAW,EAAE;MACjB;MAEA,IAAIP,WAAW,CAACK,UAAU,EAAE;QACxBjgB,qDAAQ,CAACogB,sBAAsB,CAAC,QAAQ,EAAE,IAAI,CAAC3C,gBAAgB,EAAE;UAC7D4C,UAAU,EAAE;YACRrmB,KAAK,EAAE,MAAM;YACb,cAAc,EAAE,IAAI,CAACM,kBAAkB,CAACI,GAAG,CAAC,mBAAmB,EAAE,oDAAoD;UACzH,CAAC;UACD4e,OAAO,EAAE,IAAI,CAAChf,kBAAkB,CAACI,GAAG,CAAC,YAAY,EAAE,sBAAsB;QAC7E,CAAC,CAAC;QACFylB,WAAW,EAAE;MACjB;MAEA,IAAIP,WAAW,CAACM,oBAAoB,EAAE;QAClClgB,qDAAQ,CAACogB,sBAAsB,CAAC,QAAQ,EAAE,IAAI,CAAC3C,gBAAgB,EAAE;UAC7D4C,UAAU,EAAE;YACRrmB,KAAK,EAAE,aAAa;YACpB,cAAc,EAAE,IAAI,CAACM,kBAAkB,CAACI,GAAG,CAAC,6BAA6B,EAAE,wEAAwE;UACvJ,CAAC;UACD4e,OAAO,EAAE,IAAI,CAAChf,kBAAkB,CAACI,GAAG,CAAC,sBAAsB,EAAE,0BAA0B;QAC3F,CAAC,CAAC;QACFylB,WAAW,EAAE;MACjB;;MAEA;MACA,IAAIA,WAAW,KAAK,CAAC,EAAE;QACnB7mB,+CAAK,CAACY,GAAG,CAAC,mEAAmE,EAAE,IAAI,EAAE,CAAC,CAAC;QACvF8F,qDAAQ,CAACogB,sBAAsB,CAAC,QAAQ,EAAE,IAAI,CAAC3C,gBAAgB,EAAE;UAC7D4C,UAAU,EAAE;YACRrmB,KAAK,EAAE,KAAK;YACZ,cAAc,EAAE,IAAI,CAACM,kBAAkB,CAACI,GAAG,CAAC,uBAAuB,EAAE,8CAA8C;UACvH,CAAC;UACD4e,OAAO,KAAA7d,MAAA,CAAKwjB,OAAO;QACvB,CAAC,CAAC;QACFkB,WAAW,GAAG,CAAC;MACnB;MAEA7mB,+CAAK,CAACY,GAAG,yDAAAuB,MAAA,CAAyD0kB,WAAW,eAAY,IAAI,EAAE,CAAC,CAAC;IACrG;;IAEA;AACJ;AACA;EAFI;IAAApmB,GAAA;IAAAC,KAAA,EAGA,SAAAykB,sBAAsBA,CAAA,EAAG;MAAA,IAAA1d,KAAA;MACrB;MACA,IAAMuf,aAAa,GAAG,SAAhBA,aAAaA,CAAIrf,KAAK,EAAK;QAC7B;QACAA,KAAK,CAACsf,cAAc,CAAC,CAAC;QACtBtf,KAAK,CAACuf,eAAe,CAAC,CAAC;;QAEvB;QACA,IAAIzf,KAAI,CAAC0c,gBAAgB,EAAE;UACvB;UACA;UACA1c,KAAI,CAAC0c,gBAAgB,CAACgD,KAAK,CAAC,CAAC;;UAE7B;UACA,IAAI,OAAO1f,KAAI,CAAC0c,gBAAgB,CAACiD,UAAU,KAAK,UAAU,EAAE;YACxD,IAAI;cACA3f,KAAI,CAAC0c,gBAAgB,CAACiD,UAAU,CAAC,CAAC;cAClCpnB,+CAAK,CAACY,GAAG,CAAC,uDAAuD,EAAE,IAAI,EAAE,CAAC,CAAC;cAC3E;YACJ,CAAC,CAAC,OAAOiD,CAAC,EAAE;cACR7D,+CAAK,CAACY,GAAG,CAAC,mEAAmE,EAAEiD,CAAC,EAAE,CAAC,CAAC;YACxF;UACJ;;UAEA;UACA4H,UAAU,CAAC,YAAM;YACb,IAAI;cACA;cACA,IAAM4b,UAAU,GAAG,IAAIC,UAAU,CAAC,WAAW,EAAE;gBAC3CC,OAAO,EAAE,IAAI;gBACbC,UAAU,EAAE,IAAI;gBAChBC,IAAI,EAAElE;cACV,CAAC,CAAC;cACF9b,KAAI,CAAC0c,gBAAgB,CAACuD,aAAa,CAACL,UAAU,CAAC;YACnD,CAAC,CAAC,OAAOxjB,CAAC,EAAE;cACR7D,+CAAK,CAACY,GAAG,CAAC,6DAA6D,EAAEiD,CAAC,EAAE,CAAC,CAAC;YAClF;UACJ,CAAC,EAAE,EAAE,CAAC;;UAEN;UACA4D,KAAI,CAAC0c,gBAAgB,CAACnb,SAAS,CAACrF,GAAG,CAAC,wBAAwB,CAAC;UAC7D8H,UAAU,CAAC,YAAM;YACbhE,KAAI,CAAC0c,gBAAgB,CAACnb,SAAS,CAACgD,MAAM,CAAC,wBAAwB,CAAC;UACpE,CAAC,EAAE,IAAI,CAAC;QACZ;QAEAhM,+CAAK,CAACY,GAAG,CAAC,uEAAuE,EAAE,IAAI,EAAE,CAAC,CAAC;MAC/F,CAAC;MAED,IAAM+mB,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;QACxB;QACAlgB,KAAI,CAACmgB,iBAAiB,CAACngB,KAAI,CAAC0c,gBAAgB,CAACzjB,KAAK,CAAC;QACnDokB,YAAY,CAAC+C,OAAO,CAAC,2BAA2B,EAAEpgB,KAAI,CAAC0c,gBAAgB,CAACzjB,KAAK,CAAC;QAE9EV,+CAAK,CAACY,GAAG,4CAAAuB,MAAA,CAA4CsF,KAAI,CAAC0c,gBAAgB,CAACzjB,KAAK,GAAI,IAAI,EAAE,CAAC,CAAC;MAChG,CAAC;;MAED;MACA,IAAMonB,YAAY,GAAG,IAAI,CAAC1D,cAAc,CAAC5C,SAAS,CAAC,IAAI,CAAC;MACxD,IAAMuG,mBAAmB,GAAG,IAAI,CAAC5D,gBAAgB,CAAC3C,SAAS,CAAC,IAAI,CAAC;;MAEjE;MACA,IAAI,IAAI,CAAC4C,cAAc,IAAI,IAAI,CAACA,cAAc,CAAC3C,UAAU,EAAE;QACvD,IAAI,CAAC2C,cAAc,CAAC3C,UAAU,CAACC,YAAY,CAACoG,YAAY,EAAE,IAAI,CAAC1D,cAAc,CAAC;MAClF;MAEA,IAAI,IAAI,CAACD,gBAAgB,IAAI,IAAI,CAACA,gBAAgB,CAAC1C,UAAU,EAAE;QAC3D,IAAI,CAAC0C,gBAAgB,CAAC1C,UAAU,CAACC,YAAY,CAACqG,mBAAmB,EAAE,IAAI,CAAC5D,gBAAgB,CAAC;MAC7F;;MAEA;MACA,IAAI,CAACC,cAAc,GAAG0D,YAAY;MAClC,IAAI,CAAC3D,gBAAgB,GAAG4D,mBAAmB;;MAE3C;MACA,IAAI,CAAC,IAAI,CAAC3D,cAAc,CAACvX,aAAa,CAAC,kCAAkC,CAAC,EAAE;QACxE,IAAI,CAACwX,eAAe,GAAG3d,qDAAQ,CAACogB,sBAAsB,CAAC,GAAG,EAAE,IAAI,CAAC1C,cAAc,EAAE;UAC7Etf,EAAE,EAAE;QACR,CAAC,CAAC;QACF,IAAI,CAACsf,cAAc,CAACvZ,YAAY,CAAC,IAAI,CAACwZ,eAAe,EAAE,IAAI,CAACD,cAAc,CAACtZ,UAAU,CAAC;MAC1F,CAAC,MAAM;QACH,IAAI,CAACuZ,eAAe,GAAG,IAAI,CAACD,cAAc,CAACvX,aAAa,CAAC,kCAAkC,CAAC;MAChG;MAEA,IAAI,CAAC,IAAI,CAACuX,cAAc,CAACvX,aAAa,CAAC,kCAAkC,CAAC,EAAE;QACxE,IAAI,CAACyX,eAAe,GAAG5d,qDAAQ,CAACogB,sBAAsB,CAAC,MAAM,EAAE,IAAI,CAAC1C,cAAc,EAAE;UAChFtf,EAAE,EAAE;QACR,CAAC,CAAC;MACN,CAAC,MAAM;QACH,IAAI,CAACwf,eAAe,GAAG,IAAI,CAACF,cAAc,CAACvX,aAAa,CAAC,kCAAkC,CAAC;MAChG;;MAEA;MACA,IAAI,CAACsX,gBAAgB,CAACnb,SAAS,CAACrF,GAAG,CAAC,sBAAsB,CAAC;MAC3D,IAAI,CAACwgB,gBAAgB,CAACra,KAAK,CAAC5B,MAAM,GAAG,SAAS;;MAE9C;MACA,IAAM8f,YAAY,GAAGpf,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;MACnDmf,YAAY,CAAClf,SAAS,GAAG5I,4DAAS,CAACqJ,OAAO,CAAC0e,cAAc,CAAC3lB,IAAI,CAAC,CAAC,CAAC,CAAC;MAClE0lB,YAAY,CAAC9lB,SAAS,GAAGwE,qDAAQ,CAACkb,WAAW,CAAC,cAAc,EAAE;QAAEpX,KAAK,EAAE,EAAE;QAAEJ,MAAM,EAAE;MAAG,CAAC,CAAC;MACxF,IAAI,CAACga,cAAc,CAAC1Z,WAAW,CAACsd,YAAY,CAAC;;MAE7C;MACA,IAAI,CAAC5D,cAAc,CAACrZ,gBAAgB,CAAC,OAAO,EAAEic,aAAa,CAAC;MAC5D,IAAI,CAAC7C,gBAAgB,CAACpZ,gBAAgB,CAAC,QAAQ,EAAE4c,aAAa,CAAC;;MAE/D;MACA,IAAI,CAACxD,gBAAgB,CAACra,KAAK,CAACoe,YAAY,GAAG,QAAQ;MACnD,IAAI,CAAC/D,gBAAgB,CAACra,KAAK,CAACqe,UAAU,GAAG,UAAU;MACnD,IAAI,CAAChE,gBAAgB,CAACra,KAAK,CAAC5B,MAAM,GAAG,SAAS;;MAE9C;MACA,IAAI,CAACic,gBAAgB,CAACta,KAAK,GAAG,kDAAkD;;MAEhF;MACA,IAAI,CAACsa,gBAAgB,CAACpZ,gBAAgB,CAAC,WAAW,EAAE,YAAM;QACtDtD,KAAI,CAAC0c,gBAAgB,CAACra,KAAK,CAACse,WAAW,GAAG,6BAA6B;MAC3E,CAAC,CAAC;MACF,IAAI,CAACjE,gBAAgB,CAACpZ,gBAAgB,CAAC,UAAU,EAAE,YAAM;QACrDtD,KAAI,CAAC0c,gBAAgB,CAACra,KAAK,CAACse,WAAW,GAAG,kCAAkC;MAChF,CAAC,CAAC;;MAEF;MACA,IAAI,CAACR,iBAAiB,CAAC,IAAI,CAACzD,gBAAgB,CAACzjB,KAAK,CAAC;IACvD;;IAEA;AACJ;AACA;EAFI;IAAAD,GAAA;IAAAC,KAAA,EAGA,SAAAknB,iBAAiBA,CAAClnB,KAAK,EAAE;MACrB;MACA,IAAM2nB,iBAAiB,GAAG,kBAAkB,CAAC,CAAC;MAC9C,IAAMC,iBAAiB,GAAG,kBAAkB,CAAC,CAAC;MAC9C,IAAMC,mBAAmB,GAAG,eAAe,CAAC,CAAE;;MAE9C;MACA,IAAMC,eAAe,GAAGtoB,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC,CAAC,CAAC;MACjE,IAAMomB,eAAe,GAAGxoB,4DAAS,CAACqJ,OAAO,CAACof,cAAc,CAACrmB,IAAI,CAAC,CAAC,CAAC,CAAC;MACjE,IAAMsmB,iBAAiB,GAAG1oB,4DAAS,CAACqJ,OAAO,CAACsf,WAAW,CAACvmB,IAAI,CAAC,CAAC,CAAC,CAAE;;MAEjE;MACA;MACA,IAAIwmB,QAAQ,GAAG,EAAE;MACjB,IAAIC,UAAU,GAAG,EAAE;MACnB,IAAIC,WAAW,GAAG,EAAE;;MAEpB;MACA,QAAQtoB,KAAK;QACT,KAAK,KAAK;QACV,KAAK,YAAY;UACb;UACAooB,QAAQ,GAAG,MAAM;UACjBC,UAAU,GAAGV,iBAAiB;UAC9BW,WAAW,GAAGR,eAAe;UAC7B;QAEJ,KAAK,KAAK;QACV,KAAK,YAAY;UACb;UACAM,QAAQ,GAAG,YAAY;UACvBC,UAAU,GAAGT,iBAAiB;UAC9BU,WAAW,GAAGN,eAAe;UAC7B;QAEJ,KAAK,MAAM;QACX,KAAK,aAAa;UACd;UACAI,QAAQ,GAAG,WAAW;UACtBC,UAAU,GAAGR,mBAAmB;UAChCS,WAAW,GAAGJ,iBAAiB;UAC/B;QAEJ;UACI;UACAE,QAAQ,GAAG,MAAM;UACjBC,UAAU,GAAGV,iBAAiB;UAC9BW,WAAW,GAAGR,eAAe;UAC7B;MACR;;MAEA;MACA,IAAMS,WAAW,MAAA9mB,MAAA,CAAMjC,4DAAS,CAACqJ,OAAO,CAAC2f,YAAY,CAAC5mB,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAI4mB,UAAU,CAAE;MAC5E,IAAI,CAAC1E,eAAe,CAACniB,SAAS,GAAGwE,qDAAQ,CAACkb,WAAW,CAACkH,QAAQ,EAAE;QAAEre,OAAO,EAAEwe;MAAY,CAAC,CAAC;;MAEzF;MACA,IAAME,WAAW,GAAGvgB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACghB,KAAK,CAACkI,YAAY,CAAC9mB,IAAI,CAAC,CAAC,CAAC;MAChF,IAAI6mB,WAAW,EAAE;QACb;QACAA,WAAW,CAACngB,SAAS,CAACgD,MAAM,CACxB9L,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC,EACvCpC,4DAAS,CAACqJ,OAAO,CAACof,cAAc,CAACrmB,IAAI,CAAC,CAAC,EACvCpC,4DAAS,CAACqJ,OAAO,CAACsf,WAAW,CAACvmB,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACqJ,OAAO,CAAC8f,cAAc,CAAC/mB,IAAI,CAAC,CAAC,EACvCpC,4DAAS,CAACqJ,OAAO,CAAC+f,aAAa,CAAChnB,IAAI,CAAC,CAAC,EACtCpC,4DAAS,CAACqJ,OAAO,CAACG,gBAAgB,CAACpH,IAAI,CAAC,CAC5C,CAAC;;QAED;QACA6mB,WAAW,CAACngB,SAAS,CAACrF,GAAG,CAACqlB,WAAW,CAAC;QAEtChpB,+CAAK,CAACY,GAAG,qDAAAuB,MAAA,CAAqD6mB,WAAW,GAAI,IAAI,EAAE,CAAC,CAAC;MACzF;;MAEA;MACA,QAAQtoB,KAAK;QACT,KAAK,KAAK;UACN;UACA,IAAI,CAAC4jB,eAAe,CAACjb,WAAW,GAAG,IAAI,CAACrI,kBAAkB,CAACI,GAAG,CAAC,gBAAgB,EAAE,kBAAkB,CAAC;UACpG,IAAI,CAACgjB,cAAc,CAACva,KAAK,GAAG,IAAI,CAAC7I,kBAAkB,CAACI,GAAG,CAAC,uBAAuB,EAAE,EAAE,CAAC;UACpF,IAAI,CAACgjB,cAAc,CAACxa,YAAY,CAAC,YAAY,EAAE,KAAK,CAAC;UACrD;QAEJ,KAAK,YAAY;UACb;UACA,IAAI,CAAC0a,eAAe,CAACjb,WAAW,GAAG,IAAI,CAACrI,kBAAkB,CAACI,GAAG,CAAC,gBAAgB,EAAE,kBAAkB,CAAC;UACpG,IAAI,CAACgjB,cAAc,CAACva,KAAK,GAAG,IAAI,CAAC7I,kBAAkB,CAACI,GAAG,CAAC,uBAAuB,EAAE,EAAE,CAAC;UACpF,IAAI,CAACgjB,cAAc,CAACxa,YAAY,CAAC,YAAY,EAAE,YAAY,CAAC;UAC5D;QAEJ,KAAK,KAAK;UACN;UACA,IAAI,CAAC0a,eAAe,CAACjb,WAAW,GAAG,IAAI,CAACrI,kBAAkB,CAACI,GAAG,CAAC,WAAW,EAAE,kBAAkB,CAAC;UAC/F,IAAI,CAACgjB,cAAc,CAACva,KAAK,GAAG,IAAI,CAAC7I,kBAAkB,CAACI,GAAG,CAAC,kBAAkB,EAAE,EAAE,CAAC;UAC/E,IAAI,CAACgjB,cAAc,CAACxa,YAAY,CAAC,YAAY,EAAE,KAAK,CAAC;UACrD;QAEJ,KAAK,YAAY;UACb;UACA,IAAI,CAAC0a,eAAe,CAACjb,WAAW,GAAG,IAAI,CAACrI,kBAAkB,CAACI,GAAG,CAAC,qBAAqB,EAAE,yBAAyB,CAAC;UAChH,IAAI,CAACgjB,cAAc,CAACva,KAAK,GAAG,IAAI,CAAC7I,kBAAkB,CAACI,GAAG,CAAC,4BAA4B,EAAE,EAAE,CAAC;UACzF,IAAI,CAACgjB,cAAc,CAACxa,YAAY,CAAC,YAAY,EAAE,YAAY,CAAC;UAC5D;QAEJ,KAAK,MAAM;UACP;UACA,IAAI,CAAC0a,eAAe,CAACjb,WAAW,GAAG,IAAI,CAACrI,kBAAkB,CAACI,GAAG,CAAC,YAAY,EAAE,oBAAoB,CAAC;UAClG,IAAI,CAACgjB,cAAc,CAACva,KAAK,GAAG,IAAI,CAAC7I,kBAAkB,CAACI,GAAG,CAAC,mBAAmB,EAAE,EAAE,CAAC;UAChF,IAAI,CAACgjB,cAAc,CAACxa,YAAY,CAAC,YAAY,EAAE,MAAM,CAAC;UACtD;QAEJ,KAAK,aAAa;UACd;UACA,IAAI,CAAC0a,eAAe,CAACjb,WAAW,GAAG,IAAI,CAACrI,kBAAkB,CAACI,GAAG,CAAC,sBAAsB,EAAE,0BAA0B,CAAC;UAClH,IAAI,CAACgjB,cAAc,CAACva,KAAK,GAAG,IAAI,CAAC7I,kBAAkB,CAACI,GAAG,CAAC,6BAA6B,EAAE,EAAE,CAAC;UAC1F,IAAI,CAACgjB,cAAc,CAACxa,YAAY,CAAC,YAAY,EAAE,aAAa,CAAC;UAC7D;QAEJ;UACI;UACA,IAAI,CAAC0a,eAAe,CAACjb,WAAW,GAAG,IAAI,CAACrI,kBAAkB,CAACI,GAAG,CAAC,gBAAgB,EAAE,kBAAkB,CAAC;UACpG,IAAI,CAACgjB,cAAc,CAACva,KAAK,GAAG,IAAI,CAAC7I,kBAAkB,CAACI,GAAG,CAAC,uBAAuB,EAAE,EAAE,CAAC;UACpF,IAAI,CAACgjB,cAAc,CAACxa,YAAY,CAAC,YAAY,EAAE,KAAK,CAAC;UACrD;MACR;MAEA5J,+CAAK,CAACY,GAAG,yCAAAuB,MAAA,CAAyCzB,KAAK,GAAI,IAAI,EAAE,CAAC,CAAC;IACvE;;IAEA;AACJ;AACA;EAFI;IAAAD,GAAA;IAAAC,KAAA,EAGA,SAAA8jB,iBAAiBA,CAAA,EAAG;MAAA,IAAAxZ,MAAA;MAChB;MACApC,QAAQ,CAACmC,gBAAgB,CAAC,OAAO,EAAE,UAACpD,KAAK,EAAK;QAC1C;QACA,IAAIA,KAAK,CAAC4hB,MAAM,CAACC,OAAO,IAAI7hB,KAAK,CAAC4hB,MAAM,CAACC,OAAO,KAAArnB,MAAA,CAAKjC,4DAAS,CAACsiB,KAAK,CAACiH,YAAY,CAACnnB,IAAI,CAAC,CAAC,CAAE,CAAC,EAAE;UACzFtC,+CAAK,CAACY,GAAG,CAAC,mEAAmE,EAAE,IAAI,EAAE,CAAC,CAAC;UACvFoK,MAAI,CAAC+V,YAAY,CAAC2I,KAAK,CAACxpB,4DAAS,CAACghB,KAAK,CAACyI,cAAc,CAACrnB,IAAI,CAAC,CAAC,CAAC;;UAE9D;UACA,IAAMsnB,cAAc,GAAG1pB,4DAAS,CAACsiB,KAAK,CAACE,OAAO,CAACpgB,IAAI,CAAC,CAAC;UACrDtC,+CAAK,CAACY,GAAG,uDAAAuB,MAAA,CAAuDynB,cAAc,QAAK,IAAI,EAAE,CAAC,CAAC;UAC3F5e,MAAI,CAAC+V,YAAY,CAAC2I,KAAK,CAACE,cAAc,CAAC;UAEvCne,UAAU,CAAC,YAAM;YACbT,MAAI,CAAC6e,yBAAyB,CAAC,CAAC;UACpC,CAAC,EAAE,GAAG,CAAC;QACX;;QAEA;QACA,IAAIliB,KAAK,CAAC4hB,MAAM,CAACC,OAAO,IAAI7hB,KAAK,CAAC4hB,MAAM,CAACC,OAAO,KAAArnB,MAAA,CAAKjC,4DAAS,CAACsiB,KAAK,CAACsH,SAAS,CAACxnB,IAAI,CAAC,CAAC,CAAE,CAAC,EAAE;UACtFtC,+CAAK,CAACY,GAAG,CAAC,+DAA+D,EAAE,IAAI,EAAE,CAAC,CAAC;UACnFoK,MAAI,CAAC+V,YAAY,CAAC2I,KAAK,CAACxpB,4DAAS,CAACghB,KAAK,CAACyI,cAAc,CAACrnB,IAAI,CAAC,CAAC,CAAC;UAC9D0I,MAAI,CAACqS,YAAY,CAAC6B,gBAAgB,CAAClU,MAAI,CAAC+e,YAAY,CAAC,CAAC,CAAC;QAC3D;MACJ,CAAC,CAAC;;MAEF;MACA,IAAI,IAAI,CAAChJ,YAAY,IAAI,OAAO,IAAI,CAACA,YAAY,CAACiJ,0BAA0B,KAAK,UAAU,EAAE;QACzF,IAAI,CAACjJ,YAAY,CAACiJ,0BAA0B,CAAC9pB,4DAAS,CAACghB,KAAK,CAACyI,cAAc,CAACrnB,IAAI,CAAC,CAAC,EAAE,YAAM;UACtF;UACA,IAAM2nB,WAAW,GAAGrhB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACsiB,KAAK,CAACiH,YAAY,CAACnnB,IAAI,CAAC,CAAC,CAAC;UAChF,IAAM4nB,QAAQ,GAAGthB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACsiB,KAAK,CAACsH,SAAS,CAACxnB,IAAI,CAAC,CAAC,CAAC;UAE1EtC,+CAAK,CAACY,GAAG,kEAAAuB,MAAA,CAAkE,CAAC,CAAC8nB,WAAW,iBAAA9nB,MAAA,CAAc,CAAC,CAAC+nB,QAAQ,GAAI,IAAI,EAAE,CAAC,CAAC;;UAE5H;UACA,IAAID,WAAW,EAAE;YACbA,WAAW,CAACE,OAAO,GAAG,YAAM;cACxBnqB,+CAAK,CAACY,GAAG,CAAC,gEAAgE,EAAE,IAAI,EAAE,CAAC,CAAC;cACpFoK,MAAI,CAAC+V,YAAY,CAAC2I,KAAK,CAACxpB,4DAAS,CAACghB,KAAK,CAACyI,cAAc,CAACrnB,IAAI,CAAC,CAAC,CAAC;;cAE9D;cACA,IAAMsnB,cAAc,GAAG1pB,4DAAS,CAACsiB,KAAK,CAACE,OAAO,CAACpgB,IAAI,CAAC,CAAC;cACrDtC,+CAAK,CAACY,GAAG,uDAAAuB,MAAA,CAAuDynB,cAAc,QAAK,IAAI,EAAE,CAAC,CAAC;cAC3F5e,MAAI,CAAC+V,YAAY,CAAC2I,KAAK,CAACE,cAAc,CAAC;cAEvCne,UAAU,CAAC,YAAM;gBACbT,MAAI,CAAC6e,yBAAyB,CAAC,CAAC;cACpC,CAAC,EAAE,GAAG,CAAC;cACP,OAAO,KAAK,CAAC,CAAC;YAClB,CAAC;UACL;UAEA,IAAIK,QAAQ,EAAE;YACVA,QAAQ,CAACC,OAAO,GAAG,YAAM;cACrBnqB,+CAAK,CAACY,GAAG,CAAC,4DAA4D,EAAE,IAAI,EAAE,CAAC,CAAC;cAChFoK,MAAI,CAAC+V,YAAY,CAAC2I,KAAK,CAACxpB,4DAAS,CAACghB,KAAK,CAACyI,cAAc,CAACrnB,IAAI,CAAC,CAAC,CAAC;cAC9D0I,MAAI,CAACqS,YAAY,CAAC6B,gBAAgB,CAAClU,MAAI,CAAC+e,YAAY,CAAC,CAAC,CAAC;cACvD,OAAO,KAAK,CAAC,CAAC;YAClB,CAAC;UACL;QACJ,CAAC,CAAC;MACN;IACJ;;IAEA;AACJ;AACA;EAFI;IAAAtpB,GAAA;IAAAC,KAAA,EAGA,SAAA+jB,qBAAqBA,CAAA,EAAG;MAAA,IAAAzX,MAAA;MACpB;MACA,IAAMmc,WAAW,GAAGvgB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACghB,KAAK,CAACkI,YAAY,CAAC9mB,IAAI,CAAC,CAAC,CAAC;MAChF,IAAI,CAAC6mB,WAAW,EAAE;QACdnpB,+CAAK,CAAC0S,IAAI,CAAC,iDAAiD,EAAE,IAAI,EAAE,CAAC,CAAC;QACtE;MACJ;;MAEA;MACA,IAAM0X,oBAAoB,GAAGxhB,QAAQ,CAACiE,aAAa,CAAC3M,4DAAS,CAACghB,KAAK,CAACmJ,gBAAgB,CAACC,QAAQ,CAAC,CAAC,CAAC;MAChG,IAAI,CAACF,oBAAoB,EAAE;QACvBpqB,+CAAK,CAAC0S,IAAI,CAAC,uDAAuD,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5E;MACJ;;MAEA;MACA,IAAM6X,mBAAmB,GAAG3hB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACghB,KAAK,CAACwD,oBAAoB,CAACpiB,IAAI,CAAC,CAAC,CAAC;MAChG,IAAMkoB,YAAY,GAAG5hB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACghB,KAAK,CAACyD,kBAAkB,CAACriB,IAAI,CAAC,CAAC,CAAC;;MAEvF;MACA,IAAMmoB,IAAI,GAAG7hB,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;MAC3C4hB,IAAI,CAAC3lB,EAAE,GAAG,iBAAiB;MAC3B2lB,IAAI,CAAC3hB,SAAS,GAAGshB,oBAAoB,CAACthB,SAAS;MAC/C2hB,IAAI,CAAC3gB,KAAK,CAACC,OAAO,GAAG,MAAM;MAC3B0gB,IAAI,CAAC3gB,KAAK,CAAC4gB,cAAc,GAAG,eAAe;MAC3CD,IAAI,CAAC3gB,KAAK,CAACU,KAAK,GAAG,MAAM;;MAEzB;MACA,IAAI4f,oBAAoB,CAAC3I,UAAU,EAAE;QACjC2I,oBAAoB,CAAC3I,UAAU,CAACC,YAAY,CAAC+I,IAAI,EAAEL,oBAAoB,CAAC;;QAExE;QACA,OAAOA,oBAAoB,CAACtf,UAAU,EAAE;UACpC2f,IAAI,CAAC/f,WAAW,CAAC0f,oBAAoB,CAACtf,UAAU,CAAC;QACrD;;QAEA;QACA,IAAIyf,mBAAmB,IAAI,CAACE,IAAI,CAAC9a,QAAQ,CAAC4a,mBAAmB,CAAC,EAAE;UAC5D,IAAMI,oBAAoB,GAAG/hB,QAAQ,CAACiE,aAAa,CAAC,kCAAkC,CAAC;UACvF,IAAI8d,oBAAoB,EAAE;YACtBF,IAAI,CAAC5f,YAAY,CAAC8f,oBAAoB,EAAEF,IAAI,CAAC3f,UAAU,CAAC;UAC5D;QACJ;QAEA9K,+CAAK,CAACY,GAAG,CAAC,4DAA4D,EAAE,IAAI,EAAE,CAAC,CAAC;MACpF;;MAEA;MACA6pB,IAAI,CAAC1f,gBAAgB,CAAC,QAAQ,EAAE,UAACpD,KAAK,EAAK;QACvCA,KAAK,CAACsf,cAAc,CAAC,CAAC;QACtBja,MAAI,CAAC4d,gBAAgB,CAAC,CAAC;QACvB5qB,+CAAK,CAACY,GAAG,CAAC,mCAAmC,EAAE,IAAI,EAAE,CAAC,CAAC;MAC3D,CAAC,CAAC;;MAEF;MACA,IAAI4pB,YAAY,EAAE;QACdA,YAAY,CAAC/mB,IAAI,GAAG,QAAQ,CAAC,CAAC;;QAE9B;QACA+mB,YAAY,CAACzf,gBAAgB,CAAC,OAAO,EAAE,UAACpD,KAAK,EAAK;UAC9CA,KAAK,CAACsf,cAAc,CAAC,CAAC;UACtBtf,KAAK,CAACuf,eAAe,CAAC,CAAC;;UAEvB;UACA;UACAlnB,+CAAK,CAACY,GAAG,CAAC,+EAA+E,EAAE,IAAI,EAAE,CAAC,CAAC;QACvG,CAAC,CAAC;MACN;;MAEA;MACAuoB,WAAW,CAACpe,gBAAgB,CAAC,OAAO,EAAE,UAACpD,KAAK,EAAK;QAC7CA,KAAK,CAACsf,cAAc,CAAC,CAAC;QACtB;QACA,IAAIkC,WAAW,CAACsB,IAAI,EAAE;UAClBtB,WAAW,CAACsB,IAAI,CAAC/C,aAAa,CAAC,IAAImD,KAAK,CAAC,QAAQ,CAAC,CAAC;QACvD,CAAC,MAAM;UACH7d,MAAI,CAAC4d,gBAAgB,CAAC,CAAC;QAC3B;QACA5qB,+CAAK,CAACY,GAAG,CAAC,wCAAwC,EAAE,IAAI,EAAE,CAAC,CAAC;MAChE,CAAC,CAAC;IACN;;IAEA;AACJ;AACA;EAFI;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAkqB,gBAAgBA,CAAA,EAAG;MACf;MACA,IAAME,eAAe,GAAG,IAAI,CAACC,wBAAwB,CAAC,CAAC;MAEvD,IAAID,eAAe,GAAG,CAAC,EAAE;QACrB,IAAI,CAACE,iBAAiB,CAACF,eAAe,CAAC;MAC3C,CAAC,MAAM;QACH;QACA,IAAM5hB,YAAY,GAAG,IAAI,CAAClH,UAAU,CAACwc,eAAe,CAAC,CAAC;QACtD,IAAMf,SAAS,GAAGvU,YAAY,CAACuU,SAAS,IAAI,EAAE;QAC9C,IAAMC,YAAY,GAAGxU,YAAY,CAACwU,YAAY,IAAI,EAAE;;QAEpD;QACA;QACA,IAAI,CAACD,SAAS,IAAI,CAACC,YAAY,EAAE;UAC7B;UACA1d,+CAAK,CAACY,GAAG,CAAC,yEAAyE,EAAE,IAAI,EAAE,CAAC,CAAC;UAC7F,IAAI,CAACyc,YAAY,CAAC6B,gBAAgB,CAAC,WAAW,CAAC;QACnD,CAAC,MAAM;UACH;UACAlf,+CAAK,CAACY,GAAG,CAAC,oEAAoE,EAAE,IAAI,EAAE,CAAC,CAAC;UACxF,IAAI,CAACyc,YAAY,CAAC6B,gBAAgB,CAAC,IAAI,CAAC6K,YAAY,CAAC,CAAC,CAAC;QAC3D;MACJ;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAtpB,GAAA;IAAAC,KAAA,EAIA,SAAAqqB,wBAAwBA,CAAA,EAAG;MACvB,IAAM5d,cAAc,GAAG,IAAI,CAACnL,UAAU,CAAC1B,YAAY,CAACQ,MAAM,CAACsM,MAAM,CAAC,UAAAvI,CAAC;QAAA,OAAIA,CAAC,CAACS,QAAQ;MAAA,EAAC;MAClF,IAAMyB,UAAU,GAAG,IAAI,CAAC/E,UAAU,CAAC1B,YAAY,CAACyG,UAAU,IAAI,CAAC,CAAC;MAChE,OAAOoG,cAAc,CAACpM,MAAM,GAAGsQ,MAAM,CAACC,IAAI,CAACvK,UAAU,CAAC,CAAChG,MAAM;IACjE;;IAEA;AACJ;AACA;AACA;EAHI;IAAAN,GAAA;IAAAC,KAAA,EAIA,SAAAsqB,iBAAiBA,CAACF,eAAe,EAAE;MAAA,IAAAvZ,MAAA;MAC/B;MACA,IAAM0Z,YAAY,GAAG,IAAI,CAACjpB,UAAU,CAACqkB,SAAS,CAAC,CAAC,CAAC4E,YAAY,IAAI,CAAC,CAAC;;MAEnE;MACA,IAAM1f,OAAO,GAAGqV,+EAAqB,CAACsK,qBAAqB,CAACJ,eAAe,EAAEG,YAAY,CAAC;;MAE1F;MACA,IAAI,CAAClK,YAAY,CAACoC,IAAI,CAACjjB,4DAAS,CAACghB,KAAK,CAACyI,cAAc,CAACrnB,IAAI,CAAC,CAAC,CAAC;;MAE7D;MACAmJ,UAAU,CAAC,YAAM;QACb/E,qDAAQ,CAACsd,WAAW,CAAC9jB,4DAAS,CAACsiB,KAAK,CAAC2I,OAAO,CAAC7oB,IAAI,CAAC,CAAC,EAAEiJ,OAAO,EAAE,SAAS,EAAE;UACrEzC,SAAS,EAAE,EAAE,CAAC;QAClB,CAAC,CAAC;QACF9I,+CAAK,CAACY,GAAG,CAAC,wDAAwD,EAAE,IAAI,EAAE,CAAC,CAAC;MAChF,CAAC,EAAE,EAAE,CAAC;;MAEN;MACA6K,UAAU,CAAC,YAAM;QACb,IAAMwe,WAAW,GAAGrhB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACsiB,KAAK,CAACiH,YAAY,CAACnnB,IAAI,CAAC,CAAC,CAAC;QAChF,IAAM4nB,QAAQ,GAAGthB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACsiB,KAAK,CAACsH,SAAS,CAACxnB,IAAI,CAAC,CAAC,CAAC;;QAE1E;QACA,IAAI2nB,WAAW,EAAE;UACb;UACA,IAAMmB,cAAc,GAAGnB,WAAW,CAACzI,SAAS,CAAC,IAAI,CAAC;UAClDyI,WAAW,CAACxI,UAAU,CAACC,YAAY,CAAC0J,cAAc,EAAEnB,WAAW,CAAC;;UAEhE;UACAmB,cAAc,CAACrgB,gBAAgB,CAAC,OAAO,EAAE,YAAM;YAC3C/K,+CAAK,CAACY,GAAG,CAAC,4CAA4C,EAAE,IAAI,EAAE,CAAC,CAAC;;YAEhE;YACA2Q,MAAI,CAACwP,YAAY,CAAC2I,KAAK,CAACxpB,4DAAS,CAACghB,KAAK,CAACyI,cAAc,CAACrnB,IAAI,CAAC,CAAC,CAAC;;YAE9D;YACA,IAAMsnB,cAAc,GAAG1pB,4DAAS,CAACsiB,KAAK,CAACE,OAAO,CAACpgB,IAAI,CAAC,CAAC;YACrDtC,+CAAK,CAACY,GAAG,kDAAAuB,MAAA,CAAkDynB,cAAc,QAAK,IAAI,EAAE,CAAC,CAAC;YACtFrY,MAAI,CAACwP,YAAY,CAAC2I,KAAK,CAACE,cAAc,CAAC;;YAEvC;YACAne,UAAU,CAAC,YAAM;cACb8F,MAAI,CAACsY,yBAAyB,CAAC,CAAC;YACpC,CAAC,EAAE,GAAG,CAAC;UACX,CAAC,CAAC;QACN;;QAEA;QACA,IAAIK,QAAQ,EAAE;UACV;UACA,IAAMmB,WAAW,GAAGnB,QAAQ,CAAC1I,SAAS,CAAC,IAAI,CAAC;UAC5C0I,QAAQ,CAACzI,UAAU,CAACC,YAAY,CAAC2J,WAAW,EAAEnB,QAAQ,CAAC;;UAEvD;UACAmB,WAAW,CAACtgB,gBAAgB,CAAC,OAAO,EAAE,YAAM;YACxC/K,+CAAK,CAACY,GAAG,CAAC,gDAAgD,EAAE,IAAI,EAAE,CAAC,CAAC;YACpE2Q,MAAI,CAACwP,YAAY,CAAC2I,KAAK,CAACxpB,4DAAS,CAACghB,KAAK,CAACyI,cAAc,CAACrnB,IAAI,CAAC,CAAC,CAAC;YAC9DiP,MAAI,CAAC8L,YAAY,CAAC6B,gBAAgB,CAAC3N,MAAI,CAACwY,YAAY,CAAC,CAAC,CAAC;UAC3D,CAAC,CAAC;QACN;MACJ,CAAC,EAAE,EAAE,CAAC;IACV;;IAEA;AACJ;AACA;AACA;EAHI;IAAAtpB,GAAA;IAAAC,KAAA,EAIA,SAAAqpB,YAAYA,CAAA,EAAG;MAAA,IAAAuB,qBAAA;MACX,OAAO,EAAAA,qBAAA,OAAI,CAACnH,gBAAgB,cAAAmH,qBAAA,uBAArBA,qBAAA,CAAuB5qB,KAAK,KAAI,UAAU;IACrD;;IAEA;AACJ;AACA;AACA;EAHI;IAAAD,GAAA;IAAAC,KAAA,EAIA,SAAAmpB,yBAAyBA,CAAA,EAAG;MACxB7pB,+CAAK,CAACY,GAAG,CAAC,sDAAsD,EAAE,IAAI,EAAE,CAAC,CAAC;;MAE1E;MACA,IAAME,MAAM,GAAG,IAAI,CAACkB,UAAU,CAAC1B,YAAY,CAACQ,MAAM;MAClD,IAAMiG,UAAU,GAAG,IAAI,CAAC/E,UAAU,CAAC1B,YAAY,CAACyG,UAAU,IAAI,CAAC,CAAC;;MAEhE;MAAA,IAAA7D,SAAA,GAAAC,0BAAA,CACoBrC,MAAM;QAAAsC,KAAA;MAAA;QAA1B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA4B;UAAA,IAAjBoB,KAAK,GAAAvB,KAAA,CAAA1C,KAAA;UACZ,IAAIiE,KAAK,CAACW,QAAQ,IAAI,CAACyB,UAAU,CAACpC,KAAK,CAACG,EAAE,CAAC,EAAE;YACzC;YACA,IAAMymB,UAAU,GAAGzqB,MAAM,CAAC0qB,OAAO,CAAC7mB,KAAK,CAAC;YACxC,IAAI,IAAI,CAAC3C,UAAU,CAAC+O,aAAa,EAAE;cAC/B;cACA,IAAI,CAAC/O,UAAU,CAAC+O,aAAa,CAAC0a,eAAe,CAACF,UAAU,CAAC;;cAEzD;cACA,IAAMG,YAAY,GAAG9iB,QAAQ,CAACiE,aAAa,qBAAA1K,MAAA,CAAoBwC,KAAK,CAACG,EAAE,QAAI,CAAC;cAC5E,IAAI4mB,YAAY,EAAE;gBACdzH,mEAAe,CAAC0H,kBAAkB,CAACD,YAAY,EAAE,IAAI,CAAC;cAC1D;cAEA1rB,+CAAK,CAACY,GAAG,oDAAAuB,MAAA,CAAoDwC,KAAK,CAACG,EAAE,GAAI,IAAI,EAAE,CAAC,CAAC;cACjF,OAAO,IAAI;YACf;UACJ;QACJ;MAAC,SAAAlB,GAAA;QAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;MAAA;QAAAV,SAAA,CAAAY,CAAA;MAAA;MAED9D,+CAAK,CAACY,GAAG,CAAC,kDAAkD,EAAE,IAAI,EAAE,CAAC,CAAC;MACtE,OAAO,KAAK;IAChB;;IAEA;AACJ;AACA;AACA;EAHI;IAAAH,GAAA;IAAAC,KAAA,EAIA,SAAAkrB,sBAAsBA,CAAA,EAAG;MAAA,IAAAC,MAAA;MACrB7rB,+CAAK,CAACY,GAAG,CAAC,0EAA0E,EAAE,IAAI,EAAE,CAAC,CAAC;;MAE9F;MACAZ,+CAAK,CAACY,GAAG,CAAC,iEAAiE,EAAE,IAAI,CAACI,kBAAkB,EAAE,CAAC,CAAC;MACxG,IAAM8qB,mBAAmB,GAAG,IAAI,CAAC9qB,kBAAkB,CAACI,GAAG,CAAC,iBAAiB,EAAE,mBAAmB,CAAC;MAC/F,IAAM2qB,sBAAsB,GAAG,IAAI,CAAC/qB,kBAAkB,CAACI,GAAG,CAAC,wBAAwB,EAAE,sCAAsC,CAAC;;MAE5H;MACA,IAAMgpB,oBAAoB,GAAGxhB,QAAQ,CAACiE,aAAa,CAAC3M,4DAAS,CAACghB,KAAK,CAACmJ,gBAAgB,CAACC,QAAQ,CAAC,CAAC,CAAC;MAEhG,IAAI,CAACF,oBAAoB,EAAE;QACvBpqB,+CAAK,CAACiU,KAAK,CAAC,4DAA4D,EAAE,IAAI,EAAE,CAAC,CAAC;QAClF;MACJ;;MAEA;MACAmW,oBAAoB,CAACloB,SAAS,GAAG,EAAE;;MAEnC;MACA,IAAM8pB,kBAAkB,GAAGpjB,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC3DmjB,kBAAkB,CAAClnB,EAAE,GAAG5E,4DAAS,CAACghB,KAAK,CAACG,qBAAqB,CAAC/e,IAAI,CAAC,CAAC;MACpE0pB,kBAAkB,CAACljB,SAAS,MAAA3G,MAAA,CAAMjC,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC,CAAE;MAC9G0pB,kBAAkB,CAACniB,KAAK,GAAGkiB,sBAAsB;;MAEjD;MACA,IAAME,gBAAgB,GAAGvlB,qDAAQ,CAACkb,WAAW,CAAC,UAAU,EAAE;QAAEnX,OAAO,EAAEvK,4DAAS,CAACqJ,OAAO,CAAC2f,YAAY,CAAC5mB,IAAI,CAAC;MAAE,CAAC,CAAC;MAC7G0pB,kBAAkB,CAAC9pB,SAAS,MAAAC,MAAA,CAAM8pB,gBAAgB,OAAA9pB,MAAA,CAAI2pB,mBAAmB,CAAE;;MAE3E;MACA,IAAMI,eAAe,GAAGtjB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACrDqjB,eAAe,CAACpjB,SAAS,MAAA3G,MAAA,CAAMjC,4DAAS,CAACqJ,OAAO,CAACsZ,IAAI,CAACvgB,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACuZ,uBAAuB,CAACxgB,IAAI,CAAC,CAAC,WAAQ;MACxH4pB,eAAe,CAACpiB,KAAK,CAACU,KAAK,GAAG,MAAM;;MAEpC;MACA,IAAM2hB,MAAM,GAAGvjB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC5CsjB,MAAM,CAACriB,KAAK,CAACsiB,IAAI,GAAG,GAAG;MAEvBF,eAAe,CAACxhB,WAAW,CAACyhB,MAAM,CAAC;MACnCD,eAAe,CAACxhB,WAAW,CAACshB,kBAAkB,CAAC;MAC/C5B,oBAAoB,CAAC1f,WAAW,CAACwhB,eAAe,CAAC;;MAEjD;MACAF,kBAAkB,CAACjhB,gBAAgB,CAAC,OAAO,EAAE,UAACpD,KAAK,EAAK;QACpDA,KAAK,CAACsf,cAAc,CAAC,CAAC;;QAEtB;QACA4E,MAAI,CAACxO,YAAY,CAAC6B,gBAAgB,CAAC,WAAW,CAAC;QAE/Clf,+CAAK,CAACY,GAAG,CAAC,kFAAkF,EAAE,IAAI,EAAE,CAAC,CAAC;MAC1G,CAAC,CAAC;MAEFZ,+CAAK,CAACY,GAAG,CAAC,uDAAuD,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/E;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/1BqC;AACgB;AACR;AACF;AACoB;;AAEpE;AACA,IAAI0rB,QAAQ,GAAG,IAAI;;AAEnB;AACA;AACA;AACO,IAAMC,YAAY,0BAAAC,cAAA;EAarB;AACJ;AACA;AACA;EACI,SAAAD,aAAA,EAA0B;IAAA,IAAA9kB,KAAA;IAAA,IAAdwd,OAAO,GAAA/X,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,CAAC,CAAC;IAAA3M,eAAA,OAAAgsB,YAAA;IACpB9kB,KAAA,GAAAglB,UAAA,OAAAF,YAAA;;IAEA;IACA,IAAI,CAAC9kB,KAAA,CAAKilB,gBAAgB,CAACJ,QAAQ,CAAC,EAAE;MAClC,OAAAK,0BAAA,CAAAllB,KAAA;IACJ;IAEAA,KAAA,CAAKwd,OAAO,GAAA/T,aAAA;MACR0b,KAAK,EAAE,KAAK;MACZ3B,YAAY,EAAE,CAAC;IAAC,GACbhG,OAAO,CACb;IAEDxd,KAAA,CAAKolB,MAAM,GAAG,CAAC,CAAC;IAChBplB,KAAA,CAAKqlB,WAAW,GAAG,IAAI;IACvBrlB,KAAA,CAAKslB,WAAW,GAAG,KAAK;IAExB/sB,+CAAK,CAACY,GAAG,CAAC,2BAA2B,EAAE,IAAI,EAAE,CAAC,CAAC;IAAC,OAAA6G,KAAA;EACpD;;EAEA;AACJ;AACA;AACA;EAHIulB,SAAA,CAAAT,YAAA,EAAAC,cAAA;EAAA,OAAAhsB,YAAA,CAAA+rB,YAAA;IAAA9rB,GAAA;IAAAC,KAAA,EAIA,SAAAusB,UAAUA,CAAA,EAAG;MACT,IAAI;QACA,IAAI,IAAI,CAACF,WAAW,EAAE;UAClB/sB,+CAAK,CAACY,GAAG,CAAC,mCAAmC,EAAE,IAAI,EAAE,CAAC,CAAC;UACvD,OAAO,IAAI;QACf;QAEA,IAAMI,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;;QAE3D;QACA,IAAI,CAACisB,WAAW,CAAC;UACbpoB,EAAE,EAAE5E,4DAAS,CAACsiB,KAAK,CAAC2K,OAAO,CAAC7qB,IAAI,CAAC,CAAC;UAClCuH,KAAK,EAAE7I,kBAAkB,CAACI,GAAG,CAAC,cAAc,CAAC;UAC7CgsB,SAAS,EAAEltB,4DAAS,CAACsiB,KAAK,CAAC2I,OAAO,CAAC7oB,IAAI,CAAC,CAAC;UACzC+qB,YAAY,EAAEntB,4DAAS,CAACqJ,OAAO,CAAC+jB,SAAS,CAAChrB,IAAI,CAAC,CAAC;UAChDirB,aAAa,EAAE,CACX;YACIzoB,EAAE,EAAE5E,4DAAS,CAACsiB,KAAK,CAACiH,YAAY,CAACnnB,IAAI,CAAC,CAAC;YACvCkrB,IAAI,EAAExsB,kBAAkB,CAACI,GAAG,CAAC,mBAAmB,CAAC;YACjD,SAAOlB,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,GAAG,GAAG,GAAGpC,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC,GAAG,GAAG,GAAGpC,4DAAS,CAACqJ,OAAO,CAACkkB,YAAY,CAACnrB,IAAI,CAAC;UACvI,CAAC,EACD;YACIwC,EAAE,EAAE5E,4DAAS,CAACsiB,KAAK,CAACsH,SAAS,CAACxnB,IAAI,CAAC,CAAC;YACpCkrB,IAAI,EAAExsB,kBAAkB,CAACI,GAAG,CAAC,aAAa,CAAC;YAC3C,SAAOlB,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,GAAG,GAAG,GAAGpC,4DAAS,CAACqJ,OAAO,CAACof,cAAc,CAACrmB,IAAI,CAAC;UACzF,CAAC;QAET,CAAC,CAAC;;QAEF;QACA,IAAI,CAAC4qB,WAAW,CAAC;UACbpoB,EAAE,EAAE5E,4DAAS,CAACsiB,KAAK,CAACE,OAAO,CAACpgB,IAAI,CAAC,CAAC;UAClCuH,KAAK,EAAE,YAAY,GAAG3J,4DAAS,CAACsiB,KAAK,CAACC,gBAAgB,CAACngB,IAAI,CAAC,CAAC,GAAG,WAAW;UAC3E8qB,SAAS,EAAEltB,4DAAS,CAACsiB,KAAK,CAACG,kBAAkB,CAACrgB,IAAI,CAAC,CAAC;UACpD+qB,YAAY,EAAEntB,4DAAS,CAACsiB,KAAK,CAACkL,eAAe,CAACprB,IAAI,CAAC,CAAC;UACpDqrB,WAAW,EAAEztB,4DAAS,CAACsiB,KAAK,CAACoL,YAAY,CAACtrB,IAAI,CAAC,CAAC;UAChDurB,UAAU,EAAE,yBAAyB;UACrCvsB,UAAU,EAAE;QAChB,CAAC,CAAC;;QAEF;QACA,IAAI,CAAC4rB,WAAW,CAAC;UACbpoB,EAAE,EAAE5E,4DAAS,CAACghB,KAAK,CAACyI,cAAc,CAACrnB,IAAI,CAAC,CAAC;UACzCuH,KAAK,EAAE7I,kBAAkB,CAACI,GAAG,CAAC,qBAAqB,CAAC;UACpDgsB,SAAS,EAAEltB,4DAAS,CAACsiB,KAAK,CAAC2I,OAAO,CAAC7oB,IAAI,CAAC,CAAC;UACzC+qB,YAAY,EAAEntB,4DAAS,CAACqJ,OAAO,CAAC+jB,SAAS,CAAChrB,IAAI,CAAC,CAAC;UAChDirB,aAAa,EAAE,CACX;YACIzoB,EAAE,EAAE5E,4DAAS,CAACsiB,KAAK,CAACiH,YAAY,CAACnnB,IAAI,CAAC,CAAC;YACvCkrB,IAAI,EAAExsB,kBAAkB,CAACI,GAAG,CAAC,mBAAmB,CAAC;YACjD,SAAOlB,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,GAAG,GAAG,GAAGpC,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC,GAAG,GAAG,GAAGpC,4DAAS,CAACqJ,OAAO,CAACkkB,YAAY,CAACnrB,IAAI,CAAC;UACvI,CAAC,EACD;YACIwC,EAAE,EAAE5E,4DAAS,CAACsiB,KAAK,CAACsH,SAAS,CAACxnB,IAAI,CAAC,CAAC;YACpCkrB,IAAI,EAAExsB,kBAAkB,CAACI,GAAG,CAAC,aAAa,CAAC;YAC3C,SAAOlB,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,GAAG,GAAG,GAAGpC,4DAAS,CAACqJ,OAAO,CAACof,cAAc,CAACrmB,IAAI,CAAC;UACzF,CAAC;QAET,CAAC,CAAC;;QAEF;QACA,IAAI,CAACwrB,oBAAoB,CAAC,CAAC;QAE3B,IAAI,CAACf,WAAW,GAAG,IAAI;QACvB/sB,+CAAK,CAACY,GAAG,CAAC,kCAAkC,EAAE,IAAI,EAAE,CAAC,CAAC;QACtD,OAAO,IAAI;MACf,CAAC,CAAC,OAAOqT,KAAK,EAAE;QACZjU,+CAAK,CAACiU,KAAK,CAAC,yCAAyC,EAAEA,KAAK,EAAE,CAAC,CAAC;QAChE,OAAO,KAAK;MAChB;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAdI;IAAAxT,GAAA;IAAAC,KAAA,EAeA,SAAAwsB,WAAWA,CAAC9G,MAAM,EAAE;MAChB,IAAI;QACA,IAAM2H,OAAO,GAAG3H,MAAM,CAACthB,EAAE;;QAEzB;QACA,IAAI8D,QAAQ,CAAC+V,cAAc,CAACoP,OAAO,CAAC,EAAE;UAClC/tB,+CAAK,CAACY,GAAG,wBAAAuB,MAAA,CAAwB4rB,OAAO,6BAA0B,IAAI,EAAE,CAAC,CAAC;UAC1E,OAAO,IAAI;QACf;;QAEA;QACA,IAAMJ,WAAW,GAAGvH,MAAM,CAACuH,WAAW,IAAIztB,4DAAS,CAACsiB,KAAK,CAACwL,MAAM,CAAC1rB,IAAI,CAAC,CAAC;;QAEvE;QACA,IAAI2rB,SAAS,kCAAA9rB,MAAA,CACE4rB,OAAO,iBAAA5rB,MAAA,CAAYjC,4DAAS,CAACsiB,KAAK,CAAC0L,SAAS,CAAC5rB,IAAI,CAAC,CAAC,wBAAAH,MAAA,CAAwBikB,MAAM,CAACyH,UAAU,GAAG,GAAG,GAAGzH,MAAM,CAACyH,UAAU,GAAG,EAAE,gCAA0B;;QAEpK;QACA,IAAIzH,MAAM,CAAC+H,IAAI,EAAE;UACb9c,MAAM,CAACoD,OAAO,CAAC2R,MAAM,CAAC+H,IAAI,CAAC,CAAC7gB,OAAO,CAAC,UAAAoH,IAAA,EAAkB;YAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;cAAhBjU,GAAG,GAAAkU,KAAA;cAAEjU,KAAK,GAAAiU,KAAA;YAC5CsZ,SAAS,QAAA9rB,MAAA,CAAQ1B,GAAG,SAAA0B,MAAA,CAAKzB,KAAK,OAAG;UACrC,CAAC,CAAC;QACN;QAEAutB,SAAS,2CAAA9rB,MAAA,CACajC,4DAAS,CAACsiB,KAAK,CAAC4L,OAAO,CAAC9rB,IAAI,CAAC,CAAC,gDAAAH,MAAA,CAC1BwrB,WAAW,mDAAAxrB,MAAA,CACRjC,4DAAS,CAACsiB,KAAK,CAAC6L,KAAK,CAAC/rB,IAAI,CAAC,CAAC,SAAAH,MAAA,CAAKikB,MAAM,CAACvc,KAAK,yDAAA1H,MAAA,CACzCjC,4DAAS,CAACsiB,KAAK,CAAC8L,KAAK,CAAChsB,IAAI,CAAC,CAAC,wDAC1C;;QAEnB;QACA,IAAI8jB,MAAM,CAACgH,SAAS,EAAE;UAClBa,SAAS,iBAAA9rB,MAAA,CAAgBikB,MAAM,CAACgH,SAAS,iBAAAjrB,MAAA,CAAYikB,MAAM,CAACiH,YAAY,IAAI,EAAE,cAAU;QAC5F,CAAC,MAAM;UACHY,SAAS,oBAAA9rB,MAAA,CAAmBikB,MAAM,CAACiH,YAAY,IAAI,EAAE,cAAU;QACnE;;QAEA;QACA,IAAIjH,MAAM,CAACmH,aAAa,IAAInH,MAAM,CAACmH,aAAa,CAACxsB,MAAM,GAAG,CAAC,EAAE;UACzDktB,SAAS,oBAAA9rB,MAAA,CAAmBjC,4DAAS,CAACsiB,KAAK,CAAC+L,MAAM,CAACjsB,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACsZ,IAAI,CAACvgB,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACuZ,uBAAuB,CAACxgB,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAAC+jB,SAAS,CAAChrB,IAAI,CAAC,CAAC,QAAI;UACxL8jB,MAAM,CAACmH,aAAa,CAACjgB,OAAO,CAAC,UAAArC,MAAM,EAAI;YACnC;YACA,IAAMujB,aAAa,GAAGvjB,MAAM,aAANA,MAAM,uBAANA,MAAM,SAAO,CAAC6E,KAAK,CAAC,GAAG,CAAC,CAAC2e,QAAQ,CAACvuB,4DAAS,CAACsiB,KAAK,CAAC8L,KAAK,CAAChsB,IAAI,CAAC,CAAC,CAAC;;YAErF;YACA,IAAIosB,QAAQ,GAAG,eAAe,CAAC,CAAC;;YAEhC,IAAIzjB,MAAM,SAAM,EAAE;cACd,IAAM0jB,UAAU,GAAG1jB,MAAM,SAAM,CAAC6E,KAAK,CAAC,GAAG,CAAC;;cAE1C;cACA,IAAI6e,UAAU,CAACC,IAAI,CAAC,UAAAroB,GAAG;gBAAA,OAAIA,GAAG,CAACkoB,QAAQ,CAAC,SAAS,CAAC;cAAA,EAAC,EAAE;gBACjDC,QAAQ,GAAG,cAAc;cAC7B,CAAC,MAAM,IAAIC,UAAU,CAACC,IAAI,CAAC,UAAAroB,GAAG;gBAAA,OAAIA,GAAG,CAACkoB,QAAQ,CAAC,SAAS,CAAC;cAAA,EAAC,EAAE;gBACxDC,QAAQ,GAAG,cAAc;cAC7B,CAAC,MAAM,IAAIC,UAAU,CAACC,IAAI,CAAC,UAAAroB,GAAG;gBAAA,OAAIA,GAAG,CAACkoB,QAAQ,CAAC,QAAQ,CAAC;cAAA,EAAC,EAAE;gBACvDC,QAAQ,GAAG,sBAAsB;cACrC,CAAC,MAAM,IAAIC,UAAU,CAACC,IAAI,CAAC,UAAAroB,GAAG;gBAAA,OAAIA,GAAG,CAACkoB,QAAQ,CAAC,SAAS,CAAC;cAAA,EAAC,EAAE;gBACxDC,QAAQ,GAAG,oBAAoB;cACnC,CAAC,MAAM,IAAIC,UAAU,CAACC,IAAI,CAAC,UAAAroB,GAAG;gBAAA,OAAIA,GAAG,CAACkoB,QAAQ,CAAC,MAAM,CAAC;cAAA,EAAC,EAAE;gBACrDC,QAAQ,GAAG,aAAa;cAC5B;YACJ;;YAEA;YACA,IAAIzjB,MAAM,CAACnG,EAAE,EAAE;cACX,IAAImG,MAAM,CAACnG,EAAE,CAACsd,WAAW,CAAC,CAAC,CAACqM,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC1CC,QAAQ,GAAG,MAAM;cACrB,CAAC,MAAM,IAAIzjB,MAAM,CAACnG,EAAE,KAAK5E,4DAAS,CAACsiB,KAAK,CAACiH,YAAY,CAACnnB,IAAI,CAAC,CAAC,EAAE;gBAC1DosB,QAAQ,GAAG,eAAe;cAC9B,CAAC,MAAM,IAAIzjB,MAAM,CAACnG,EAAE,KAAK5E,4DAAS,CAACsiB,KAAK,CAACsH,SAAS,CAACxnB,IAAI,CAAC,CAAC,EAAE;gBACvDosB,QAAQ,GAAG,oBAAoB;cACnC;YACJ;;YAEA;YACA,IAAI5F,QAAQ,GAAG,EAAE;YACjB,IAAI,CAAC0F,aAAa,EAAE;cAChB1F,QAAQ,GAAGpiB,qDAAQ,CAACkb,WAAW,CAAC8M,QAAQ,EAAE;gBAAEjkB,OAAO,EAAEvK,4DAAS,CAACqJ,OAAO,CAACkkB,YAAY,CAACnrB,IAAI,CAAC;cAAE,CAAC,CAAC;YACjG;YAEA2rB,SAAS,oBAAA9rB,MAAA,CAAmB8I,MAAM,CAACnG,EAAE,iBAAA3C,MAAA,CAAY8I,MAAM,SAAM,IAAI/K,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,GAAG,GAAG,GAAGpC,4DAAS,CAACqJ,OAAO,CAACG,gBAAgB,CAACpH,IAAI,CAAC,CAAC,OAAG;;YAErJ;YACA,IAAI2I,MAAM,CAACiK,IAAI,EAAE;cACb7D,MAAM,CAACoD,OAAO,CAACxJ,MAAM,CAACiK,IAAI,CAAC,CAAC5H,OAAO,CAAC,UAAAuH,KAAA,EAAkB;gBAAA,IAAAC,KAAA,GAAAF,cAAA,CAAAC,KAAA;kBAAhBpU,GAAG,GAAAqU,KAAA;kBAAEpU,KAAK,GAAAoU,KAAA;gBAC5CmZ,SAAS,aAAA9rB,MAAA,CAAa1B,GAAG,SAAA0B,MAAA,CAAKzB,KAAK,OAAG;cAC1C,CAAC,CAAC;YACN;;YAEA;YACA,IAAI8tB,aAAa,IAAI,CAACvjB,MAAM,CAACuiB,IAAI,EAAE;cAC/B;cACAS,SAAS,gBAAgB;YAC7B,CAAC,MAAM;cACH;cACAA,SAAS,QAAA9rB,MAAA,CAAQ2mB,QAAQ,YAAA3mB,MAAA,CAAS8I,MAAM,CAACuiB,IAAI,IAAI,EAAE,qBAAkB;YACzE;UACJ,CAAC,CAAC;UACFS,SAAS,YAAY;QACzB;;QAEA;QACAA,SAAS,wEAGR;QAED,IAAI,CAACY,aAAa,CAACd,OAAO,EAAEE,SAAS,CAAC;QACtC,IAAI,CAACpB,MAAM,CAACkB,OAAO,CAAC,GAAG;UACnB9f,OAAO,EAAErF,QAAQ,CAAC+V,cAAc,CAACoP,OAAO,CAAC;UACzCe,MAAM,EAAE,KAAK;UACb1I,MAAM,EAAEA;QACZ,CAAC;;QAED;QACA,IAAIA,MAAM,CAAC9kB,UAAU,EAAE;UACnB,IAAMytB,YAAY,GAAGnmB,QAAQ,CAAC+V,cAAc,CAACoP,OAAO,CAAC;UACrD,IAAIgB,YAAY,EAAE;YACd,IAAI,CAACC,iBAAiB,CAACD,YAAY,CAAC;UACxC;QACJ;;QAEA;QACA,IAAI3I,MAAM,CAAC6I,MAAM,EAAE;UACf,IAAMF,aAAY,GAAGnmB,QAAQ,CAAC+V,cAAc,CAACoP,OAAO,CAAC;UAErD1c,MAAM,CAACoD,OAAO,CAAC2R,MAAM,CAAC6I,MAAM,CAAC,CAAC3hB,OAAO,CAAC,UAAA0H,KAAA,EAAwB;YAAA,IAAAC,KAAA,GAAAL,cAAA,CAAAI,KAAA;cAAtBka,QAAQ,GAAAja,KAAA;cAAEga,MAAM,GAAAha,KAAA;YACpD,IAAItH,QAAQ;;YAEZ;YACA,IAAIuhB,QAAQ,KAAK,OAAO,EAAE;cACtBvhB,QAAQ,GAAG,CAACohB,aAAY,CAAC;YAC7B,CAAC,MAAM,IAAIG,QAAQ,KAAK,OAAO,EAAE;cAC7BvhB,QAAQ,GAAGqF,KAAK,CAACC,IAAI,CAAC8b,aAAY,CAACzmB,gBAAgB,CAACpI,4DAAS,CAACsiB,KAAK,CAAC8L,KAAK,CAAC,CAAC;YAC/E,CAAC,MAAM;cACH;cACA3gB,QAAQ,GAAGqF,KAAK,CAACC,IAAI,CAAC8b,aAAY,CAACzmB,gBAAgB,CAAC4mB,QAAQ,CAAC,CAAC;YAClE;;YAEA;YACAvhB,QAAQ,CAACL,OAAO,CAAC,UAAAW,OAAO,EAAI;cACxB,IAAIA,OAAO,EAAE;gBACToD,MAAM,CAACoD,OAAO,CAACwa,MAAM,CAAC,CAAC3hB,OAAO,CAAC,UAAA6hB,KAAA,EAA0B;kBAAA,IAAAC,KAAA,GAAAxa,cAAA,CAAAua,KAAA;oBAAxBE,SAAS,GAAAD,KAAA;oBAAEE,OAAO,GAAAF,KAAA;kBAC/CnhB,OAAO,CAAClD,gBAAgB,CAACskB,SAAS,EAAEC,OAAO,CAAC;kBAC5CtvB,+CAAK,CAACY,GAAG,2BAAAuB,MAAA,CAA2BktB,SAAS,gBAAAltB,MAAA,CAAa+sB,QAAQ,gBAAA/sB,MAAA,CAAa4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;gBACtG,CAAC,CAAC;cACN;YACJ,CAAC,CAAC;UACN,CAAC,CAAC;QACN;QAEA/tB,+CAAK,CAACY,GAAG,kCAAAuB,MAAA,CAAkC4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;QAC9D,OAAO,IAAI;MACf,CAAC,CAAC,OAAO9Z,KAAK,EAAE;QACZjU,+CAAK,CAACiU,KAAK,yCAAA9R,MAAA,CAAyCikB,MAAM,CAACthB,EAAE,GAAImP,KAAK,EAAE,CAAC,CAAC;QAC1E,OAAO,KAAK;MAChB;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAxT,GAAA;IAAAC,KAAA,EAMA,SAAA6uB,qBAAqBA,CAACtkB,MAAM,EAAE;MAC1B;;MAEA;MACA,IAAMukB,UAAU,GAAGvkB,MAAM,CAACuiB,IAAI,CAACpL,WAAW,CAAC,CAAC;MAE5C,IAAIoN,UAAU,CAACf,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,eAAe;MAC3D,IAAIe,UAAU,CAACf,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,OAAO,CAAC,CAAC;MAClD,IAAIe,UAAU,CAACf,QAAQ,CAAC,OAAO,CAAC,IAAIe,UAAU,CAACf,QAAQ,CAAC,QAAQ,CAAC,EAAE,OAAO,oBAAoB,CAAC,CAAC;MAChG,IAAIe,UAAU,CAACf,QAAQ,CAAC,SAAS,CAAC,IAAIe,UAAU,CAACf,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAO,cAAc;MACtF,IAAIe,UAAU,CAACf,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,MAAM;MAC9C,IAAIe,UAAU,CAACf,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,MAAM,CAAC,CAAC;MACpD,IAAIe,UAAU,CAACf,QAAQ,CAAC,QAAQ,CAAC,EAAE,OAAO,kBAAkB,CAAC,CAAC;MAC9D,IAAIe,UAAU,CAACf,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,cAAc,CAAC,CAAC;MACxD,IAAIe,UAAU,CAACf,QAAQ,CAAC,QAAQ,CAAC,EAAE,OAAO,sBAAsB,CAAC,CAAC;MAClE,IAAIe,UAAU,CAACf,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,KAAK,CAAC,CAAC;;MAE/C;MACA,IAAIxjB,MAAM,SAAM,EAAE;QACd,IAAM+d,WAAW,GAAG/d,MAAM,SAAM,CAACmX,WAAW,CAAC,CAAC;QAE9C,IAAI4G,WAAW,CAACyF,QAAQ,CAAC,SAAS,CAAC,EAAE,OAAO,OAAO;QACnD,IAAIzF,WAAW,CAACyF,QAAQ,CAAC,WAAW,CAAC,EAAE,OAAO,eAAe;QAC7D,IAAIzF,WAAW,CAACyF,QAAQ,CAAC,SAAS,CAAC,EAAE,OAAO,cAAc;QAC1D,IAAIzF,WAAW,CAACyF,QAAQ,CAAC,QAAQ,CAAC,EAAE,OAAO,sBAAsB;QACjE,IAAIzF,WAAW,CAACyF,QAAQ,CAAC,SAAS,CAAC,EAAE,OAAO,oBAAoB;QAChE,IAAIzF,WAAW,CAACyF,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,aAAa;MAC1D;;MAEA;MACA,OAAO,eAAe;IAC1B;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAhuB,GAAA;IAAAC,KAAA,EAMA,SAAAmuB,aAAaA,CAACd,OAAO,EAAEhqB,IAAI,EAAE;MACzB;MACA,IAAI0rB,KAAK,GAAG7mB,QAAQ,CAAC+V,cAAc,CAACoP,OAAO,CAAC;MAC5C,IAAI,CAAC0B,KAAK,EAAE;QACR;QACA,IAAMC,aAAa,GAAG9mB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;QACnD6mB,aAAa,CAACxtB,SAAS,GAAG6B,IAAI;QAC9B6E,QAAQ,CAACuM,IAAI,CAACzK,WAAW,CAACglB,aAAa,CAACC,iBAAiB,CAAC;MAC9D;;MAEA;MACA,IAAIC,QAAQ,GAAGhnB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACsiB,KAAK,CAACqN,QAAQ,CAACvtB,IAAI,CAAC,CAAC,CAAC;MACvE,IAAI,CAACstB,QAAQ,EAAE;QACXA,QAAQ,GAAGhnB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;QACxC+mB,QAAQ,CAAC9qB,EAAE,GAAG5E,4DAAS,CAACsiB,KAAK,CAACqN,QAAQ,CAACvtB,IAAI,CAAC,CAAC;QAC7CstB,QAAQ,CAAC9lB,KAAK,CAACC,OAAO,GAAG,MAAM;QAC/BnB,QAAQ,CAACuM,IAAI,CAACzK,WAAW,CAACklB,QAAQ,CAAC;MACvC;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAAnvB,GAAA;IAAAC,KAAA,EAIA,SAAAotB,oBAAoBA,CAAA,EAAG;MAAA,IAAA9iB,MAAA;MACnB;MACApC,QAAQ,CAACmC,gBAAgB,CAAC,OAAO,EAAE,UAACpD,KAAK,EAAK;QAC1C;QACA,IAAIA,KAAK,CAAC4hB,MAAM,CAACuG,OAAO,CAAC5vB,4DAAS,CAACsiB,KAAK,CAAC8L,KAAK,CAAC,EAAE;UAC7C,IAAMmB,KAAK,GAAG9nB,KAAK,CAAC4hB,MAAM,CAACC,OAAO,CAACtpB,4DAAS,CAACsiB,KAAK,CAAC0L,SAAS,CAAC;UAC7D,IAAIuB,KAAK,aAALA,KAAK,eAALA,KAAK,CAAE3qB,EAAE,EAAE;YACXkG,MAAI,CAAC0e,KAAK,CAAC+F,KAAK,CAAC3qB,EAAE,CAAC;UACxB;QACJ;MACJ,CAAC,CAAC;;MAEF;MACA,IAAM8qB,QAAQ,GAAGhnB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACsiB,KAAK,CAACqN,QAAQ,CAACvtB,IAAI,CAAC,CAAC,CAAC;MACzE,IAAIstB,QAAQ,EAAE;QACVA,QAAQ,CAAC7kB,gBAAgB,CAAC,OAAO,EAAE,YAAM;UACrC,IAAIC,MAAI,CAAC8hB,WAAW,EAAE;YAClB9hB,MAAI,CAAC0e,KAAK,CAAC1e,MAAI,CAAC8hB,WAAW,CAAC;UAChC;QACJ,CAAC,CAAC;MACN;;MAEA;MACAlkB,QAAQ,CAACmC,gBAAgB,CAAC,SAAS,EAAE,UAACpD,KAAK,EAAK;QAC5C,IAAIA,KAAK,CAAClH,GAAG,KAAK,QAAQ,IAAIuK,MAAI,CAAC8hB,WAAW,EAAE;UAC5C9hB,MAAI,CAAC0e,KAAK,CAAC1e,MAAI,CAAC8hB,WAAW,CAAC;QAChC;MACJ,CAAC,CAAC;IACN;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAArsB,GAAA;IAAAC,KAAA,EAMA,SAAAqvB,QAAQA,CAAChC,OAAO,EAAgB;MAAA,IAAd9I,OAAO,GAAA/X,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,CAAC,CAAC;MAC1B,IAAI;QACA,IAAMe,OAAO,GAAGrF,QAAQ,CAAC+V,cAAc,CAACoP,OAAO,CAAC;QAChD,IAAI,CAAC9f,OAAO,EAAE;UACVjO,+CAAK,CAAC0S,IAAI,iDAAAvQ,MAAA,CAAiD4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;UAC9E,OAAO,KAAK;QAChB;QAEA,IAAI,CAAClB,MAAM,CAACkB,OAAO,CAAC,GAAG;UACnB9f,OAAO,EAAEA,OAAO;UAChB6gB,MAAM,EAAE,KAAK;UACb7J,OAAO,EAAEA;QACb,CAAC;QAEDjlB,+CAAK,CAACY,GAAG,qCAAAuB,MAAA,CAAqC4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;QACjE,OAAO,IAAI;MACf,CAAC,CAAC,OAAO9Z,KAAK,EAAE;QACZjU,+CAAK,CAACiU,KAAK,4CAAA9R,MAAA,CAA4C4rB,OAAO,GAAI9Z,KAAK,EAAE,CAAC,CAAC;QAC3E,OAAO,KAAK;MAChB;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAxT,GAAA;IAAAC,KAAA,EAMA,SAAAspB,0BAA0BA,CAAC+D,OAAO,EAAEiC,QAAQ,EAAE;MAC1C,IAAI;QACA,IAAI,CAAC,IAAI,CAACnD,MAAM,CAACkB,OAAO,CAAC,EAAE;UACvB,IAAI,CAAClB,MAAM,CAACkB,OAAO,CAAC,GAAG;YACnB9f,OAAO,EAAErF,QAAQ,CAAC+V,cAAc,CAACoP,OAAO,CAAC;YACzCe,MAAM,EAAE,KAAK;YACb1I,MAAM,EAAE,CAAC;UACb,CAAC;QACL;QAEA,IAAI,CAAC,IAAI,CAACyG,MAAM,CAACkB,OAAO,CAAC,CAACkC,mBAAmB,EAAE;UAC3C,IAAI,CAACpD,MAAM,CAACkB,OAAO,CAAC,CAACkC,mBAAmB,GAAG,EAAE;QACjD;QAEA,IAAI,CAACpD,MAAM,CAACkB,OAAO,CAAC,CAACkC,mBAAmB,CAAC3d,IAAI,CAAC0d,QAAQ,CAAC;QACvDhwB,+CAAK,CAACY,GAAG,4DAAAuB,MAAA,CAA4D4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;QACxF,OAAO,IAAI;MACf,CAAC,CAAC,OAAO9Z,KAAK,EAAE;QACZjU,+CAAK,CAACiU,KAAK,mEAAA9R,MAAA,CAAmE4rB,OAAO,GAAI9Z,KAAK,EAAE,CAAC,CAAC;QAClG,OAAO,KAAK;MAChB;IACJ;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAxT,GAAA;IAAAC,KAAA,EAKA,SAAAyiB,IAAIA,CAAC4K,OAAO,EAAE;MACV,IAAI;QACA,IAAM0B,KAAK,GAAG,IAAI,CAAC5C,MAAM,CAACkB,OAAO,CAAC;QAClC,IAAI,CAAC0B,KAAK,EAAE;UACRzvB,+CAAK,CAAC0S,IAAI,oCAAAvQ,MAAA,CAAoC4rB,OAAO,wBAAqB,IAAI,EAAE,CAAC,CAAC;;UAElF;UACA,IAAM9f,OAAO,GAAGrF,QAAQ,CAAC+V,cAAc,CAACoP,OAAO,CAAC;UAChD,IAAI9f,OAAO,EAAE;YACTjO,+CAAK,CAACY,GAAG,mDAAAuB,MAAA,CAAmD4rB,OAAO,wBAAqB,IAAI,EAAE,CAAC,CAAC;YAChG,IAAI,CAACgC,QAAQ,CAAChC,OAAO,EAAE;cAAE9f,OAAO,EAAPA;YAAQ,CAAC,CAAC;YACnC,IAAI,CAACiiB,UAAU,CAACnC,OAAO,CAAC;YACxB,OAAO,IAAI;UACf;UAEA,OAAO,KAAK;QAChB;;QAEA;QACA,IAAI0B,KAAK,CAACQ,mBAAmB,IAAIR,KAAK,CAACQ,mBAAmB,CAAClvB,MAAM,GAAG,CAAC,EAAE;UACnEf,+CAAK,CAACY,GAAG,4BAAAuB,MAAA,CAA4BstB,KAAK,CAACQ,mBAAmB,CAAClvB,MAAM,uCAAAoB,MAAA,CAAoC4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;UAC5H0B,KAAK,CAACQ,mBAAmB,CAAC3iB,OAAO,CAAC,UAAA0iB,QAAQ,EAAI;YAC1C,IAAI;cACAA,QAAQ,CAAC,CAAC;YACd,CAAC,CAAC,OAAOpsB,GAAG,EAAE;cACV5D,+CAAK,CAACiU,KAAK,0DAAA9R,MAAA,CAA0D4rB,OAAO,GAAInqB,GAAG,EAAE,CAAC,CAAC;YAC3F;UACJ,CAAC,CAAC;QACN;QAEA,IAAI,CAACssB,UAAU,CAACnC,OAAO,CAAC;QACxB,OAAO,IAAI;MACf,CAAC,CAAC,OAAO9Z,KAAK,EAAE;QACZjU,+CAAK,CAACiU,KAAK,sCAAA9R,MAAA,CAAsC4rB,OAAO,QAAK9Z,KAAK,EAAE,CAAC,CAAC;QACtE,OAAO,KAAK;MAChB;IACJ;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAxT,GAAA;IAAAC,KAAA,EAKA,SAAAwvB,UAAUA,CAACnC,OAAO,EAAE;MAChB,IAAM0B,KAAK,GAAG,IAAI,CAAC5C,MAAM,CAACkB,OAAO,CAAC;MAClC,IAAI,CAAC0B,KAAK,EAAE;QACRzvB,+CAAK,CAAC0S,IAAI,wBAAAvQ,MAAA,CAAwB4rB,OAAO,iBAAc,IAAI,EAAE,CAAC,CAAC;QAC/D;MACJ;;MAEA;MACA,IAAI,CAACjB,WAAW,GAAGiB,OAAO;;MAE1B;MACA,IAAM6B,QAAQ,GAAGhnB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACsiB,KAAK,CAACqN,QAAQ,CAACvtB,IAAI,CAAC,CAAC,CAAC;MACzE,IAAIstB,QAAQ,EAAE;QACVA,QAAQ,CAAC9lB,KAAK,CAACC,OAAO,GAAG,OAAO;QAChC0B,UAAU,CAAC,YAAM;UACbmkB,QAAQ,CAAC9lB,KAAK,CAACiC,OAAO,GAAG,GAAG;QAChC,CAAC,EAAE,EAAE,CAAC;MACV;;MAEA;MACA;MACA0jB,KAAK,CAACxhB,OAAO,CAACnE,KAAK,CAACC,OAAO,GAAG,OAAO;MACrC0lB,KAAK,CAACxhB,OAAO,CAACnE,KAAK,CAACiC,OAAO,GAAG,GAAG;;MAEjC;MACA/L,+CAAK,CAACY,GAAG,gCAAAuB,MAAA,CAAgC4rB,OAAO,wBAAqB;QACjEgB,YAAY,EAAEU,KAAK,CAACxhB,OAAO,CAACnJ,EAAE;QAC9BqrB,aAAa,EAAEV,KAAK,CAACxhB,OAAO,CAACnE,KAAK,CAACC;MACvC,CAAC,EAAE,CAAC,CAAC;;MAEL;MACA0B,UAAU,CAAC,YAAM;QACbgkB,KAAK,CAACxhB,OAAO,CAACnE,KAAK,CAACiC,OAAO,GAAG,GAAG;QACjC/L,+CAAK,CAACY,GAAG,kCAAAuB,MAAA,CAAkC4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;MAClE,CAAC,EAAE,EAAE,CAAC;MAEN0B,KAAK,CAACX,MAAM,GAAG,IAAI;;MAEnB;MACA,IAAIf,OAAO,KAAK7tB,4DAAS,CAACsiB,KAAK,CAACE,OAAO,CAACpgB,IAAI,CAAC,CAAC,EAAE;QAC5C,IAAI,CAAC0sB,iBAAiB,CAACS,KAAK,CAACxhB,OAAO,CAAC;MACzC;;MAEA;MACArF,QAAQ,CAACuM,IAAI,CAACrL,KAAK,CAACsmB,QAAQ,GAAG,QAAQ;IAC3C;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA3vB,GAAA;IAAAC,KAAA,EAKA,SAAA2vB,UAAUA,CAACtC,OAAO,EAAE;MAAA,IAAA/gB,MAAA;MAChB,IAAMyiB,KAAK,GAAG,IAAI,CAAC5C,MAAM,CAACkB,OAAO,CAAC;MAClC,IAAI,CAAC0B,KAAK,EAAE;;MAEZ;MACAA,KAAK,CAACxhB,OAAO,CAACnE,KAAK,CAACiC,OAAO,GAAG,GAAG;;MAEjC;MACAN,UAAU,CAAC,YAAM;QACbgkB,KAAK,CAACxhB,OAAO,CAACnE,KAAK,CAACC,OAAO,GAAG,MAAM;QACpC0lB,KAAK,CAACX,MAAM,GAAG,KAAK;;QAEpB;QACA,IAAI9hB,MAAI,CAAC8f,WAAW,KAAKiB,OAAO,EAAE;UAC9B,IAAM6B,QAAQ,GAAGhnB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAACsiB,KAAK,CAACqN,QAAQ,CAACvtB,IAAI,CAAC,CAAC,CAAC;UACzE,IAAIstB,QAAQ,EAAE;YACVA,QAAQ,CAAC9lB,KAAK,CAACiC,OAAO,GAAG,GAAG;;YAE5B;YACAN,UAAU,CAAC,YAAM;cACbmkB,QAAQ,CAAC9lB,KAAK,CAACC,OAAO,GAAG,MAAM;YACnC,CAAC,EAAE,GAAG,CAAC;UACX;;UAEA;UACAnB,QAAQ,CAACuM,IAAI,CAACrL,KAAK,CAACsmB,QAAQ,GAAG,EAAE;UACjCpjB,MAAI,CAAC8f,WAAW,GAAG,IAAI;QAC3B;MACJ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACb;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAArsB,GAAA;IAAAC,KAAA,EAKA,SAAAgpB,KAAKA,CAACqE,OAAO,EAAE;MACX,IAAI;QACA,IAAI,CAAC,IAAI,CAAClB,MAAM,CAACkB,OAAO,CAAC,EAAE;UACvB/tB,+CAAK,CAAC0S,IAAI,oCAAAvQ,MAAA,CAAoC4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;UACjE,OAAO,KAAK;QAChB;QAEA,IAAI,CAACsC,UAAU,CAACtC,OAAO,CAAC;QAExB/tB,+CAAK,CAACY,GAAG,iCAAAuB,MAAA,CAAiC4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;QAC7D,OAAO,IAAI;MACf,CAAC,CAAC,OAAO9Z,KAAK,EAAE;QACZjU,+CAAK,CAACiU,KAAK,wCAAA9R,MAAA,CAAwC4rB,OAAO,GAAI9Z,KAAK,EAAE,CAAC,CAAC;QACvE,OAAO,KAAK;MAChB;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAxT,GAAA;IAAAC,KAAA,EAOA,SAAA6hB,UAAUA,CAACwL,OAAO,EAAE/N,OAAO,EAA0B;MAAA,IAAxBsQ,eAAe,GAAApjB,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,IAAI;MAC/C,IAAI;QACAlN,+CAAK,CAACY,GAAG,4CAAAuB,MAAA,CAA4C4rB,OAAO,GAAI;UAC5DwC,WAAW,EAAA9W,OAAA,CAASuG,OAAO;UAC3BwQ,aAAa,EAAE,OAAOxQ,OAAO,KAAK,QAAQ,GAAGA,OAAO,CAACjf,MAAM,GAAG,SAAS;UACvE0vB,cAAc,EAAE,OAAOzQ,OAAO,KAAK,QAAQ,GAAGA,OAAO,CAAC5P,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,gBAAgB;UAClGsgB,cAAc,EAAEJ;QACpB,CAAC,EAAE,CAAC,CAAC;QAEL,IAAMb,KAAK,GAAG,IAAI,CAAC5C,MAAM,CAACkB,OAAO,CAAC;QAClC,IAAI,CAAC0B,KAAK,EAAE;UACRzvB,+CAAK,CAACiU,KAAK,oCAAA9R,MAAA,CAAoC4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;UAClE,OAAO,KAAK;QAChB;;QAEA;QACA,IAAI9rB,SAAS;QACb,IAAIquB,eAAe,EAAE;UAAA,IAAAK,UAAA;UACjB3wB,+CAAK,CAACY,GAAG,+DAAAuB,MAAA,CAA+DmuB,eAAe,GAAI,IAAI,EAAE,CAAC,CAAC;UACnG;UACA,IAAI,CAACA,eAAe,CAACM,UAAU,CAAC,GAAG,CAAC,IAAI,CAACN,eAAe,CAACM,UAAU,CAAC,GAAG,CAAC,EAAE;YACtE3uB,SAAS,GAAG2G,QAAQ,CAAC+V,cAAc,CAAC2R,eAAe,CAAC;YACpDtwB,+CAAK,CAACY,GAAG,6CAAAuB,MAAA,CAA6CmuB,eAAe,eAAAnuB,MAAA,CAAY,CAAC,CAACF,SAAS,GAAI,IAAI,EAAE,CAAC,CAAC;UAC5G;;UAEA;UACA,IAAI,CAACA,SAAS,EAAE;YACZA,SAAS,GAAG2G,QAAQ,CAACiE,aAAa,CAACyjB,eAAe,CAAC;YACnDtwB,+CAAK,CAACY,GAAG,4CAAAuB,MAAA,CAA4CmuB,eAAe,eAAAnuB,MAAA,CAAY,CAAC,CAACF,SAAS,GAAI,IAAI,EAAE,CAAC,CAAC;UAC3G;;UAEA;UACAjC,+CAAK,CAACY,GAAG,2CAA2C;YAChDiwB,KAAK,EAAE,CAAC,CAAC5uB,SAAS;YAClB6C,EAAE,EAAE,EAAA6rB,UAAA,GAAA1uB,SAAS,cAAA0uB,UAAA,uBAATA,UAAA,CAAW7rB,EAAE,KAAI,MAAM;YAC3BkE,SAAS,EAAE/G,SAAS,GAAG+Q,KAAK,CAACC,IAAI,CAAChR,SAAS,CAAC+G,SAAS,CAAC,GAAG;UAC7D,CAAC,EAAE,CAAC,CAAC;QACT,CAAC,MAAM;UACH/G,SAAS,GAAGwtB,KAAK,CAACxhB,OAAO,CAACpB,aAAa,CAAC3M,4DAAS,CAACsiB,KAAK,CAAC4L,OAAO,CAAC;UAChEpuB,+CAAK,CAACY,GAAG,mDAAmD;YACxDiwB,KAAK,EAAE,CAAC,CAAC5uB,SAAS;YAClBitB,QAAQ,EAAEhvB,4DAAS,CAACsiB,KAAK,CAAC4L;UAC9B,CAAC,EAAE,CAAC,CAAC;UAEL,IAAI,CAACnsB,SAAS,EAAE;YACZjC,+CAAK,CAACiU,KAAK,gDAAA9R,MAAA,CAAgD4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;YAC9E,OAAO,KAAK;UAChB;QACJ;QAEA,IAAI,CAAC9rB,SAAS,EAAE;UACZjC,+CAAK,CAACiU,KAAK,kEAAA9R,MAAA,CAAkEmuB,eAAe,GAAI,IAAI,EAAE,CAAC,CAAC;UACxG,OAAO,KAAK;QAChB;;QAEA;QACA,IAAI,OAAOtQ,OAAO,KAAK,QAAQ,EAAE;UAC7BhgB,+CAAK,CAACY,GAAG,iDAAAuB,MAAA,CAAiD4rB,OAAO,GAAI;YACjEyC,aAAa,EAAExQ,OAAO,CAACjf,MAAM;YAC7B+vB,WAAW,EAAE9Q,OAAO,CAACyO,QAAQ,CAAC,MAAM,CAAC;YACrCxsB,SAAS,EAAEA,SAAS,CAAC6C,EAAE,IAAI7C,SAAS,CAAC6G;UACzC,CAAC,EAAE,CAAC,CAAC;UAEL7G,SAAS,CAACC,SAAS,GAAG8d,OAAO;;UAE7B;UACA,IAAM+Q,cAAc,GAAG9uB,SAAS,CAACqG,gBAAgB,CAAC,KAAK,CAAC,CAACvH,MAAM,GAAG,CAAC;UACnEf,+CAAK,CAACY,GAAG,4CAA4C;YACjDmwB,cAAc,EAAdA,cAAc;YACd7uB,SAAS,EAAED,SAAS,CAACC,SAAS,CAACkO,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG;UACvD,CAAC,EAAE,CAAC,CAAC;UAEL,IAAI4P,OAAO,CAACyO,QAAQ,CAAC,MAAM,CAAC,IAAI,CAACsC,cAAc,EAAE;YAC7C/wB,+CAAK,CAAC0S,IAAI,qFAAqF;cAC3Fse,eAAe,EAAE/uB,SAAS,CAACC,SAAS,CAACnB;YACzC,CAAC,EAAE,CAAC,CAAC;UACT;QACJ,CAAC,MAAM,IAAIif,OAAO,YAAYiR,OAAO,EAAE;UACnCjxB,+CAAK,CAACY,GAAG,oDAAAuB,MAAA,CAAoD4rB,OAAO,GAAI;YACpEmD,WAAW,EAAElR,OAAO,CAACmR,OAAO;YAC5BC,SAAS,EAAEpR,OAAO,CAAClb,EAAE,IAAI;UAC7B,CAAC,EAAE,CAAC,CAAC;UACL7C,SAAS,CAACC,SAAS,GAAG,EAAE;UACxBD,SAAS,CAACyI,WAAW,CAACsV,OAAO,CAAC;QAClC,CAAC,MAAM;UACHhgB,+CAAK,CAACiU,KAAK,yCAAA9R,MAAA,CAAAsX,OAAA,CAAgDuG,OAAO,IAAI,IAAI,EAAE,CAAC,CAAC;UAC9E,OAAO,KAAK;QAChB;QAEAhgB,+CAAK,CAACY,GAAG,0CAAAuB,MAAA,CAA0C4rB,OAAO,GAAI,IAAI,EAAE,CAAC,CAAC;QACtE,OAAO,IAAI;MACf,CAAC,CAAC,OAAO9Z,KAAK,EAAE;QACZjU,+CAAK,CAACiU,KAAK,0CAAA9R,MAAA,CAA0C4rB,OAAO,GAAI9Z,KAAK,EAAE,CAAC,CAAC;QACzE,OAAO,KAAK;MAChB;IACJ;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAxT,GAAA;IAAAC,KAAA,EAKA,SAAAsuB,iBAAiBA,CAACD,YAAY,EAAE;MAC5B,IAAI;QACA,IAAI,CAACA,YAAY,EAAE;UACf/uB,+CAAK,CAAC0S,IAAI,CAAC,yDAAyD,EAAE,IAAI,EAAE,CAAC,CAAC;UAC9E,OAAO,KAAK;QAChB;;QAEA;QACAqc,YAAY,CAAC/lB,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACsiB,KAAK,CAAC6O,UAAU,CAAC/uB,IAAI,CAAC,CAAC,CAAC;;QAE7D;QACA,IAAMgvB,YAAY,GAAGvC,YAAY,CAACliB,aAAa,CAAC3M,4DAAS,CAACsiB,KAAK,CAACwL,MAAM,CAAC,GACnEe,YAAY,CAACliB,aAAa,CAAC3M,4DAAS,CAACsiB,KAAK,CAACwL,MAAM,CAAC,CAACuD,YAAY,GAAG,CAAC;QAEvE,IAAMvR,OAAO,GAAG+O,YAAY,CAACliB,aAAa,CAAC3M,4DAAS,CAACsiB,KAAK,CAAC4L,OAAO,CAAC;QACnE,IAAIpO,OAAO,EAAE;UACTA,OAAO,CAAClW,KAAK,CAACM,MAAM,kBAAAjI,MAAA,CAAkBmvB,YAAY,QAAK;QAC3D;QAEAtxB,+CAAK,CAACY,GAAG,CAAC,4CAA4C,EAAE,IAAI,EAAE,CAAC,CAAC;QAChE,OAAO,IAAI;MACf,CAAC,CAAC,OAAOqT,KAAK,EAAE;QACZjU,+CAAK,CAACiU,KAAK,CAAC,6CAA6C,EAAEA,KAAK,EAAE,CAAC,CAAC;QACpE,OAAO,KAAK;MAChB;IACJ;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAxT,GAAA;IAAAC,KAAA,EAKA,SAAA8wB,eAAeA,CAACC,QAAQ,EAAE;MAAA,IAAAlgB,MAAA;MACtB,IAAMwc,OAAO,GAAG7tB,4DAAS,CAACsiB,KAAK,CAACkP,SAAS,CAACpvB,IAAI,CAAC,CAAC;MAChD;MACA,IAAMtB,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;;MAE3D;MACA,IAAI,CAAC,IAAI,CAAC4rB,MAAM,CAACkB,OAAO,CAAC,EAAE;QACvB,IAAI,CAACb,WAAW,CAAC;UACbpoB,EAAE,EAAEipB,OAAO;UACXlkB,KAAK,EAAE7I,kBAAkB,CAACI,GAAG,CAAC,UAAU,CAAC;UACzCgsB,SAAS,EAAEltB,4DAAS,CAACsiB,KAAK,CAACmP,YAAY,CAACrvB,IAAI,CAAC,CAAC;UAC9CurB,UAAU,EAAE3tB,4DAAS,CAACsiB,KAAK,CAACoP,YAAY,CAACtvB,IAAI,CAAC,CAAC;UAC/CqrB,WAAW,EAAEztB,4DAAS,CAACsiB,KAAK,CAACoL,YAAY,CAACtrB,IAAI,CAAC,CAAC;UAChDirB,aAAa,EAAE,CACX;YACI,YAAAprB,MAAA,CAAUjC,4DAAS,CAACsiB,KAAK,CAAC8L,KAAK,CAAChsB,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACG,gBAAgB,CAACpH,IAAI,CAAC,CAAC;UAC1H,CAAC;QAET,CAAC,CAAC;MACN;;MAEA;MACA,IAAMuvB,QAAQ,GAAG,IAAI,CAACC,WAAW,CAACL,QAAQ,CAAC;MAC3C,IAAMzR,OAAO,iCAAA7d,MAAA,CACKjC,4DAAS,CAAC6xB,IAAI,CAACvP,KAAK,CAACwP,MAAM,CAAC1vB,IAAI,CAAC,CAAC,sCAAAH,MAAA,CAChCjC,4DAAS,CAAC6xB,IAAI,CAACvP,KAAK,CAACyP,YAAY,CAAC3vB,IAAI,CAAC,CAAC,SAAAH,MAAA,CAAKnB,kBAAkB,CAACI,GAAG,CAAC,kBAAkB,CAAC,yCAAAe,MAAA,CACrFjC,4DAAS,CAAC6xB,IAAI,CAACvP,KAAK,CAAC0P,QAAQ,CAAC5vB,IAAI,CAAC,CAAC,8CAAAH,MAAA,CAC9BjC,4DAAS,CAAC6xB,IAAI,CAACvP,KAAK,CAAC2P,aAAa,CAAC7vB,IAAI,CAAC,CAAC,iBAAAH,MAAA,CAAYjC,4DAAS,CAAC6xB,IAAI,CAACvP,KAAK,CAAC2P,aAAa,CAAC7vB,IAAI,CAAC,CAAC,SAAAH,MAAA,CAAK0vB,QAAQ,wEAAA1vB,MAAA,CAEjHjC,4DAAS,CAAC6xB,IAAI,CAACvP,KAAK,CAAC4P,OAAO,CAAC9vB,IAAI,CAAC,CAAC,4CAAAH,MAAA,CAC/BjC,4DAAS,CAAC6xB,IAAI,CAACvP,KAAK,CAAChZ,MAAM,CAAClH,IAAI,CAAC,CAAC,iBAAAH,MAAA,CAAYjC,4DAAS,CAAC6xB,IAAI,CAACvP,KAAK,CAAChZ,MAAM,CAAClH,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC,mCAAAH,MAAA,CACtKuE,qDAAQ,CAACkb,WAAW,CAAC,MAAM,EAAE;QAAEnX,OAAO,EAAEvK,4DAAS,CAACqJ,OAAO,CAACkkB,YAAY,CAACnrB,IAAI,CAAC;MAAE,CAAC,CAAC,sCAAAH,MAAA,CAC1EnB,kBAAkB,CAACI,GAAG,CAAC,iBAAiB,CAAC,iGAIhE;;MAED;MACA,IAAI,CAACmhB,UAAU,CAACwL,OAAO,EAAE/N,OAAO,EAAE9f,4DAAS,CAACsiB,KAAK,CAACmP,YAAY,CAACrvB,IAAI,CAAC,CAAC,CAAC;;MAEtE;MACAmJ,UAAU,CAAC,YAAM;QACb,IAAM4mB,QAAQ,GAAGzpB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAAC6xB,IAAI,CAACvP,KAAK,CAAC2P,aAAa,CAAC7vB,IAAI,CAAC,CAAC,CAAC;QACnF,IAAMgwB,OAAO,GAAG1pB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAAC6xB,IAAI,CAACvP,KAAK,CAAChZ,MAAM,CAAClH,IAAI,CAAC,CAAC,CAAC;QAE3E,IAAI+vB,QAAQ,EAAE;UACV;UACAA,QAAQ,CAACtnB,gBAAgB,CAAC,OAAO,EAAE,YAAW;YAC1C,IAAI,CAACwnB,MAAM,CAAC,CAAC;UACjB,CAAC,CAAC;;UAEF;UACAF,QAAQ,CAACE,MAAM,CAAC,CAAC;QACrB;QAEA,IAAID,OAAO,IAAID,QAAQ,EAAE;UACrBC,OAAO,CAACvnB,gBAAgB,CAAC,OAAO,EAAE,YAAW;YAAA,IAAA8gB,MAAA;YACzC;YACAwG,QAAQ,CAACE,MAAM,CAAC,CAAC;YAEjB,IAAI;cAAA,IAAAC,oBAAA;cACA;cACA,IAAI/T,OAAO,GAAG,KAAK;cAEnB,KAAA+T,oBAAA,GAAIC,SAAS,CAACC,SAAS,cAAAF,oBAAA,eAAnBA,oBAAA,CAAqBG,SAAS,EAAE;gBAChCF,SAAS,CAACC,SAAS,CAACC,SAAS,CAACN,QAAQ,CAAC3xB,KAAK,CAAC,CACxCkZ,IAAI,CAAC,YAAM;kBACRiS,MAAI,CAAC+G,gBAAgB,CAACN,OAAO,CAAC;kBAC9BtyB,+CAAK,CAACY,GAAG,CAAC,uDAAuD,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC/E,CAAC,CAAC,SACI,CAAC,UAAAiyB,IAAI,EAAI;kBACX;kBACA;kBACApU,OAAO,GAAG7V,QAAQ,CAACkqB,WAAW,CAAC,MAAM,CAAC;kBACtC,IAAIrU,OAAO,EAAE;oBACToN,MAAI,CAAC+G,gBAAgB,CAACN,OAAO,CAAC;oBAC9BtyB,+CAAK,CAACY,GAAG,CAAC,8DAA8D,EAAE,IAAI,EAAE,CAAC,CAAC;kBACtF,CAAC,MAAM;oBACHirB,MAAI,CAACkH,gBAAgB,CAACT,OAAO,CAAC;oBAC9BtyB,+CAAK,CAAC0S,IAAI,CAAC,qDAAqD,EAAE,IAAI,EAAE,CAAC,CAAC;kBAC9E;gBACJ,CAAC,CAAC;cACV,CAAC,MAAM;gBACH;gBACA;gBACA+L,OAAO,GAAG7V,QAAQ,CAACkqB,WAAW,CAAC,MAAM,CAAC;gBACtC,IAAIrU,OAAO,EAAE;kBACT,IAAI,CAACmU,gBAAgB,CAACN,OAAO,CAAC;kBAC9BtyB,+CAAK,CAACY,GAAG,CAAC,qDAAqD,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC7E,CAAC,MAAM;kBACH,IAAI,CAACmyB,gBAAgB,CAACT,OAAO,CAAC;kBAC9BtyB,+CAAK,CAAC0S,IAAI,CAAC,4CAA4C,EAAE,IAAI,EAAE,CAAC,CAAC;gBACrE;cACJ;YACJ,CAAC,CAAC,OAAO9O,GAAG,EAAE;cACV,IAAI,CAACmvB,gBAAgB,CAACT,OAAO,CAAC;cAC9BtyB,+CAAK,CAACiU,KAAK,CAAC,2CAA2C,EAAErQ,GAAG,EAAE,CAAC,CAAC;YACpE;UACJ,CAAC,CAACke,IAAI,CAACvQ,MAAI,CAAC,CAAC,CAAC,CAAC;QACnB;MACJ,CAAC,EAAE,GAAG,CAAC;MAEP,OAAOwc,OAAO;IAClB;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAttB,GAAA;IAAAC,KAAA,EAKA,SAAAkyB,gBAAgBA,CAAC3nB,MAAM,EAAE;MACrB,IAAMjK,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;MAC3DgK,MAAM,CAAC/I,SAAS,GAAGwE,qDAAQ,CAACkb,WAAW,CAAC,cAAc,EAAE;QAAEnX,OAAO,EAAE,oBAAoB,GAAGvK,4DAAS,CAACqJ,OAAO,CAACkkB,YAAY,CAACnrB,IAAI,CAAC;MAAE,CAAC,CAAC,YAAAH,MAAA,CACrHnB,kBAAkB,CAACI,GAAG,CAAC,QAAQ,CAAC,YAAS;MACtD6J,MAAM,CAACjC,SAAS,CAACgD,MAAM,CAAC9L,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC,CAAC;MAChE2I,MAAM,CAACjC,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqJ,OAAO,CAAC8f,cAAc,CAAC/mB,IAAI,CAAC,CAAC,CAAC;MAE7DmJ,UAAU,CAAC,YAAM;QACbR,MAAM,CAAC/I,SAAS,GAAGwE,qDAAQ,CAACkb,WAAW,CAAC,MAAM,EAAE;UAAEnX,OAAO,EAAEvK,4DAAS,CAACqJ,OAAO,CAACkkB,YAAY,CAACnrB,IAAI,CAAC;QAAE,CAAC,CAAC,YAAAH,MAAA,CACtFnB,kBAAkB,CAACI,GAAG,CAAC,iBAAiB,CAAC,YAAS;QAC/D6J,MAAM,CAACjC,SAAS,CAACgD,MAAM,CAAC9L,4DAAS,CAACqJ,OAAO,CAAC8f,cAAc,CAAC/mB,IAAI,CAAC,CAAC,CAAC;QAChE2I,MAAM,CAACjC,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC,CAAC;MACjE,CAAC,EAAE,IAAI,CAAC;IACZ;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA7B,GAAA;IAAAC,KAAA,EAKA,SAAAqyB,gBAAgBA,CAAC9nB,MAAM,EAAE;MACrB,IAAMjK,kBAAkB,GAAGZ,yEAAkB,CAACa,WAAW,CAAC,CAAC;MAC3DgK,MAAM,CAAC/I,SAAS,GAAGwE,qDAAQ,CAACkb,WAAW,CAAC,sBAAsB,EAAE;QAAEnX,OAAO,EAAE,mBAAmB,GAAGvK,4DAAS,CAACqJ,OAAO,CAACkkB,YAAY,CAACnrB,IAAI,CAAC;MAAE,CAAC,CAAC,YAAAH,MAAA,CAC5HnB,kBAAkB,CAACI,GAAG,CAAC,YAAY,CAAC,YAAS;MAC1D6J,MAAM,CAACjC,SAAS,CAACgD,MAAM,CAAC9L,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC,CAAC;MAChE2I,MAAM,CAACjC,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqJ,OAAO,CAAC+f,aAAa,CAAChnB,IAAI,CAAC,CAAC,CAAC;MAE5DmJ,UAAU,CAAC,YAAM;QACbR,MAAM,CAAC/I,SAAS,GAAGwE,qDAAQ,CAACkb,WAAW,CAAC,MAAM,EAAE;UAAEnX,OAAO,EAAEvK,4DAAS,CAACqJ,OAAO,CAACkkB,YAAY,CAACnrB,IAAI,CAAC;QAAE,CAAC,CAAC,YAAAH,MAAA,CACtFnB,kBAAkB,CAACI,GAAG,CAAC,UAAU,CAAC,YAAS;QACxD6J,MAAM,CAACjC,SAAS,CAACgD,MAAM,CAAC9L,4DAAS,CAACqJ,OAAO,CAAC+f,aAAa,CAAChnB,IAAI,CAAC,CAAC,CAAC;QAC/D2I,MAAM,CAACjC,SAAS,CAACrF,GAAG,CAACzD,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC,CAAC;MACjE,CAAC,EAAE,IAAI,CAAC;IACZ;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA7B,GAAA;IAAAC,KAAA,EAMA,SAAAoxB,WAAWA,CAAC/tB,IAAI,EAAE;MACd,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;MAEpB,OAAOA,IAAI,CACNoC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACvBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;IAChC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA1F,GAAA;IAAAC,KAAA,EAOA,SAAAsyB,kBAAkBA,CAAC5M,MAAM,EAAEpG,OAAO,EAA0B;MAAA,IAAxBsQ,eAAe,GAAApjB,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,IAAI;MACtD,IAAI;QACA;QACA,IAAI,CAACkZ,MAAM,CAACthB,EAAE,EAAE;UACZshB,MAAM,CAACthB,EAAE,GAAG,qBAAqB,GAAGmuB,IAAI,CAACvxB,GAAG,CAAC,CAAC;QAClD;;QAEA;QACA,IAAI,CAACwrB,WAAW,CAAC9G,MAAM,CAAC;;QAExB;QACA,IAAIpG,OAAO,EAAE;UACT,IAAI,CAACuC,UAAU,CAAC6D,MAAM,CAACthB,EAAE,EAAEkb,OAAO,EAAEsQ,eAAe,IAAIlK,MAAM,CAACgH,SAAS,CAAC;QAC5E;;QAEA;QACA,IAAI,CAACjK,IAAI,CAACiD,MAAM,CAACthB,EAAE,CAAC;QAEpB,OAAOshB,MAAM,CAACthB,EAAE;MACpB,CAAC,CAAC,OAAOmP,KAAK,EAAE;QACZjU,+CAAK,CAACiU,KAAK,CAAC,gDAAgD,EAAEA,KAAK,EAAE,CAAC,CAAC;QACvE,OAAO,IAAI;MACf;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVI;IAAAxT,GAAA;IAAAC,KAAA,EAWA,SAAAwyB,uBAAuBA,CAACjO,OAAO,EAAE;MAAA,IAAAkO,MAAA;MAC7B,IAAMpF,OAAO,GAAG,0BAA0B,GAAGkF,IAAI,CAACvxB,GAAG,CAAC,CAAC;;MAEvD;MACA,IAAI,CAACwrB,WAAW,CAAC;QACbpoB,EAAE,EAAEipB,OAAO;QACXlkB,KAAK,EAAEob,OAAO,CAACpb,KAAK,IAAI,cAAc;QACtCujB,SAAS,EAAE,iCAAiC;QAC5CC,YAAY,EAAEntB,4DAAS,CAACqJ,OAAO,CAAC+jB,SAAS,CAAChrB,IAAI,CAAC,CAAC;QAChDirB,aAAa,EAAE,CACX;UACIzoB,EAAE,KAAA3C,MAAA,CAAK4rB,OAAO,gBAAa;UAC3BP,IAAI,EAAEvI,OAAO,CAACmO,UAAU,IAAI,QAAQ;UACpC,YAAAjxB,MAAA,CAAUjC,4DAAS,CAACsiB,KAAK,CAAC8L,KAAK,CAAChsB,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACG,gBAAgB,CAACpH,IAAI,CAAC,CAAC;QAC1H,CAAC,EACD;UACIwC,EAAE,KAAA3C,MAAA,CAAK4rB,OAAO,iBAAc;UAC5BP,IAAI,EAAEvI,OAAO,CAACoO,WAAW,IAAI,SAAS;UACtC,YAAAlxB,MAAA,CAAUjC,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC;QACxF,CAAC,CACJ;QACD2sB,MAAM,EAAAqE,eAAA,CAAAA,eAAA,SAAAnxB,MAAA,CACG4rB,OAAO,mBAAiB;UACzBwF,KAAK,EAAE,SAAPA,KAAKA,CAAA,EAAQ;YACT,IAAI,OAAOtO,OAAO,CAACuO,SAAS,KAAK,UAAU,EAAE;cACzCvO,OAAO,CAACuO,SAAS,CAAC,CAAC;YACvB;YACAL,MAAI,CAACzJ,KAAK,CAACqE,OAAO,CAAC;UACvB;QACJ,CAAC,OAAA5rB,MAAA,CACI4rB,OAAO,kBAAgB;UACxBwF,KAAK,EAAE,SAAPA,KAAKA,CAAA,EAAQ;YACT,IAAI,OAAOtO,OAAO,CAACwO,QAAQ,KAAK,UAAU,EAAE;cACxCxO,OAAO,CAACwO,QAAQ,CAAC,CAAC;YACtB;YACAN,MAAI,CAACzJ,KAAK,CAACqE,OAAO,CAAC;UACvB;QACJ,CAAC;MAET,CAAC,CAAC;;MAEF;MACA,IAAI,CAACxL,UAAU,CAACwL,OAAO,QAAA5rB,MAAA,CAAQ8iB,OAAO,CAAC1Z,OAAO,IAAI,EAAE,WAAQ,iCAAiC,CAAC;;MAE9F;MACA,IAAI,CAAC4X,IAAI,CAAC4K,OAAO,CAAC;MAElB,OAAOA,OAAO;IAClB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EATI;IAAAttB,GAAA;IAAAC,KAAA,EAUA,SAAAgzB,gBAAgBA,CAACzO,OAAO,EAAE;MAAA,IAAA0O,MAAA;MACtB,IAAM5F,OAAO,MAAA5rB,MAAA,CAAMjC,4DAAS,CAACsiB,KAAK,CAAC0L,SAAS,CAAC5rB,IAAI,CAAC,CAAC,cAAAH,MAAA,CAAW8wB,IAAI,CAACvxB,GAAG,CAAC,CAAC,CAAE;;MAE1E;MACA,IAAMkyB,UAAU,GAAG3O,OAAO,CAACxhB,IAAI,MAAAtB,MAAA,CACxBjC,4DAAS,CAACqJ,OAAO,CAACsqB,KAAK,OAAA1xB,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACuqB,YAAY,EAAA3xB,MAAA,CAAG8iB,OAAO,CAACxhB,IAAI,OAAAtB,MAAA,CACxEjC,4DAAS,CAACqJ,OAAO,CAACsqB,KAAK,OAAA1xB,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACwqB,UAAU,CAAE;;MAEhE;MACA,IAAI,CAAC7G,WAAW,CAAC;QACbpoB,EAAE,EAAEipB,OAAO;QACXlkB,KAAK,EAAEob,OAAO,CAACpb,KAAK,IAAI,OAAO;QAC/BujB,SAAS,KAAAjrB,MAAA,CAAKjC,4DAAS,CAACsiB,KAAK,CAAC0L,SAAS,CAAC5rB,IAAI,CAAC,CAAC,oBAAiB;QAC/D+qB,YAAY,EAAEntB,4DAAS,CAACqJ,OAAO,CAAC+jB,SAAS,CAAChrB,IAAI,CAAC,CAAC;QAChDirB,aAAa,EAAE,CACX;UACIzoB,EAAE,KAAA3C,MAAA,CAAK4rB,OAAO,YAAS;UACvBP,IAAI,EAAEvI,OAAO,CAACuK,UAAU,IAAI,IAAI;UAChC,YAAArtB,MAAA,CAAUjC,4DAAS,CAACsiB,KAAK,CAAC8L,KAAK,CAAChsB,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,OAAAH,MAAA,CAAIjC,4DAAS,CAACqJ,OAAO,CAACkf,cAAc,CAACnmB,IAAI,CAAC,CAAC;QACxH,CAAC,CACJ;QACD2sB,MAAM,EAAAqE,eAAA,SAAAnxB,MAAA,CACG4rB,OAAO,cAAY;UACpBwF,KAAK,EAAE,SAAPA,KAAKA,CAAG1vB,CAAC,EAAK;YACV,IAAI,OAAOohB,OAAO,CAAC+O,OAAO,KAAK,UAAU,EAAE;cACvC/O,OAAO,CAAC+O,OAAO,CAACnwB,CAAC,CAAC;YACtB;YACA8vB,MAAI,CAACjK,KAAK,CAACqE,OAAO,CAAC;UACvB;QACJ,CAAC;MAET,CAAC,CAAC;;MAEF;MACA,IAAMkG,YAAY,iCAAA9xB,MAAA,CACAyxB,UAAU,gCAAAzxB,MAAA,CAClB8iB,OAAO,CAAC1Z,OAAO,IAAI,EAAE,mCAE9B;;MAED;MACA,IAAI,CAACgX,UAAU,CAACwL,OAAO,EAAEkG,YAAY,KAAA9xB,MAAA,CAAKjC,4DAAS,CAACsiB,KAAK,CAAC0L,SAAS,CAAC5rB,IAAI,CAAC,CAAC,oBAAiB,CAAC;;MAE5F;MACA,IAAI,CAAC6gB,IAAI,CAAC4K,OAAO,CAAC;MAElB,OAAOA,OAAO;IAClB;;IAEA;AACJ;AACA;EAFI;IAAAttB,GAAA;IAAAC,KAAA,EAGA,SAAAwzB,OAAOA,CAAA,EAAG;MACN,IAAI;QACA;QACA,IAAI,IAAI,CAACpH,WAAW,EAAE;UAClB,IAAI,CAACpD,KAAK,CAAC,IAAI,CAACoD,WAAW,CAAC;QAChC;;QAEA;QACA,IAAI,CAACD,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAACC,WAAW,GAAG,IAAI;QAEvB9sB,+CAAK,CAACY,GAAG,CAAC,yBAAyB,EAAE,IAAI,EAAE,CAAC,CAAC;MACjD,CAAC,CAAC,OAAOqT,KAAK,EAAE;QACZjU,+CAAK,CAACiU,KAAK,CAAC,oCAAoC,EAAEA,KAAK,EAAE,CAAC,CAAC;MAC/D;IACJ;EAAC;IAAAxT,GAAA;IAAAC,KAAA;IAhjCD;AACJ;AACA;AACA;AACA;IACI,SAAOO,WAAWA,CAAA,EAAe;MAAA,IAAdgkB,OAAO,GAAA/X,SAAA,CAAAnM,MAAA,QAAAmM,SAAA,QAAAzI,SAAA,GAAAyI,SAAA,MAAG,CAAC,CAAC;MAC3B,IAAI,CAACof,QAAQ,EAAE;QACXA,QAAQ,GAAG,IAAIC,YAAY,CAACtH,OAAO,CAAC;MACxC;MACA,OAAOqH,QAAQ;IACnB;EAAC;AAAA,EAX6BD,+DAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZL;AACoB;AACZ;;AAElD;AACA;AACA;AACO,IAAM8H,iBAAiB;EAC1B;AACJ;AACA;EACI,SAAAA,kBAAY1B,SAAS,EAAE;IAAAlyB,eAAA,OAAA4zB,iBAAA;IACnB,IAAI,CAAC1B,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACzwB,UAAU,GAAGywB,SAAS,CAACzwB,UAAU;EAC1C;;EAEA;AACJ;AACA;AACA;EAHI,OAAAxB,YAAA,CAAA2zB,iBAAA;IAAA1zB,GAAA;IAAAC,KAAA,EAIA,SAAA0zB,uBAAuBA,CAAA,EAAG;MACtB;MACA,IAAMC,kBAAkB,GAAGrhB,KAAK,CAACC,IAAI,CAACrK,QAAQ,CAACN,gBAAgB,4CAE/D,CAAC,CAAC,CAAC8E,MAAM,CAAC,UAAAwI,EAAE;QAAA,OAAIA,EAAE,CAAC5M,SAAS,CAAC2G,QAAQ,CAACzP,4DAAS,CAACqF,MAAM,CAACC,UAAU,CAAClD,IAAI,CAAC,CAAC,CAAC;MAAA,EAAC;MAE1E,IAAI+xB,kBAAkB,CAACtzB,MAAM,KAAK,CAAC,EAAE;QACjCf,+CAAK,CAACY,GAAG,CAAC,iDAAiD,EAAE,IAAI,EAAE,CAAC,CAAC;QACrE,OAAO;UAAE0zB,kBAAkB,EAAE,EAAE;UAAEC,KAAK,EAAE;QAAE,CAAC;MAC/C;;MAEA;MACA,IAAMD,kBAAkB,GAAAjgB,kBAAA,CAAO,IAAIpR,GAAG,CAClCoxB,kBAAkB,CAAC3iB,GAAG,CAAC,UAAAkE,EAAE;QAAA,OAAIA,EAAE,CAACzK,YAAY,CAAC,eAAe,CAAC;MAAA,EACjE,CAAC,CAAC;MAEFnL,+CAAK,CAACY,GAAG,6BAAAuB,MAAA,CAA6BmyB,kBAAkB,CAACvzB,MAAM,yBAAsB,IAAI,EAAE,CAAC,CAAC;MAE7F,OAAO;QAAEuzB,kBAAkB,EAAlBA,kBAAkB;QAAEC,KAAK,EAAED,kBAAkB,CAACvzB;MAAO,CAAC;IACnE;;IAEA;AACJ;AACA;EAFI;IAAAN,GAAA;IAAAC,KAAA,EAGA,SAAA8zB,uBAAuBA,CAAA,EAAG;MACtB,IAAAC,qBAAA,GAAsC,IAAI,CAACL,uBAAuB,CAAC,CAAC;QAA5DE,kBAAkB,GAAAG,qBAAA,CAAlBH,kBAAkB;QAAEC,KAAK,GAAAE,qBAAA,CAALF,KAAK;MAEjC,IAAIA,KAAK,KAAK,CAAC,EAAE;QACbv0B,+CAAK,CAACY,GAAG,CAAC,+CAA+C,EAAE,IAAI,EAAE,CAAC,CAAC;QACnE,OAAO,KAAK;MAChB;;MAEA;MACA,IAAME,MAAM,GAAG,IAAI,CAACkB,UAAU,CAAC1B,YAAY,CAACQ,MAAM;MAClD,IAAM4zB,oBAAoB,GAAG5zB,MAAM,CAAC6zB,SAAS,CAAC,UAAAhwB,KAAK;QAAA,OAC/C2vB,kBAAkB,CAAC7F,QAAQ,CAACxR,MAAM,CAACtY,KAAK,CAACG,EAAE,CAAC,CAAC;MAAA,CACjD,CAAC;MAED,IAAI4vB,oBAAoB,IAAI,CAAC,EAAE;QAC3B10B,+CAAK,CAACY,GAAG,qEAAAuB,MAAA,CAAqEuyB,oBAAoB,GAAI,IAAI,EAAE,CAAC,CAAC;QAC9G,OAAO,IAAI,CAACjC,SAAS,CAAChH,eAAe,CAACiJ,oBAAoB,CAAC;MAC/D;MAEA10B,+CAAK,CAACY,GAAG,CAAC,4CAA4C,EAAE,IAAI,EAAE,CAAC,CAAC;MAChE,OAAO,KAAK;IAChB;;IAEA;AACJ;AACA;EAFI;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAk0B,sBAAsBA,CAAA,EAAG;MACrB,IAAMC,YAAY,GAAG,IAAI,CAACpC,SAAS,CAACqC,iBAAiB;MACrD90B,+CAAK,CAACY,GAAG,8CAAAuB,MAAA,CAA8C0yB,YAAY,GAAI,IAAI,EAAE,CAAC,CAAC;MAE/E,IAAAE,sBAAA,GAAsC,IAAI,CAACX,uBAAuB,CAAC,CAAC;QAA5DE,kBAAkB,GAAAS,sBAAA,CAAlBT,kBAAkB;QAAEC,KAAK,GAAAQ,sBAAA,CAALR,KAAK;MAEjC,IAAIA,KAAK,KAAK,CAAC,EAAE;QACbv0B,+CAAK,CAACY,GAAG,CAAC,+CAA+C,EAAE,IAAI,EAAE,CAAC,CAAC;QACnE,OAAO,KAAK;MAChB;MAEA,IAAME,MAAM,GAAG,IAAI,CAACkB,UAAU,CAAC1B,YAAY,CAACQ,MAAM;;MAElD;MACA,IAAMk0B,SAAS,GAAG,IAAI,CAACC,mBAAmB,CAACn0B,MAAM,EAAEwzB,kBAAkB,EAAEO,YAAY,CAAC;MAEpF,IAAIG,SAAS,IAAI,CAAC,EAAE;QAChBh1B,+CAAK,CAACY,GAAG,oEAAAuB,MAAA,CAAoE6yB,SAAS,GAAI,IAAI,EAAE,CAAC,CAAC;QAClG,OAAO,IAAI,CAACvC,SAAS,CAAChH,eAAe,CAACuJ,SAAS,CAAC;MACpD;MAEAh1B,+CAAK,CAACY,GAAG,CAAC,4CAA4C,EAAE,IAAI,EAAE,CAAC,CAAC;MAChE,OAAO,KAAK;IAChB;;IAEA;AACJ;AACA;AACA;EAHI;IAAAH,GAAA;IAAAC,KAAA,EAIA,SAAAu0B,mBAAmBA,CAACn0B,MAAM,EAAEwzB,kBAAkB,EAAEO,YAAY,EAAE;MAC1D,IAAMK,QAAQ,GAAG,IAAI,CAACC,oBAAoB,CAACr0B,MAAM,EAAEwzB,kBAAkB,CAAC;;MAEtE;MACA,IAAIY,QAAQ,CAACE,IAAI,KAAK,CAAC,EAAE;QACrB,OAAO,CAAC,CAAC;MACb;;MAEA;MACA,IAAMC,OAAO,GAAGriB,KAAK,CAACC,IAAI,CAACiiB,QAAQ,CAAC/b,MAAM,CAAC,CAAC,CAAC,CAACmc,IAAI,CAAC,UAAC5d,CAAC,EAAE6d,CAAC;QAAA,OAAK7d,CAAC,GAAG6d,CAAC;MAAA,EAAC;;MAEnE;MAAA,IAAAryB,SAAA,GAAAC,0BAAA,CACoBkyB,OAAO;QAAAjyB,KAAA;MAAA;QAA3B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA6B;UAAA,IAAlBiyB,KAAK,GAAApyB,KAAA,CAAA1C,KAAA;UACZ,IAAI80B,KAAK,GAAGX,YAAY,EAAE;YACtB,OAAOW,KAAK;UAChB;QACJ;;QAEA;MAAA,SAAA5xB,GAAA;QAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;MAAA;QAAAV,SAAA,CAAAY,CAAA;MAAA;MACA,OAAOuxB,OAAO,CAAC,CAAC,CAAC;IACrB;;IAEA;AACJ;AACA;EAFI;IAAA50B,GAAA;IAAAC,KAAA,EAGA,SAAA+0B,sBAAsBA,CAAA,EAAG;MACrB,IAAMZ,YAAY,GAAG,IAAI,CAACpC,SAAS,CAACqC,iBAAiB;MAErD,IAAAY,sBAAA,GAAsC,IAAI,CAACtB,uBAAuB,CAAC,CAAC;QAA5DE,kBAAkB,GAAAoB,sBAAA,CAAlBpB,kBAAkB;QAAEC,KAAK,GAAAmB,sBAAA,CAALnB,KAAK;MAEjC,IAAIA,KAAK,KAAK,CAAC,EAAE;QACbv0B,+CAAK,CAACY,GAAG,CAAC,+CAA+C,EAAE,IAAI,EAAE,CAAC,CAAC;QACnE,OAAO,KAAK;MAChB;MAEA,IAAME,MAAM,GAAG,IAAI,CAACkB,UAAU,CAAC1B,YAAY,CAACQ,MAAM;;MAElD;MACA,IAAM60B,SAAS,GAAG,IAAI,CAACC,mBAAmB,CAAC90B,MAAM,EAAEwzB,kBAAkB,EAAEO,YAAY,CAAC;MAEpF,IAAIc,SAAS,IAAI,CAAC,EAAE;QAChB31B,+CAAK,CAACY,GAAG,wEAAAuB,MAAA,CAAwEwzB,SAAS,GAAI,IAAI,EAAE,CAAC,CAAC;QACtG,OAAO,IAAI,CAAClD,SAAS,CAAChH,eAAe,CAACkK,SAAS,CAAC;MACpD;MAEA31B,+CAAK,CAACY,GAAG,CAAC,4CAA4C,EAAE,IAAI,EAAE,CAAC,CAAC;MAChE,OAAO,KAAK;IAChB;;IAEA;AACJ;AACA;AACA;EAHI;IAAAH,GAAA;IAAAC,KAAA,EAIA,SAAAk1B,mBAAmBA,CAAC90B,MAAM,EAAEwzB,kBAAkB,EAAEO,YAAY,EAAE;MAC1D,IAAMK,QAAQ,GAAG,IAAI,CAACC,oBAAoB,CAACr0B,MAAM,EAAEwzB,kBAAkB,CAAC;;MAEtE;MACA,IAAIY,QAAQ,CAACE,IAAI,KAAK,CAAC,EAAE;QACrB,OAAO,CAAC,CAAC;MACb;;MAEA;MACA,IAAMC,OAAO,GAAGriB,KAAK,CAACC,IAAI,CAACiiB,QAAQ,CAAC/b,MAAM,CAAC,CAAC,CAAC,CAACmc,IAAI,CAAC,UAAC5d,CAAC,EAAE6d,CAAC;QAAA,OAAK7d,CAAC,GAAG6d,CAAC;MAAA,EAAC;;MAEnE;MACA,KAAK,IAAI7e,CAAC,GAAG2e,OAAO,CAACt0B,MAAM,GAAG,CAAC,EAAE2V,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1C,IAAI2e,OAAO,CAAC3e,CAAC,CAAC,GAAGme,YAAY,EAAE;UAC3B,OAAOQ,OAAO,CAAC3e,CAAC,CAAC;QACrB;MACJ;;MAEA;MACA,OAAO2e,OAAO,CAACA,OAAO,CAACt0B,MAAM,GAAG,CAAC,CAAC;IACtC;;IAEA;AACJ;AACA;AACA;EAHI;IAAAN,GAAA;IAAAC,KAAA,EAIA,SAAAy0B,oBAAoBA,CAACr0B,MAAM,EAAEwzB,kBAAkB,EAAE;MAC7C,IAAMY,QAAQ,GAAG,IAAIznB,GAAG,CAAC,CAAC;MAE1B3M,MAAM,CAACwM,OAAO,CAAC,UAAC3I,KAAK,EAAE6wB,KAAK,EAAK;QAC7B;QACA,IAAI7wB,KAAK,IAAIA,KAAK,CAACG,EAAE,IAAIwvB,kBAAkB,CAAC7F,QAAQ,CAACxR,MAAM,CAACtY,KAAK,CAACG,EAAE,CAAC,CAAC,EAAE;UACpEowB,QAAQ,CAACrnB,GAAG,CAACoP,MAAM,CAACtY,KAAK,CAACG,EAAE,CAAC,EAAE0wB,KAAK,CAAC;QACzC;MACJ,CAAC,CAAC;MAEF,OAAON,QAAQ;IACnB;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAz0B,GAAA;IAAAC,KAAA,EAKA,SAAA+qB,eAAeA,CAAC+J,KAAK,EAAE;MACnB;MACA,IAAI,CAAC/C,SAAS,CAACqC,iBAAiB,GAAGU,KAAK;;MAExC;MACA,IAAM9J,YAAY,GAAG,IAAI,CAAC1pB,UAAU,CAAC1B,YAAY,CAACoQ,aAAa,CAAC8kB,KAAK,CAAC;;MAEtE;MACA,IAAI9J,YAAY,EAAE;QACd1rB,+CAAK,CAACY,GAAG,2CAAAuB,MAAA,CAA2CqzB,KAAK,GAAI,IAAI,EAAE,CAAC,CAAC;;QAErE;QACA,IAAMK,WAAW,GAAGnK,YAAY,CAAClC,OAAO,CAACtpB,4DAAS,CAACkC,IAAI,CAAC4B,YAAY,CAAC;QACrE,IAAI6xB,WAAW,EAAE;UACb;UACA5R,mEAAe,CAAC6R,qBAAqB,CAACpK,YAAY,EAAEmK,WAAW,CAAC;;UAEhE;UACA5R,mEAAe,CAAC0H,kBAAkB,CAACD,YAAY,EAAE,IAAI,CAAC;QAC1D,CAAC,MAAM;UACH1rB,+CAAK,CAAC0S,IAAI,+CAAAvQ,MAAA,CAA+CqzB,KAAK,wBAAqB,IAAI,EAAE,CAAC,CAAC;UAC3F,OAAO,KAAK;QAChB;MACJ,CAAC,MAAM;QACHx1B,+CAAK,CAAC0S,IAAI,6CAAAvQ,MAAA,CAA6CqzB,KAAK,iBAAc,IAAI,EAAE,CAAC,CAAC;QAClF,OAAO,KAAK;MAChB;;MAEA;MACA,IAAI,CAAC/C,SAAS,CAACsD,iBAAiB,CAAC/kB,aAAa,CAAC,CAAC;MAChDhR,+CAAK,CAACY,GAAG,CAAC,wCAAwC,EAAE,IAAI,EAAE,CAAC,CAAC;MAE5D,OAAO,IAAI;IACf;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;ACpOL;AACA;AACA;AACO,IAAMo1B,iBAAiB;EAC1B;AACJ;AACA;EACI,SAAAA,kBAAYvD,SAAS,EAAE;IAAAlyB,eAAA,OAAAy1B,iBAAA;IACnB,IAAI,CAACvD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACwD,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,UAAU,GAAG,IAAI;EAC1B;;EAEA;AACJ;AACA;AACA;EAHI,OAAA31B,YAAA,CAAAw1B,iBAAA;IAAAv1B,GAAA;IAAAC,KAAA,EAIA,SAAA01B,iBAAiBA,CAACnoB,OAAO,EAAE;MACvB,IAAI,CAACgoB,cAAc,GAAGhoB,OAAO;IACjC;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAAxN,GAAA;IAAAC,KAAA,EAKA,SAAA21B,UAAUA,CAACH,UAAU,EAAEC,UAAU,EAAE;MAC/B,IAAI,CAACD,UAAU,GAAGA,UAAU;MAC5B,IAAI,CAACC,UAAU,GAAGA,UAAU;IAChC;;IAEA;AACJ;AACA;AACA;EAHI;IAAA11B,GAAA;IAAAC,KAAA,EAIA,SAAAsQ,aAAaA,CAAA,EAAG;MAAA,IAAAvJ,KAAA;MACZ,IAAI,CAAC,IAAI,CAACwuB,cAAc,EAAE,OAAO,EAAE;MAEnC,IAAMn1B,MAAM,GAAG,IAAI,CAAC2xB,SAAS,CAACzwB,UAAU,CAAC1B,YAAY,CAACQ,MAAM;MAC5D,IAAMiG,UAAU,GAAG,IAAI,CAAC0rB,SAAS,CAACzwB,UAAU,CAAC1B,YAAY,CAACyG,UAAU;MACpE,IAAIuvB,aAAa,GAAG,CAAC;MACrB,IAAIzB,YAAY,GAAG,CAAC;MACpB,IAAI0B,eAAe,GAAG,EAAE;;MAExB;MACAz1B,MAAM,CAACwM,OAAO,CAAC,UAAC3I,KAAK,EAAE6wB,KAAK,EAAK;QAC7B,IAAI7wB,KAAK,CAACW,QAAQ,IAAI,CAACyB,UAAU,CAACpC,KAAK,CAACG,EAAE,CAAC,EAAE;UACzC;UACAyxB,eAAe,CAACjkB,IAAI,CAACkjB,KAAK,CAAC;UAC3Bc,aAAa,EAAE;QACnB;MACJ,CAAC,CAAC;;MAEF;MACA,IAAI,IAAI,CAAC7D,SAAS,CAACqC,iBAAiB,IAAI,CAAC,EAAE;QACvC,IAAM0B,QAAQ,GAAGD,eAAe,CAAC5B,SAAS,CAAC,UAAAa,KAAK;UAAA,OAAIA,KAAK,IAAI/tB,KAAI,CAACgrB,SAAS,CAACqC,iBAAiB;QAAA,EAAC;QAC9F,IAAI0B,QAAQ,KAAK,CAAC,CAAC,EAAE;UACjB3B,YAAY,GAAG2B,QAAQ,GAAG,CAAC,CAAC,CAAC;QACjC;MACJ;;MAEA;MACA,IAAIF,aAAa,KAAK,CAAC,EAAE;QACrB;QACA,IAAI,CAACL,cAAc,CAAC5sB,WAAW,GAAG,GAAG;QACrC,IAAI,CAAC4sB,cAAc,CAACpsB,KAAK,GAAG,yBAAyB;MACzD,CAAC,MAAM;QACH,IAAI,CAACosB,cAAc,CAAC5sB,WAAW,MAAAlH,MAAA,CAAM0yB,YAAY,IAAI,CAAC,OAAA1yB,MAAA,CAAIm0B,aAAa,CAAE;QACzE,IAAI,CAACL,cAAc,CAACpsB,KAAK,MAAA1H,MAAA,CAAMm0B,aAAa,yBAAsB;MACtE;;MAEA;MACA,IAAI,IAAI,CAACJ,UAAU,IAAI,IAAI,CAACC,UAAU,EAAE;QACpC,IAAI,CAACD,UAAU,CAACO,QAAQ,GAAGH,aAAa,KAAK,CAAC;QAC9C,IAAI,CAACH,UAAU,CAACM,QAAQ,GAAGH,aAAa,KAAK,CAAC;MAClD;MAEA,OAAOC,eAAe;IAC1B;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;;;;AChFqC;AACM;AACE;;AAElD;AACA;AACA;AACO,IAAMG,mBAAmB;EAC5B;AACJ;AACA;EACI,SAAAA,oBAAYjE,SAAS,EAAE;IAAAlyB,eAAA,OAAAm2B,mBAAA;IACnB,IAAI,CAACjE,SAAS,GAAGA,SAAS;EAC9B;;EAEA;AACJ;AACA;AACA;EAHI,OAAAjyB,YAAA,CAAAk2B,mBAAA;IAAAj2B,GAAA;IAAAC,KAAA,EAIA,SAAAi2B,kBAAkBA,CAAA,EAAG;MACjB32B,+CAAK,CAACY,GAAG,CAAC,6CAA6C,EAAE,IAAI,EAAE,CAAC,CAAC;;MAEjE;MACA,IAAIqB,SAAS,GAAG2G,QAAQ,CAACiE,aAAa,CAAC3M,4DAAS,CAAC02B,UAAU,CAAC1I,SAAS,CAAC;;MAEtE;MACA,IAAI,CAACjsB,SAAS,EAAE;QACZjC,+CAAK,CAACY,GAAG,CAAC,kEAAkE,EAAE,IAAI,EAAE,CAAC,CAAC;;QAEtF;QACA,IAAMyH,KAAK,GAAGO,QAAQ,CAACN,gBAAgB,CAACpI,4DAAS,CAACkC,IAAI,CAACG,IAAI,CAAC;QAC5D,IAAI,CAAC8F,KAAK,IAAIA,KAAK,CAACtH,MAAM,KAAK,CAAC,EAAE;UAC9Bf,+CAAK,CAAC0S,IAAI,CAAC,yEAAyE,CAAC;UACrF,OAAO,IAAI;QACf;;QAEA;QACAzQ,SAAS,GAAG2G,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;QACzC5G,SAAS,CAAC6G,SAAS,GAAG5I,4DAAS,CAAC02B,UAAU,CAAC1I,SAAS,CAAC5rB,IAAI,CAAC,CAAC;;QAE3D;QACA,IAAI,CAACu0B,eAAe,CAAC50B,SAAS,CAAC;;QAE/B;QACA,IAAIoG,KAAK,CAAC,CAAC,CAAC,CAACoZ,UAAU,EAAE;UACrBpZ,KAAK,CAAC,CAAC,CAAC,CAACoZ,UAAU,CAAC5W,YAAY,CAAC5I,SAAS,EAAEoG,KAAK,CAAC,CAAC,CAAC,CAAC;QACzD;MACJ,CAAC,MAAM;QACH;QACArI,+CAAK,CAACY,GAAG,CAAC,0DAA0D,EAAE,IAAI,EAAE,CAAC,CAAC;QAC9EqB,SAAS,CAACC,SAAS,GAAG,EAAE;QACxB,IAAI,CAAC20B,eAAe,CAAC50B,SAAS,CAAC;MACnC;;MAEA;MACA,OAAO;QACH60B,OAAO,EAAEluB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAAC02B,UAAU,CAACG,OAAO,CAACz0B,IAAI,CAAC,CAAC,CAAC;QACrE4zB,UAAU,EAAEttB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAAC02B,UAAU,CAACI,WAAW,CAAC10B,IAAI,CAAC,CAAC,CAAC;QAC5E6zB,UAAU,EAAEvtB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAAC02B,UAAU,CAACK,WAAW,CAAC30B,IAAI,CAAC,CAAC;MAC/E,CAAC;IACL;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA7B,GAAA;IAAAC,KAAA,EAKA,SAAAm2B,eAAeA,CAAE50B,SAAS,EAAE;MAAA,IAAAwF,KAAA;MACxB;MACA,IAAMyvB,QAAQ,GAAGtuB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC9CquB,QAAQ,CAACpuB,SAAS,GAAG5I,4DAAS,CAAC02B,UAAU,CAACO,SAAS,CAAC70B,IAAI,CAAC,CAAC;;MAE1D;MACA,IAAMw0B,OAAO,GAAGluB,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;MAC9CiuB,OAAO,CAAChyB,EAAE,GAAG5E,4DAAS,CAAC02B,UAAU,CAACG,OAAO,CAACz0B,IAAI,CAAC,CAAC;MAChDw0B,OAAO,CAAChuB,SAAS,GAAG5I,4DAAS,CAAC02B,UAAU,CAACQ,eAAe,CAAC90B,IAAI,CAAC,CAAC;;MAE/D;MACA,IAAM4zB,UAAU,GAAGttB,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MACnDqtB,UAAU,CAACpxB,EAAE,GAAG5E,4DAAS,CAAC02B,UAAU,CAACI,WAAW,CAAC10B,IAAI,CAAC,CAAC;MACvD4zB,UAAU,CAACltB,SAAS,CAACrF,GAAG,CACpBzD,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,EAC/BpC,4DAAS,CAACqJ,OAAO,CAAC8tB,WAAW,CAAC/0B,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACqJ,OAAO,CAAC+tB,YAAY,CAACh1B,IAAI,CAAC,CACxC,CAAC;MACD4zB,UAAU,CAACh0B,SAAS,GAAGwE,qDAAQ,CAACkb,WAAW,CAAC,YAAY,CAAC;MACzDsU,UAAU,CAACrsB,KAAK,GAAG,iBAAiB;MACpCqsB,UAAU,CAACnrB,gBAAgB,CAAC,OAAO,EAAE;QAAA,OAAMtD,KAAI,CAACgrB,SAAS,CAACgD,sBAAsB,CAAC,CAAC;MAAA,EAAC;;MAEnF;MACA,IAAMU,UAAU,GAAGvtB,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MACnDstB,UAAU,CAACrxB,EAAE,GAAG5E,4DAAS,CAAC02B,UAAU,CAACK,WAAW,CAAC30B,IAAI,CAAC,CAAC;MACvD6zB,UAAU,CAACntB,SAAS,CAACrF,GAAG,CACpBzD,4DAAS,CAACqJ,OAAO,CAACC,MAAM,CAAClH,IAAI,CAAC,CAAC,EAC/BpC,4DAAS,CAACqJ,OAAO,CAAC8tB,WAAW,CAAC/0B,IAAI,CAAC,CAAC,EACpCpC,4DAAS,CAACqJ,OAAO,CAAC+tB,YAAY,CAACh1B,IAAI,CAAC,CACxC,CAAC;MACD6zB,UAAU,CAACj0B,SAAS,GAAGwE,qDAAQ,CAACkb,WAAW,CAAC,cAAc,CAAC;MAC3DuU,UAAU,CAACtsB,KAAK,GAAG,aAAa;MAChCssB,UAAU,CAACprB,gBAAgB,CAAC,OAAO,EAAE;QAAA,OAAMtD,KAAI,CAACgrB,SAAS,CAACmC,sBAAsB,CAAC,CAAC;MAAA,EAAC;;MAEnF;MACAsC,QAAQ,CAACxsB,WAAW,CAACwrB,UAAU,CAAC;MAChCgB,QAAQ,CAACxsB,WAAW,CAACosB,OAAO,CAAC;MAC7BI,QAAQ,CAACxsB,WAAW,CAACyrB,UAAU,CAAC;;MAEhC;MACAl0B,SAAS,CAACyI,WAAW,CAACwsB,QAAQ,CAAC;MAE/Bl3B,+CAAK,CAACY,GAAG,CAAC,kDAAkD,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1E;;IAEA;AACJ;AACA;EAFI;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAwzB,OAAOA,CAAA,EAAG;MACN;MACA,IAAMgC,UAAU,GAAGttB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAAC02B,UAAU,CAACI,WAAW,CAAC10B,IAAI,CAAC,CAAC,CAAC;MACnF,IAAM6zB,UAAU,GAAGvtB,QAAQ,CAAC+V,cAAc,CAACze,4DAAS,CAAC02B,UAAU,CAACK,WAAW,CAAC30B,IAAI,CAAC,CAAC,CAAC;;MAEnF;MACA,IAAI4zB,UAAU,EAAE;QACZ,IAAMqB,aAAa,GAAGrB,UAAU,CAAC1U,SAAS,CAAC,IAAI,CAAC;QAChD0U,UAAU,CAACzU,UAAU,CAACC,YAAY,CAAC6V,aAAa,EAAErB,UAAU,CAAC;MACjE;MAEA,IAAIC,UAAU,EAAE;QACZ,IAAMqB,aAAa,GAAGrB,UAAU,CAAC3U,SAAS,CAAC,IAAI,CAAC;QAChD2U,UAAU,CAAC1U,UAAU,CAACC,YAAY,CAAC8V,aAAa,EAAErB,UAAU,CAAC;MACjE;MAEAn2B,+CAAK,CAACY,GAAG,CAAC,6CAA6C,EAAE,IAAI,EAAE,CAAC,CAAC;IACrE;EAAC;AAAA","sources":["webpack://diff-files/./src/components/chunks/ChunkRenderer.js","webpack://diff-files/./src/components/chunks/ChunkSelectionHandler.js","webpack://diff-files/./src/components/chunks/ChunkVisualStateManager.js","webpack://diff-files/./src/components/chunks/MergeContentGenerator.js","webpack://diff-files/./src/components/merge/MergeOperationHandler.js","webpack://diff-files/./src/components/merge/MergePreviewManager.js","webpack://diff-files/./src/components/merge/MergeUIController.js","webpack://diff-files/./src/components/modal/ModalManager.js","webpack://diff-files/./src/components/navigator/ConflictNavigator.js","webpack://diff-files/./src/components/navigator/NavigationCounter.js","webpack://diff-files/./src/components/navigator/NavigationUIBuilder.js"],"sourcesContent":["import { Debug } from '../../utils/Debug';\nimport { StringUtils } from '../../utils/StringUtils';\nimport Selectors from '../../constants/Selectors';\nimport { LoaderManager } from '../../utils/LoaderManager';\nimport { TranslationManager } from '../../utils/TranslationManager';\n\n/**\n * Responsible for rendering chunk content\n */\nexport class ChunkRenderer {\n    /**\n     * @param {ChunkManager} chunkManager - Parent chunk manager\n     */\n    constructor(chunkManager) {\n        this.chunkManager = chunkManager;\n    }\n\n    /**\n     * Render all chunks to container\n     */\n    renderChunks() {\n        Debug.log('ChunkRenderer: Beginning chunk rendering', null, 2);\n\n        // Show loading indicator for large diffs (more than 100 chunks)\n        let loaderId = null;\n        if (this.chunkManager.chunks.length > 100) {\n            const translationManager = TranslationManager.getInstance();\n            const loaderManager = LoaderManager.getInstance();\n            const loadingMessage = translationManager.get('renderingDiff', 'Rendering diff...');\n\n            loaderId = loaderManager.showLoader(loadingMessage, {\n                fullscreen: true,\n                zIndex: 1000\n            });\n\n            Debug.log('ChunkRenderer: Showing loader for large diff rendering', null, 2);\n        }\n\n        // Performance tracking\n        const startTime = performance.now();\n\n        // Generate HTML for both panes\n        const leftHtml = this.buildDiffPaneHtml(this.chunkManager.oldContent, 'left');\n        const rightHtml = this.buildDiffPaneHtml(this.chunkManager.newContent, 'right');\n\n        // Inject HTML into container - WITHOUT creating empty pane headers\n        // The headers will be added by ChunkSelectionHandler later\n        this.chunkManager.diffViewer.container.innerHTML = `\n            <div class=\"${Selectors.DIFF.PANES_CONTAINER.name()}\">\n                <div class=\"${Selectors.DIFF.PANE.name()}\" id=\"${Selectors.DIFF.PANE_LEFT.name()}\" data-side=\"left\">\n                    ${leftHtml}\n                </div>\n                <div class=\"${Selectors.DIFF.PANE.name()}\" id=\"${Selectors.DIFF.PANE_RIGHT.name()}\" data-side=\"right\">\n                    ${rightHtml}\n                </div>\n            </div>\n        `;\n\n        // Hide loader if shown\n        if (loaderId) {\n            const loaderManager = LoaderManager.getInstance();\n            loaderManager.hideLoader(loaderId);\n\n            // Log performance metrics\n            const endTime = performance.now();\n            const duration = endTime - startTime;\n            Debug.log(`ChunkRenderer: Rendered ${this.chunkManager.chunks.length} chunks in ${duration.toFixed(2)}ms`, null, 2);\n        } else {\n            Debug.log(`ChunkRenderer: Rendered ${this.chunkManager.chunks.length} chunks successfully`, null, 2);\n        }\n    }\n\n    /**\n     * Build HTML for a diff pane\n     * @param {Array} lines - Content lines\n     * @param {string} side - 'left' or 'right'\n     * @returns {string} Generated HTML\n     */\n    buildDiffPaneHtml(lines, side) {\n        // First, identify chunks that have placeholder lines\n        const chunksWithPlaceholders = new Set();\n        for (const line of lines) {\n            if (line.type === 'placeholder' && line.chunkId) {\n                chunksWithPlaceholders.add(line.chunkId);\n            }\n        }\n\n        // Create HTML with nested containers for proper scrolling\n        let html = `<div class=\"${Selectors.DIFF.PANE_CONTENT.name()} hljs\">`; // Add scrolling container\n        html += `<div class=\"${Selectors.DIFF.TABLE_WRAPPER.name()}\">`;\n        html += `<table class=\"${Selectors.CODE.TABLE.name()}\"><tbody>`;\n\n        let lineCounter = 0;\n\n        for (const line of lines) {\n            html += this._renderDiffLine(line, side, ++lineCounter, chunksWithPlaceholders);\n        }\n\n        html += '</tbody></table>';\n        html += '</div>'; // Close table wrapper\n        html += '</div>'; // Close scrolling container\n\n        return html;\n    }\n\n    /**\n     * Render a single diff line\n     * @private\n     */\n    _renderDiffLine(line, side, lineNumber, chunksWithPlaceholders) {\n        let html = '<tr>';\n\n        const chunkId = line.chunkId !== undefined ? line.chunkId : '';\n\n        // Get chunk type if this is a chunk line\n        let chunkType = '';\n        if (chunkId !== '') {\n            const chunk = this.chunkManager.chunks.find(c => c.id === chunkId);\n            chunkType = chunk ? chunk.type : '';\n        }\n\n        // Add line number cell\n        html += `<td class=\"${Selectors.CODE.LINE_NUMBER.name()}\">${lineNumber}</td>`;\n\n        // Check if this chunk has placeholder lines\n        const hasPlaceholder = chunkId !== '' && chunksWithPlaceholders.has(chunkId);\n\n        if (line.type === 'placeholder') {\n            html += this._renderPlaceholderLine(line, chunkId, chunkType, side, lineNumber);\n        } else {\n            html += this._renderContentLine(line, chunkId, chunkType, side, lineNumber, hasPlaceholder);\n        }\n\n        html += '</tr>';\n        return html;\n    }\n\n    /**\n     * Render placeholder line\n     * @private\n     */\n    _renderPlaceholderLine(line, chunkId, chunkType, side, lineNumber) {\n        // Add status class for chunks that can be navigated\n        let additionalClass = '';\n        if (chunkId !== '') {\n            // Add the vdm-diff__chunk class for elements with chunk IDs\n            additionalClass += ` ${Selectors.DIFF.CHUNK.name()}`;\n\n            if (line.conflict || chunkType === 'replace' || chunkType === 'add' || chunkType === 'delete') {\n                additionalClass += ` ${Selectors.STATUS.UNRESOLVED.name()}`;\n            }\n        }\n\n        return `<td class=\"${Selectors.CODE.LINE_CONTENT.name()} ${Selectors.DIFF.LINE_CONTENT_EMPTY.name()} ${Selectors.DIFF.LINE_PLACEHOLDER.name()}${additionalClass}\"\n                   data-chunk-id=\"${chunkId}\"\n                   data-chunk-type=\"${chunkType}\"\n                   data-side=\"${side}\"\n                   data-placeholder-type=\"${line.placeholderType || 'default'}\"\n                   data-line-id=\"${side}-${lineNumber}\"\n                   data-has-placeholder=\"true\">&nbsp;</td>`;\n    }\n\n    /**\n     * Render content line\n     * @private\n     */\n    _renderContentLine(line, chunkId, chunkType, side, lineNumber, hasPlaceholder) {\n        const lineContent = line.line;\n        const isEmpty = !lineContent || lineContent === '\\r' || lineContent === '\\n';\n\n        // Add different classes based on chunk type\n        let additionalClass = '';\n        if (chunkId !== '') {\n            additionalClass = this._getChunkClass(chunkType, side);\n\n            // Add the vdm-diff__chunk class for elements with chunk IDs\n            additionalClass += ` ${Selectors.DIFF.CHUNK.name()}`;\n\n            // Add status class for chunks that can be navigated - include all chunk types that need resolution\n            if (line.conflict || chunkType === 'replace' || chunkType === 'add' || chunkType === 'delete') {\n                additionalClass += ` ${Selectors.STATUS.UNRESOLVED.name()}`;\n            }\n        }\n\n        if (isEmpty) {\n            additionalClass += ` ${Selectors.CODE.LINE_EMPTY.name()}`;\n            return `<td class=\"${Selectors.CODE.LINE_CONTENT.name()}${additionalClass}\"\n                       data-chunk-id=\"${chunkId}\"\n                       data-chunk-type=\"${chunkType}\"\n                       data-side=\"${side}\"\n                       data-line-id=\"${side}-${lineNumber}\"\n                       ${hasPlaceholder ? 'data-has-placeholder=\"true\"' : ''}>&nbsp;</td>`;\n        } else {\n            // Add the line content with proper attributes for chunk handling\n            const displayContent = StringUtils.escapeHtml ?\n                                   StringUtils.escapeHtml(lineContent) :\n                                   lineContent.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n            // Add cursor: pointer to all clickable chunk elements\n            const styleAttr = chunkId !== '' ? ' style=\"cursor: pointer;\"' : '';\n\n            return `<td class=\"${Selectors.CODE.LINE_CONTENT.name()}${additionalClass}\"\n                       data-chunk-id=\"${chunkId}\"\n                       data-chunk-type=\"${chunkType}\"\n                       data-side=\"${side}\"\n                       data-line-id=\"${side}-${lineNumber}\"\n                       ${hasPlaceholder ? 'data-has-placeholder=\"true\"' : ''}${styleAttr}>${displayContent}</td>`;\n        }\n    }\n\n    /**\n     * Get CSS class for a chunk type\n     * @private\n     */\n    _getChunkClass(chunkType, side) {\n        if (chunkType === 'delete' && side === 'left') {\n            return ` ${Selectors.DIFF.LINE_DELETE.name()}`;\n        } else if (chunkType === 'add' && side === 'right') {\n            return ` ${Selectors.DIFF.LINE_ADD.name()}`;\n        } else if (chunkType === 'replace') {\n            let cls = ` ${Selectors.DIFF.LINE_ADD.name()}`;\n            if (side === 'left') {\n                cls += ` ${Selectors.DIFF.LINE_REPLACE_LEFT.name()}`;\n            } else {\n                cls += ` ${Selectors.DIFF.LINE_REPLACE_RIGHT.name()}`;\n            }\n            return cls;\n        }\n        return '';\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { DOMUtils } from '../../utils/DOMUtils';\nimport Selectors from '../../constants/Selectors';\nimport { ChunkUtils } from '../../utils/ChunkUtils';\nimport { IconRegistry } from '../../utils/IconRegistry';\nimport { TranslationManager } from '../../utils/TranslationManager';\nimport { LoaderManager } from '../../utils/LoaderManager';\n\nimport { ChunkVisualStateManager } from './ChunkVisualStateManager';\n\n/**\n * Handles chunk selection operations\n */\nexport class ChunkSelectionHandler {\n    /**\n     * @param {ChunkManager} chunkManager - Parent chunk manager\n     */\n    constructor(chunkManager) {\n        this.chunkManager = chunkManager;\n        this.selections = {}; // Store selections separately\n        this.visualStateManager = new ChunkVisualStateManager(chunkManager);\n\n        // Define selection state constants to replace hardcoded strings\n        this.SELECTED = Selectors.DIFF.CHUNK_SELECTED.name();\n        this.UNSELECTED = Selectors.DIFF.CHUNK_UNSELECTED.name();\n\n        // Performance tracking metrics\n        this._performanceMetrics = {\n            lastOperationTime: 0,\n            operationCount: 0\n        };\n    }\n\n    /**\n     * Setup chunk selection handlers\n     */\n    setupChunkSelection() {\n        // Store the handler function with proper binding\n        this._boundClickHandler = (event) => this._handleClick(event);\n        this._boundCheckAllHandler = (event) => this._handleCheckAll(event);\n\n        // Clear existing handlers and setup new ones for ALL chunk elements\n        // by targeting data-chunk-id attribute instead of specific classes\n        DOMUtils.setupEventHandlers(\n            '[data-chunk-id]:not([data-chunk-id=\"\"])',\n            'click',\n            this._boundClickHandler,\n            {\n                removeExisting: true,\n                styles: { cursor: 'pointer' }\n            }\n        );\n\n        // Add \"Check All\" buttons to each pane and setup handlers\n        this._setupCheckAllButtons();\n\n        // Clear ChunkUtils cache to ensure fresh state\n        ChunkUtils.clearCache();\n\n        Debug.log('ChunkSelectionHandler: Selection handlers initialized for all chunk elements', null, 2);\n    }\n\n    /**\n     * Set up \"Check All\" buttons\n     * @private\n     */\n    _setupCheckAllButtons() {\n        // Find panes\n        const panes = this.chunkManager.diffViewer.container.querySelectorAll(Selectors.DIFF.PANE);\n\n        if (panes.length !== 2) {\n            Debug.log('ChunkSelectionHandler: Could not find both diff panes for \"Check All\" buttons', null, 2);\n            return;\n        }\n\n        const leftPane = panes[0];\n        const rightPane = panes[1];\n\n        // Create and add the check all buttons to the panes\n        this._createCheckAllButtonHeader(leftPane, 'left');\n        this._createCheckAllButtonHeader(rightPane, 'right');\n    }\n\n    /**\n     * Create a header with a \"Check All\" button for a pane\n     * @private\n     */\n    _createCheckAllButtonHeader(pane, side) {\n        // Get translation manager instance\n        const translationManager = TranslationManager.getInstance();\n\n        // Create header element\n        const header = document.createElement('div');\n        header.className = Selectors.DIFF.PANE_HEADER.name();\n\n        // Make header a flex container\n        header.classList.add('vdm-d-flex', 'vdm-justify-content-between', 'vdm-align-items-center');\n\n        // Get language information from DiffViewer\n        const language = this.chunkManager.diffViewer.runtimeProps.diffData.language || 'Text';\n\n        // Create language badge\n        const langBadge = document.createElement('span');\n        langBadge.className = 'vdm-badge vdm-badge--info';\n        langBadge.textContent = language;\n\n        // Create button element\n        const checkAllButton = document.createElement('button');\n        checkAllButton.className = `${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_EXTRA_SMALL.name()} ${Selectors.UTILITY.BUTTON_SECONDARY.name()} ${Selectors.DIFF.CHECK_ALL_BTN.name()}`;\n        checkAllButton.setAttribute('data-side', side);\n        checkAllButton.setAttribute('data-icon-state', 'unchecked');\n        checkAllButton.title = `Select all changes from the ${side} pane`;\n        checkAllButton.style.display = 'inline-flex';\n        checkAllButton.style.alignItems = 'center';\n        checkAllButton.style.verticalAlign = 'middle';\n\n        // Create icon wrapper span\n        const iconWrapper = document.createElement('span');\n        iconWrapper.className = 'vdm-icon-wrapper';\n        iconWrapper.style.marginRight = '3px';\n        iconWrapper.style.display = 'inline-flex';\n        iconWrapper.style.alignItems = 'center';\n        iconWrapper.style.verticalAlign = 'middle';\n        iconWrapper.style.height = '14px';\n        iconWrapper.style.lineHeight = '1';\n\n        // Add checkbox-unchecked icon by default\n        const uncheckIcon = IconRegistry.createIcon('checkbox-unchecked', {\n            width: 14,\n            height: 14,\n            classes: 'vdm-icon-checkbox'\n        });\n\n        iconWrapper.appendChild(uncheckIcon);\n\n        // Create text node with a span wrapper for better alignment\n        const textSpan = document.createElement('span');\n        textSpan.style.display = 'inline-block';\n        textSpan.style.verticalAlign = 'middle';\n        textSpan.style.lineHeight = '1';\n        textSpan.appendChild(document.createTextNode(translationManager.get('checkAll')));\n\n        // Add icon and text to button\n        checkAllButton.appendChild(iconWrapper);\n        checkAllButton.appendChild(textSpan);\n\n        // Add language badge and button to header\n        header.appendChild(langBadge);\n        header.appendChild(checkAllButton);\n\n        // Add header as the first child of the pane\n        pane.insertBefore(header, pane.firstChild);\n\n        // Add click event handler\n        checkAllButton.addEventListener('click', this._boundCheckAllHandler);\n    }\n\n    /**\n     * Handle click on \"Check All\" button\n     * @private\n     */\n    _handleCheckAll(event) {\n        const button = event.currentTarget;\n        const side = button.getAttribute('data-side');\n        const iconState = button.getAttribute('data-icon-state');\n        const oppositeButton = this._getOppositeButton(side);\n\n        // Get translation manager and loader manager\n        const translationManager = TranslationManager.getInstance();\n        const loaderManager = LoaderManager.getInstance();\n\n        if (!side) return;\n\n        // Show loading indicator for batch operations\n        const message = translationManager.get('processingChunks') || 'Processing chunks...';\n        const loaderId = loaderManager.showLoader(message, {\n            fullscreen: true,\n            zIndex: 9999\n        });\n\n        // Also update button state for visual feedback\n        this._setButtonProcessingState(button, true);\n\n        // Track performance\n        const startTime = performance.now();\n\n        // Use a small timeout to allow the loader to be shown\n        setTimeout(() => {\n            // If this button is already checked, uncheck everything\n            if (iconState === 'checked') {\n                Debug.log('ChunkSelectionHandler: Unchecking all selections', null, 2);\n\n                // Reset this button\n                this._toggleButtonIconState(button, 'checked');\n\n                // Reset opposite button if it's checked\n                if (oppositeButton && oppositeButton.getAttribute('data-icon-state') === 'checked') {\n                    this._toggleButtonIconState(oppositeButton, 'checked');\n                }\n\n                // Clear all selections\n                this.clearAllSelections(true); // Use optimized batch version\n            }\n            // If opposite button is checked, toggle both sides\n            else if (oppositeButton && oppositeButton.getAttribute('data-icon-state') === 'checked') {\n                // Uncheck the opposite side\n                this._toggleButtonIconState(oppositeButton, 'checked');\n\n                // Check this side\n                this._toggleButtonIconState(button, 'unchecked');\n\n                // Select all on this side\n                this.selectAllOnSide(side, true); // Use optimized batch version\n            }\n            // Default case: check this side\n            else {\n                this._toggleButtonIconState(button, 'unchecked');\n                this.selectAllOnSide(side, true); // Use optimized batch version\n            }\n\n            // Reset button state\n            this._setButtonProcessingState(button, false);\n\n            // Hide loader\n            loaderManager.hideLoader(loaderId);\n\n            // Track performance metrics\n            this._recordPerformanceMetrics(startTime);\n        }, 50);\n    }\n\n    /**\n     * Set button to processing state to give visual feedback during long operations\n     * @private\n     */\n    _setButtonProcessingState(button, isProcessing) {\n        if (isProcessing) {\n            button.classList.add('processing');\n            button.style.opacity = '0.8';\n            button.style.cursor = 'wait';\n        } else {\n            button.classList.remove('processing');\n            button.style.opacity = '';\n            button.style.cursor = '';\n        }\n    }\n\n    /**\n     * Record performance metrics for optimization analysis\n     * @private\n     */\n    _recordPerformanceMetrics(startTime) {\n        const endTime = performance.now();\n        const operationTime = endTime - startTime;\n\n        this._performanceMetrics.lastOperationTime = operationTime;\n        this._performanceMetrics.operationCount++;\n\n        // Log cache statistics to evaluate caching effectiveness\n        const cacheStats = ChunkUtils.getCacheStats();\n        const elementHitRatio = cacheStats.elementCacheHits /\n            (cacheStats.elementCacheHits + cacheStats.elementCacheMisses) * 100 || 0;\n        const iconHitRatio = cacheStats.iconMarkerCacheHits /\n            (cacheStats.iconMarkerCacheHits + cacheStats.iconMarkerCacheMisses) * 100 || 0;\n\n        Debug.log(`ChunkSelectionHandler: Operation completed in ${operationTime.toFixed(2)}ms`,\n            {\n                totalOperations: this._performanceMetrics.operationCount,\n                cacheStats: {\n                    elementCacheHits: cacheStats.elementCacheHits,\n                    elementCacheMisses: cacheStats.elementCacheMisses,\n                    elementHitRatio: `${elementHitRatio.toFixed(1)}%`,\n                    iconMarkerCacheHits: cacheStats.iconMarkerCacheHits,\n                    iconMarkerCacheMisses: cacheStats.iconMarkerCacheMisses,\n                    iconHitRatio: `${iconHitRatio.toFixed(1)}%`\n                }\n            }, 2);\n    }\n\n    /**\n     * Get the button for the opposite side\n     * @private\n     * @param {string} currentSide - Current side ('left' or 'right')\n     * @returns {Element|null} - The opposite side button element or null if not found\n     */\n    _getOppositeButton(currentSide) {\n        const oppositeSide = currentSide === 'left' ? 'right' : 'left';\n        return this.chunkManager.diffViewer.container.querySelector(\n            `.${Selectors.DIFF.CHECK_ALL_BTN.name()}[data-side=\"${oppositeSide}\"]`\n        );\n    }\n\n    /**\n     * Toggle button icon state between checked and unchecked\n     * @private\n     * @param {Element} button - The button element\n     * @param {string} currentState - Current icon state ('checked' or 'unchecked')\n     */\n    _toggleButtonIconState(button, currentState) {\n        const iconWrapper = button.querySelector('.vdm-icon-wrapper');\n        if (!iconWrapper) return;\n\n        // Clear current icon\n        iconWrapper.innerHTML = '';\n\n        // Determine new state based on current state\n        let newIconState;\n        if (currentState === 'unchecked') {\n            newIconState = 'checked';\n            iconWrapper.appendChild(IconRegistry.createIcon('checkbox-checked', {\n                width: 14,\n                height: 14,\n                classes: 'vdm-icon-checkbox'\n            }));\n        } else {\n            newIconState = 'unchecked';\n            iconWrapper.appendChild(IconRegistry.createIcon('checkbox-unchecked', {\n                width: 14,\n                height: 14,\n                classes: 'vdm-icon-checkbox'\n            }));\n        }\n\n        // Update icon state attribute\n        button.setAttribute('data-icon-state', newIconState);\n    }\n\n    /**\n     * Select all chunks on a specific side\n     * @param {string} side - 'left' or 'right'\n     * @param {boolean} useBatch - Whether to use batching for large files (default: false for backward compatibility)\n     */\n    selectAllOnSide(side, useBatch = false) {\n        const oppositeSide = side === 'left' ? 'right' : 'left';\n\n        Debug.log(`ChunkSelectionHandler: Selecting all chunks on ${side} side${useBatch ? ' (batched)' : ''}`, null, 2);\n\n        // Get all chunks that need resolution\n        const conflictChunks = this.chunkManager.chunks.filter(chunk =>\n            chunk.conflict || chunk.type === 'replace' || chunk.type === 'add' || chunk.type === 'delete'\n        );\n\n        // Check if we should use batching based on number of chunks\n        const largeDiff = conflictChunks.length > 20; // Threshold for considering a diff as \"large\"\n        useBatch = useBatch || largeDiff;\n\n        // Show loader for large operations\n        let loaderId = null;\n        if (useBatch && conflictChunks.length > 50) {\n            const translationManager = TranslationManager.getInstance();\n            const loaderManager = LoaderManager.getInstance();\n            const message = translationManager.get('processingChunks') || 'Processing chunks...';\n            loaderId = loaderManager.showLoader(message, {\n                fullscreen: true,\n                zIndex: 9999\n            });\n        }\n\n        // Start tracking performance\n        const startTime = performance.now();\n\n        if (useBatch) {\n            // First update internal state for all chunks\n            conflictChunks.forEach(chunk => {\n                // Update selections object\n                this.selections[chunk.id] = side;\n\n                // Sync with diffConfig for compatibility\n                this._syncWithDiffConfig(chunk.id, side);\n            });\n\n            // Get all chunks by side for efficient batch processing\n            const chunksBySide = new Map();\n\n            // Group all elements by chunk ID and side for batch processing\n            conflictChunks.forEach(chunk => {\n                // Toggle visual state with batching enabled\n                this.visualStateManager.updateVisualState(chunk.id, side, this.SELECTED, true);\n                this.visualStateManager.updateVisualState(chunk.id, oppositeSide, this.UNSELECTED, true);\n\n                // Collect chunk elements for resolved status update\n                if (!chunksBySide.has(chunk.id)) {\n                    const elements = ChunkUtils.getChunkElements(chunk.id);\n                    chunksBySide.set(chunk.id, elements);\n                }\n            });\n\n            // Process visual updates in a single batch\n            this.visualStateManager.applyBatch(false); // Don't notify yet\n\n            // Apply resolved status to all chunks in a separate batch\n            requestAnimationFrame(() => {\n                // Ensure the icon markers are updated by forcing a redraw\n                this._refreshIconStates(side, conflictChunks);\n\n                chunksBySide.forEach((elements) => {\n                    elements.forEach(element => {\n                        element.classList.add(Selectors.STATUS.RESOLVED.name());\n                        element.classList.remove(Selectors.STATUS.UNRESOLVED.name());\n                    });\n                });\n\n                // Update navigation counter after all visual changes\n                this._updateNavigationCounter();\n\n                // Now notify about selection change\n                if (typeof this.chunkManager.onSelectionChange === 'function') {\n                    this.chunkManager.onSelectionChange();\n                }\n\n                // Hide loader if it was shown\n                if (loaderId) {\n                    const loaderManager = LoaderManager.getInstance();\n                    loaderManager.hideLoader(loaderId);\n                }\n\n                // Record performance metrics after all operations\n                this._recordPerformanceMetrics(startTime);\n            });\n        } else {\n            // Legacy approach - process one by one\n            conflictChunks.forEach(chunk => {\n                this.toggleChunkSelection(chunk.id, side, this.SELECTED);\n                this.toggleChunkSelection(chunk.id, oppositeSide, this.UNSELECTED);\n            });\n\n            // Callback to notify of selection change\n            if (typeof this.chunkManager.onSelectionChange === 'function') {\n                this.chunkManager.onSelectionChange();\n            }\n\n            // Record performance metrics\n            this._recordPerformanceMetrics(startTime);\n        }\n    }\n\n    /**\n     * Force refresh icon states for chunks\n     * This ensures icon markers are correctly updated during batch operations\n     * @private\n     */\n    _refreshIconStates(selectedSide, chunks) {\n        const oppositeSide = selectedSide === 'left' ? 'right' : 'left';\n\n        // Force all chunks to properly show their selection state visually\n        chunks.forEach(chunk => {\n            // Get elements for both sides\n            const selectedElements = ChunkUtils.getChunkElements(chunk.id, selectedSide);\n            const oppositeElements = ChunkUtils.getChunkElements(chunk.id, oppositeSide);\n\n            // Handle selected side\n            if (selectedElements.length > 0) {\n                // Sort by line number to get first element for icon marker\n                const sortedElements = ChunkUtils.sortElementsByLineNumber(selectedElements);\n                const firstElement = sortedElements[0];\n\n                if (firstElement) {\n                    const lineId = firstElement.dataset.lineId;\n                    if (lineId) {\n                        // Force direct icon marker update with the correct side\n                        const iconMarker = ChunkUtils.getIconMarker(lineId);\n                        if (iconMarker) {\n                            // Remove all state classes first\n                            iconMarker.classList.remove(\n                                Selectors.DIFF.CHUNK_SELECTED.name(),\n                                Selectors.DIFF.CHUNK_UNSELECTED.name(),\n                                Selectors.ICONS.SELECT.name(),\n                                Selectors.ICONS.SELECT_LEFT.name(),\n                                Selectors.ICONS.SELECT_RIGHT.name()\n                            );\n\n                            // Add selected state\n                            iconMarker.classList.add(Selectors.DIFF.CHUNK_SELECTED.name());\n\n                            // Add the side-specific icon marker\n                            if (selectedSide === 'left') {\n                                iconMarker.classList.add(Selectors.ICONS.SELECT_LEFT.name());\n                            } else {\n                                iconMarker.classList.add(Selectors.ICONS.SELECT_RIGHT.name());\n                            }\n                        }\n                    }\n                }\n\n                // Apply the selected class to all elements for this chunk on the selected side\n                selectedElements.forEach(element => {\n                    // Remove all selection classes first\n                    element.classList.remove(\n                        Selectors.DIFF.CHUNK_SELECTED.name(),\n                        Selectors.DIFF.CHUNK_UNSELECTED.name()\n                    );\n\n                    // Add selected class\n                    element.classList.add(Selectors.DIFF.CHUNK_SELECTED.name());\n\n                    // Update the parent row too\n                    const row = ChunkUtils.getParentRow(element);\n                    if (row) {\n                        row.classList.remove(\n                            Selectors.DIFF.CHUNK_SELECTED.name(),\n                            Selectors.DIFF.CHUNK_UNSELECTED.name()\n                        );\n                        row.classList.add(Selectors.DIFF.CHUNK_SELECTED.name());\n                    }\n                });\n            }\n\n            // Handle opposite side\n            if (oppositeElements.length > 0) {\n                // Clear any icon markers on the opposite side\n                const sortedOppositeElements = ChunkUtils.sortElementsByLineNumber(oppositeElements);\n                const firstOppositeElement = sortedOppositeElements[0];\n\n                if (firstOppositeElement) {\n                    const oppositeLineId = firstOppositeElement.dataset.lineId;\n                    if (oppositeLineId) {\n                        const oppositeIconMarker = ChunkUtils.getIconMarker(oppositeLineId);\n                        if (oppositeIconMarker) {\n                            // Clear all selection related classes\n                            oppositeIconMarker.classList.remove(\n                                Selectors.DIFF.CHUNK_SELECTED.name(),\n                                Selectors.DIFF.CHUNK_UNSELECTED.name(),\n                                Selectors.ICONS.SELECT.name(),\n                                Selectors.ICONS.SELECT_LEFT.name(),\n                                Selectors.ICONS.SELECT_RIGHT.name()\n                            );\n\n                            // DETERMINE IF THIS SHOULD BE A PLACEHOLDER\n                            // Apply the same placeholder logic used in _updateOppositeMarker\n\n                            // Check if the opposite element has placeholder attributes\n                            const hasPlaceholder = firstOppositeElement.dataset.hasPlaceholder === 'true';\n                            const isPlaceholderType = firstOppositeElement.classList.contains(Selectors.DIFF.LINE_PLACEHOLDER.name());\n                            const wasPlaceholder = oppositeIconMarker.classList.contains(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n\n                            // Find the corresponding selected element for the same line number\n                            const lineNumber = oppositeLineId.split('-')[1];\n                            const selectedLineId = `${selectedSide}-${lineNumber}`;\n                            const selectedElement = document.querySelector(`[data-line-id=\"${selectedLineId}\"]`);\n\n                            // Check if the selected element indicates this should be a placeholder\n                            const selectedHasPlaceholder = selectedElement?.dataset.hasPlaceholder === 'true';\n                            const selectedIsPlaceholderType = selectedElement?.classList.contains(Selectors.DIFF.LINE_PLACEHOLDER.name());\n\n                            // If any of these conditions are true, this should be a placeholder\n                            if (hasPlaceholder || isPlaceholderType || wasPlaceholder ||\n                                selectedHasPlaceholder || selectedIsPlaceholderType) {\n                                // Set as placeholder\n                                oppositeIconMarker.classList.add(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n                                Debug.log(`ChunkSelectionHandler: Set opposite marker ${oppositeLineId} as placeholder during batch refresh`, null, 3);\n                            } else {\n                                // Normal unselected state\n                                oppositeIconMarker.classList.add(Selectors.DIFF.CHUNK_UNSELECTED.name());\n                            }\n                        }\n                    }\n                }\n\n                // Apply the unselected class to all elements on the opposite side\n                oppositeElements.forEach(element => {\n                    // Remove all selection classes first\n                    element.classList.remove(\n                        Selectors.DIFF.CHUNK_SELECTED.name(),\n                        Selectors.DIFF.CHUNK_UNSELECTED.name()\n                    );\n\n                    // Add unselected class\n                    element.classList.add(Selectors.DIFF.CHUNK_UNSELECTED.name());\n\n                    // Update the parent row too\n                    const row = ChunkUtils.getParentRow(element);\n                    if (row) {\n                        row.classList.remove(\n                            Selectors.DIFF.CHUNK_SELECTED.name(),\n                            Selectors.DIFF.CHUNK_UNSELECTED.name()\n                        );\n                        row.classList.add(Selectors.DIFF.CHUNK_UNSELECTED.name());\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Handle click event on chunk\n     * @private\n     */\n    _handleClick(event) {\n        const element = event.currentTarget;\n        const chunkId = element.getAttribute('data-chunk-id');\n        const side = element.getAttribute('data-side');\n\n        Debug.log(`ChunkSelectionHandler: Click detected on side ${side} for chunk ${chunkId}`, {\n            element: element.outerHTML.substring(0, 100) + '...' // Log first 100 chars of HTML\n        }, 3);\n\n        if (chunkId && side) {\n            // Check if the chunk is already selected on this side\n            const isAlreadySelected = this.selections[chunkId] === side &&\n                element.classList.contains(Selectors.DIFF.CHUNK_SELECTED.name());\n\n            if (isAlreadySelected) {\n                // Unselect this chunk\n                Debug.log(`ChunkSelectionHandler: Unselecting chunk ${chunkId} as it was already selected`, null, 3);\n\n                // Remove from selections\n                delete this.selections[chunkId];\n\n                // Remove from diffConfig if it exists\n                if (this.chunkManager.diffViewer?.diffConfig?.chunkSelections) {\n                    delete this.chunkManager.diffViewer.diffConfig.chunkSelections[chunkId];\n                }\n\n                // Reset visual state for both sides\n                this.visualStateManager.resetVisualState(chunkId);\n\n                // Remove resolved status from all elements with this chunk ID\n                const chunkElements = ChunkUtils.getChunkElements(chunkId);\n                chunkElements.forEach(element => {\n                    element.classList.remove(Selectors.STATUS.RESOLVED.name());\n                    element.classList.add(Selectors.STATUS.UNRESOLVED.name());\n                });\n\n                // Update navigation counter\n                this._updateNavigationCounter();\n\n                // Notify about selection change\n                if (typeof this.chunkManager.onSelectionChange === 'function') {\n                    this.chunkManager.onSelectionChange();\n                }\n            } else {\n                // Get the opposite side\n                const oppositeSide = side === 'left' ? 'right' : 'left';\n\n                // Debug before toggling\n                Debug.log(`ChunkSelectionHandler: Toggling chunk ${chunkId}`, {\n                    selectedSide: side,\n                    oppositeSide: oppositeSide\n                }, 3);\n\n                // Toggle both sides\n                this.toggleChunkSelection(chunkId, side, this.SELECTED);\n                this.toggleChunkSelection(chunkId, oppositeSide, this.UNSELECTED);\n            }\n        }\n    }\n\n    /**\n     * Toggle selection state of a chunk side\n     * @param {string} chunkId - Chunk ID\n     * @param {string} side - 'left' or 'right'\n     * @param {string} state - Selection state constant (SELECTED or UNSELECTED)\n     * @param {boolean} batch - Whether to use batching (default: false for backward compatibility)\n     */\n    toggleChunkSelection(chunkId, side, state, batch = false) {\n        // Update the selections object\n        if (state === this.SELECTED) {\n            this.selections[chunkId] = side;\n\n            // Sync with diffConfig for compatibility\n            this._syncWithDiffConfig(chunkId, side);\n\n            // Update the navigation counter\n            this._updateNavigationCounter();\n\n            if (!batch) {\n                // Add resolved status to all elements with this chunk ID\n                const chunkElements = ChunkUtils.getChunkElements(chunkId);\n                chunkElements.forEach(element => {\n                    element.classList.add(Selectors.STATUS.RESOLVED.name());\n                    element.classList.remove(Selectors.STATUS.UNRESOLVED.name());\n                });\n            }\n        }\n\n        // Update visual selection using the specialized component\n        this.visualStateManager.updateVisualState(chunkId, side, state, batch);\n    }\n\n    /**\n     * Sync selection with diffConfig\n     * @private\n     */\n    _syncWithDiffConfig(chunkId, side) {\n        if (this.chunkManager.diffViewer?.diffConfig?.chunkSelections) {\n            this.chunkManager.diffViewer.diffConfig.chunkSelections[chunkId] = side;\n        }\n    }\n\n    /**\n     * Update navigation counter\n     * @private\n     */\n    _updateNavigationCounter() {\n        if (this.chunkManager.diffViewer?.diffNavigator) {\n            this.chunkManager.diffViewer.diffNavigator.updateCounter();\n        }\n    }\n\n    /**\n     * Get all selections\n     * @returns {Object} Map of chunkId to selected side\n     */\n    getSelections() {\n        return {...this.selections};\n    }\n\n    /**\n     * Check if a chunk is resolved (has selection)\n     * @param {string} chunkId - Chunk ID to check\n     * @returns {boolean} True if resolved\n     */\n    isChunkResolved(chunkId) {\n        return !!this.selections[chunkId];\n    }\n\n    /**\n     * Get unresolved chunk count\n     * @returns {number} Number of unresolved chunks\n     */\n    getUnresolvedCount() {\n        const conflictChunks = this.chunkManager.chunks.filter(c => c.conflict);\n        return conflictChunks.length - Object.keys(this.selections).length;\n    }\n\n    /**\n     * Clear all selections from both sides\n     * @param {boolean} useBatch - Whether to use batching for performance (default: false for backward compatibility)\n     */\n    clearAllSelections(useBatch = false) {\n        // Get all chunks that need resolution\n        const conflictChunks = this.chunkManager.chunks.filter(chunk =>\n            chunk.conflict || chunk.type === 'replace' || chunk.type === 'add' || chunk.type === 'delete'\n        );\n\n        // Check if we should use batching based on number of chunks\n        const largeDiff = conflictChunks.length > 20; // Threshold for considering a diff as \"large\"\n        useBatch = useBatch || largeDiff;\n\n        // Show loader for large operations\n        let loaderId = null;\n        if (useBatch) {\n            const selectedChunks = conflictChunks.filter(chunk => this.isChunkResolved(chunk.id));\n            if (selectedChunks.length > 50) { // Only show loader for large batches\n                const translationManager = TranslationManager.getInstance();\n                const loaderManager = LoaderManager.getInstance();\n                const message = translationManager.get('processingChunks') || 'Processing chunks...';\n                loaderId = loaderManager.showLoader(message, {\n                    fullscreen: true,\n                    zIndex: 9999\n                });\n            }\n        }\n\n        // Start tracking performance\n        const startTime = performance.now();\n\n        if (useBatch) {\n            Debug.log(`ChunkSelectionHandler: Clearing all selections using batch operations`, null, 2);\n\n            // First update internal state\n            const selectedChunks = conflictChunks.filter(chunk => this.isChunkResolved(chunk.id));\n\n            // Use a set for faster lookups\n            const selectedChunkIds = new Set(selectedChunks.map(chunk => chunk.id));\n\n            // Collect all elements that need updating\n            const elementsToUpdate = new Map();\n\n            // Remove from internal objects efficiently\n            selectedChunkIds.forEach(chunkId => {\n                // Remove from selections object\n                delete this.selections[chunkId];\n\n                // Remove from diffConfig if it exists\n                if (this.chunkManager.diffViewer?.diffConfig?.chunkSelections) {\n                    delete this.chunkManager.diffViewer.diffConfig.chunkSelections[chunkId];\n                }\n\n                // Queue visual state reset with batching\n                this.visualStateManager.resetVisualState(chunkId, true);\n\n                // Collect elements for later class updates\n                const elements = ChunkUtils.getChunkElements(chunkId);\n                elementsToUpdate.set(chunkId, elements);\n            });\n\n            // Apply all visual updates in a batch\n            this.visualStateManager.applyBatch(false); // Don't notify yet\n\n            // Update element status classes in a separate batch\n            requestAnimationFrame(() => {\n                elementsToUpdate.forEach((elements, _chunkId) => {\n                    elements.forEach(element => {\n                        element.classList.remove(Selectors.STATUS.RESOLVED.name());\n                        element.classList.add(Selectors.STATUS.UNRESOLVED.name());\n                    });\n                });\n\n                // Update navigation counter after all visual changes\n                this._updateNavigationCounter();\n\n                // Now notify about selection change\n                if (typeof this.chunkManager.onSelectionChange === 'function') {\n                    this.chunkManager.onSelectionChange();\n                }\n\n                // Hide loader if it was shown\n                if (loaderId) {\n                    const loaderManager = LoaderManager.getInstance();\n                    loaderManager.hideLoader(loaderId);\n                }\n\n                // Record performance metrics after all operations\n                this._recordPerformanceMetrics(startTime);\n            });\n        } else {\n            // Legacy approach - clear selection for each chunk individually\n            conflictChunks.forEach(chunk => {\n                // Skip chunks that aren't selected\n                if (!this.isChunkResolved(chunk.id)) return;\n\n                // Remove resolved status from all elements with this chunk ID\n                const chunkElements = ChunkUtils.getChunkElements(chunk.id);\n                chunkElements.forEach(element => {\n                    element.classList.remove(Selectors.STATUS.RESOLVED.name());\n                    element.classList.add(Selectors.STATUS.UNRESOLVED.name());\n                });\n\n                // Remove from selections object\n                delete this.selections[chunk.id];\n\n                // Remove from diffConfig if it exists\n                if (this.chunkManager.diffViewer?.diffConfig?.chunkSelections) {\n                    delete this.chunkManager.diffViewer.diffConfig.chunkSelections[chunk.id];\n                }\n\n                // Reset visual state for both sides\n                this.visualStateManager.resetVisualState(chunk.id);\n            });\n\n            // Update navigation counter\n            this._updateNavigationCounter();\n\n            // Callback to notify of selection change\n            if (typeof this.chunkManager.onSelectionChange === 'function') {\n                this.chunkManager.onSelectionChange();\n            }\n\n            // Record performance metrics\n            this._recordPerformanceMetrics(startTime);\n        }\n    }\n}\n","import { ChunkUtils } from '../../utils/ChunkUtils';\nimport Selectors from '../../constants/Selectors';\nimport { Debug } from '../../utils/Debug';\n\n/**\n * Manages visual state updates for chunk selections\n */\nexport class ChunkVisualStateManager {\n    /**\n     * @param {ChunkManager} chunkManager - Parent chunk manager\n     */\n    constructor(chunkManager) {\n        this.chunkManager = chunkManager;\n        // Batch operations queue\n        this._pendingOperations = [];\n        // Track whether DOM updates are batched\n        this._isBatching = false;\n        // Performance metrics\n        this._metrics = {\n            lastBatchSize: 0,\n            lastBatchTime: 0\n        };\n        Debug.log('ChunkVisualStateManager: Initialized', null, 3);\n    }\n\n    /**\n     * Initialize the visual state manager\n     * Preloads all chunk data for optimal performance with large files\n     */\n    initialize() {\n        // Preload all chunks into cache for better performance\n        ChunkUtils.preloadChunks();\n        Debug.log('ChunkVisualStateManager: Initialized with preloaded chunks', null, 2);\n    }\n\n    /**\n     * Update visual selection state\n     * @param {string} chunkId - Chunk ID\n     * @param {string} side - 'left' or 'right'\n     * @param {string} state - 'selected' or 'unselected'\n     * @param {boolean} batch - Whether to batch operations (defaults to false for backward compatibility)\n     */\n    updateVisualState(chunkId, side, state, batch = false) {\n        Debug.log(`ChunkVisualStateManager: Updating visual state for chunk ${chunkId}, side ${side}, state ${state}`, null, 3);\n\n        // Get all elements for this chunk side\n        const elements = ChunkUtils.getChunkElements(chunkId, side);\n        Debug.log(`ChunkVisualStateManager: Found ${elements.length} elements for chunk ${chunkId}`, null, 3);\n\n        // Sort by line number (only needed for getting the first element)\n        const sortedElements = ChunkUtils.sortElementsByLineNumber(elements);\n\n        // Get the opposite side to handle placeholder synchronization\n        const oppositeSide = side === 'left' ? 'right' : 'left';\n\n        if (batch) {\n            // Add to batch queue\n            this._pendingOperations.push({\n                type: 'updateState',\n                chunkId,\n                side,\n                elements: elements,\n                firstElement: sortedElements.length > 0 ? sortedElements[0] : null,\n                state: state,\n                oppositeSide: oppositeSide\n            });\n        } else {\n            // Apply immediately (for backward compatibility)\n            this._applyStateToElements(elements, state);\n\n            // Only update the icon for the first element\n            if (sortedElements.length > 0) {\n                Debug.log(`ChunkVisualStateManager: Updating icon marker for first element of chunk ${chunkId}`, null, 3);\n\n                // When setting a state on one side, also update opposite side\n                const firstElement = sortedElements[0];\n                if (firstElement && state === 'selected') {\n                    // First handle the selected side\n                    this._updateIconMarker(firstElement, state);\n\n                    // Then handle the opposite side marker as a placeholder\n                    this._updateOppositeMarker(firstElement, oppositeSide);\n                } else {\n                    // Normal case without special opposite handling\n                    this._updateIconMarker(firstElement, state);\n                }\n            } else {\n                Debug.warn(`ChunkVisualStateManager: No elements found to update icon for chunk ${chunkId}`, null, 3);\n            }\n\n            // Notify about selection change\n            this._notifySelectionChange();\n        }\n    }\n\n    /**\n     * Update the opposite side's marker when a chunk is selected\n     * @private\n     * @param {Element} element - The element being selected\n     * @param {string} oppositeSide - The opposite side ('left' or 'right')\n     */\n    _updateOppositeMarker(element, oppositeSide) {\n        if (!element?.dataset?.lineId) return;\n\n        // Extract line number from lineId (format: \"side-number\")\n        const lineIdParts = element.dataset.lineId.split('-');\n        if (lineIdParts.length !== 2) return;\n\n        const lineNumber = lineIdParts[1];\n        const oppositeLineId = `${oppositeSide}-${lineNumber}`;\n\n        // Find the opposite marker\n        const oppositeMarker = ChunkUtils.getIconMarker(oppositeLineId);\n        if (!oppositeMarker) {\n            Debug.warn(`ChunkVisualStateManager: Could not find opposite marker for ${oppositeLineId}`, null, 3);\n            return;\n        }\n\n        Debug.log(`ChunkVisualStateManager: Updating opposite marker ${oppositeLineId}`, {\n            currentClasses: Array.from(oppositeMarker.classList)\n        }, 3);\n\n        // Remove selection classes\n        oppositeMarker.classList.remove(\n            Selectors.DIFF.CHUNK_SELECTED.name(),\n            Selectors.DIFF.CHUNK_UNSELECTED.name(),\n            Selectors.ICONS.SELECT.name(),\n            Selectors.ICONS.SELECT_LEFT.name(),\n            Selectors.ICONS.SELECT_RIGHT.name()\n        );\n\n        // CRITICAL DECISION POINT: Determine if the opposite marker should be a placeholder\n        // This is determined by whether the line only exists on one side\n\n        // Only mark as placeholder if it was originally a placeholder\n        const wasPlaceholder = oppositeMarker.classList.contains(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n\n        if (wasPlaceholder) {\n            // If it was a placeholder, keep it as a placeholder\n            oppositeMarker.classList.add(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n            Debug.log(`ChunkVisualStateManager: Preserved placeholder status for ${oppositeLineId}`, null, 3);\n        } else {\n            // Otherwise mark it as unselected\n            oppositeMarker.classList.add(Selectors.DIFF.CHUNK_UNSELECTED.name());\n            Debug.log(`ChunkVisualStateManager: Set opposite marker ${oppositeLineId} as unselected`, null, 3);\n        }\n    }\n\n    /**\n     * Reset visual state for a chunk\n     * @param {string} chunkId - Chunk ID\n     * @param {boolean} batch - Whether to batch operations (defaults to false for backward compatibility)\n     */\n    resetVisualState(chunkId, batch = false) {\n        Debug.log(`ChunkVisualStateManager: Resetting visual state for chunk ${chunkId}`, null, 3);\n\n        // Get all elements for this chunk (both sides)\n        const elements = ChunkUtils.getChunkElements(chunkId);\n        Debug.log(`ChunkVisualStateManager: Found ${elements.length} elements for chunk ${chunkId}`, null, 3);\n\n        // Get icon markers associated with this chunk more efficiently\n        const iconMarkers = ChunkUtils.getChunkIconMarkers(chunkId);\n\n        if (batch) {\n            // Add to batch queue\n            this._pendingOperations.push({\n                type: 'resetState',\n                chunkId,\n                elements: elements,\n                iconMarkers: iconMarkers\n            });\n        } else {\n            // Apply immediately (for backward compatibility)\n            this._applyResetToElements(elements, iconMarkers);\n\n            Debug.log(`ChunkVisualStateManager: Reset ${iconMarkers.length} icon markers for chunk ${chunkId}`, null, 3);\n\n            // Notify about selection change\n            this._notifySelectionChange();\n        }\n    }\n\n    /**\n     * Process all pending visual updates in a single batch\n     * @param {boolean} notify - Whether to trigger notification after batch (default: true)\n     */\n    applyBatch(notify = true) {\n        if (this._pendingOperations.length === 0) {\n            return;\n        }\n\n        // Set batching state flag\n        this._isBatching = true;\n        const batchSize = this._pendingOperations.length;\n        this._metrics.lastBatchSize = batchSize;\n\n        // Use a single RAF call for better performance\n        requestAnimationFrame(() => {\n            const startTime = performance.now();\n            Debug.log(`ChunkVisualStateManager: Applying batch of ${batchSize} operations`, null, 2);\n\n            try {\n                // Group operations by type for better performance\n                const updateOperations = [];\n                const resetOperations = [];\n\n                // Sort operations into groups\n                this._pendingOperations.forEach(operation => {\n                    if (operation.type === 'updateState') {\n                        updateOperations.push(operation);\n                    } else if (operation.type === 'resetState') {\n                        resetOperations.push(operation);\n                    }\n                });\n\n                // Process reset operations first to ensure clean state\n                if (resetOperations.length > 0) {\n                    this._processBatchedResets(resetOperations);\n                }\n\n                // Then process update operations\n                if (updateOperations.length > 0) {\n                    this._processBatchedUpdates(updateOperations);\n                }\n\n                // Track batch processing time\n                const endTime = performance.now();\n                const processingTime = endTime - startTime;\n                this._metrics.lastBatchTime = processingTime;\n\n                Debug.log(`ChunkVisualStateManager: Batch processing completed in ${processingTime.toFixed(2)}ms`,\n                    {\n                        operations: batchSize,\n                        resetOps: resetOperations.length,\n                        updateOps: updateOperations.length,\n                        msPerOperation: (processingTime / batchSize).toFixed(2)\n                    }, 2);\n            }\n            catch (error) {\n                Debug.error(`Error during batch processing: ${error.message}`, error, 1);\n            }\n            finally {\n                // Clear the queue\n                this._pendingOperations = [];\n\n                // Reset batching state flag\n                this._isBatching = false;\n\n                // Send notification if requested\n                if (notify) {\n                    this._notifySelectionChange();\n                }\n            }\n        });\n    }\n\n    /**\n     * Process a batch of reset operations efficiently\n     * @private\n     */\n    _processBatchedResets(operations) {\n        if (operations.length === 0) return;\n\n        // Group elements and markers by class operations for fewer DOM updates\n        const allElements = [];\n        const allIconMarkers = [];\n\n        // Collect all elements and markers to be reset\n        operations.forEach(operation => {\n            if (operation.elements) {\n                allElements.push(...operation.elements);\n            }\n            if (operation.iconMarkers) {\n                allIconMarkers.push(...operation.iconMarkers);\n            }\n        });\n\n        // Apply resets in bulk\n        this._applyResetToElements(allElements, allIconMarkers);\n    }\n\n    /**\n     * Process a batch of update operations efficiently\n     * @private\n     */\n    _processBatchedUpdates(operations) {\n        if (operations.length === 0) return;\n\n        // Group elements by state for more efficient DOM updates\n        const elementsByState = {\n            'selected': [],\n            'unselected': []\n        };\n\n        // First elements for icon marker updates\n        const firstElementsByState = {\n            'selected': {},  // chunkId -> {element, oppositeSide}\n            'unselected': {} // chunkId -> {element}\n        };\n\n        // Group elements by state\n        operations.forEach(operation => {\n            const { elements, firstElement, state, chunkId, side, oppositeSide } = operation;\n\n            if (elements && elements.length > 0) {\n                if (state === 'selected' || state === 'unselected') {\n                    elementsByState[state].push(...elements);\n                }\n            }\n\n            // Track first element of each chunk for icon marker updates\n            if (firstElement && chunkId) {\n                if (state === 'selected' || state === 'unselected') {\n                    firstElementsByState[state][chunkId] = {\n                        element: firstElement,\n                        side: side,\n                        oppositeSide: oppositeSide\n                    };\n                }\n            }\n        });\n\n        // Apply updates by state\n        Object.entries(elementsByState).forEach(([state, elements]) => {\n            if (elements.length > 0) {\n                this._applyStateToElements(elements, state);\n            }\n        });\n\n        // Update icon markers\n        Object.entries(firstElementsByState).forEach(([state, chunksMap]) => {\n            Object.entries(chunksMap).forEach(([_chunkId, data]) => {\n                // Update the element's marker\n                this._updateIconMarker(data.element, state);\n\n                // For selected elements, also update the opposite marker\n                if (state === 'selected' && data.oppositeSide) {\n                    this._updateOppositeMarker(data.element, data.oppositeSide);\n                }\n            });\n        });\n\n        // Force a DOM layout refresh to ensure styles are applied\n        if (document.body) {\n            document.body.getBoundingClientRect();\n        }\n    }\n\n    /**\n     * Apply state changes to elements using efficient operations\n     * @private\n     */\n    _applyStateToElements(elements, state) {\n        if (!elements || elements.length === 0) return;\n\n        // For better performance, prepare the classes to add/remove\n        const removeClasses = [\n            Selectors.DIFF.CHUNK_SELECTED.name(),\n            Selectors.DIFF.CHUNK_UNSELECTED.name()\n        ];\n\n        let addClass = '';\n        if (state === 'selected') {\n            addClass = Selectors.DIFF.CHUNK_SELECTED.name();\n        } else if (state === 'unselected') {\n            addClass = Selectors.DIFF.CHUNK_UNSELECTED.name();\n        } else {\n            // Fallback for backward compatibility\n            addClass = state;\n        }\n\n        // Collect all rows to update at once (reduces layout thrashing)\n        const rows = new Set();\n\n        // Apply to all elements efficiently\n        elements.forEach(element => {\n            // Remove classes\n            element.classList.remove(...removeClasses);\n\n            // Add class\n            element.classList.add(addClass);\n\n            // Add placeholder class if needed\n            if (element.classList.contains(Selectors.DIFF.LINE_PLACEHOLDER.name())) {\n                element.classList.add(Selectors.DIFF.PLACEHOLDER.name());\n            }\n\n            // Collect parent row for batch update\n            const row = ChunkUtils.getParentRow(element);\n            if (row) {\n                rows.add(row);\n            }\n        });\n\n        // Update all rows at once\n        rows.forEach(row => {\n            row.classList.remove(...removeClasses);\n            row.classList.add(addClass);\n        });\n    }\n\n    /**\n     * Apply reset operations to elements and icon markers efficiently\n     * @private\n     */\n    _applyResetToElements(elements, iconMarkers) {\n        if ((!elements || elements.length === 0) && (!iconMarkers || iconMarkers.length === 0)) return;\n\n        // Pre-compute classes to remove for better performance\n        const removeClasses = [\n            Selectors.DIFF.CHUNK_SELECTED.name(),\n            Selectors.DIFF.CHUNK_UNSELECTED.name()\n        ];\n\n        const iconRemoveClasses = [\n            Selectors.DIFF.CHUNK_SELECTED.name(),\n            Selectors.DIFF.CHUNK_UNSELECTED.name(),\n            Selectors.ICONS.SELECT.name(),\n            Selectors.ICONS.SELECT_LEFT.name(),\n            Selectors.ICONS.SELECT_RIGHT.name()\n        ];\n\n        // Collect all rows to update at once (reduces layout thrashing)\n        const rows = new Set();\n\n        // Remove classes from elements efficiently\n        if (elements && elements.length > 0) {\n            elements.forEach(el => {\n                // Skip null or undefined elements\n                if (!el) return;\n\n                // Reset element classes\n                el.classList.remove(...removeClasses);\n\n                // Collect parent row for batch update\n                const row = ChunkUtils.getParentRow(el);\n                if (row) {\n                    rows.add(row);\n                }\n            });\n\n            // Reset all rows at once\n            rows.forEach(row => {\n                row.classList.remove(...removeClasses);\n            });\n        }\n\n        // Reset icon markers efficiently\n        if (iconMarkers && iconMarkers.length > 0) {\n            iconMarkers.forEach(marker => {\n                if (marker) {\n                    // Store placeholder status before removing classes\n                    const isPlaceholder = marker.classList.contains(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n\n                    // Remove selection-related classes\n                    marker.classList.remove(...iconRemoveClasses);\n\n                    // Preserve placeholder status when resetting\n                    if (isPlaceholder) {\n                        marker.classList.add(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Update icon marker for the element\n     * @private\n     */\n    _updateIconMarker(element, state) {\n        if (!element) return;\n\n        const lineId = element.dataset.lineId;\n        if (!lineId) return;\n\n        Debug.log(`ChunkVisualStateManager: Looking for icon marker with lineId ${lineId}`, null, 3);\n        // Find and update the icon marker (use cached version if available)\n        const iconMarker = ChunkUtils.getIconMarker(lineId);\n\n        if (iconMarker) {\n            Debug.log(`ChunkVisualStateManager: Updating icon marker state to ${state}`, {\n                lineId: lineId,\n                currentClasses: Array.from(iconMarker.classList)\n            }, 3);\n\n            // Store the placeholder status before removing classes\n            const isPlaceholder = iconMarker.classList.contains(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n\n            // Only remove selection-related classes, preserve placeholder status\n            iconMarker.classList.remove(\n                Selectors.DIFF.CHUNK_SELECTED.name(),\n                Selectors.DIFF.CHUNK_UNSELECTED.name(),\n                Selectors.ICONS.SELECT.name(),\n                Selectors.ICONS.SELECT_LEFT.name(),\n                Selectors.ICONS.SELECT_RIGHT.name()\n            );\n\n            // Add the appropriate class based on state\n            if (state === 'selected') {\n                iconMarker.classList.add(Selectors.DIFF.CHUNK_SELECTED.name());\n\n                // Add the side-appropriate selection icon class\n                if (element.dataset.side === 'left') {\n                    iconMarker.classList.add(Selectors.ICONS.SELECT_LEFT.name());\n                } else {\n                    iconMarker.classList.add(Selectors.ICONS.SELECT_RIGHT.name());\n                }\n            } else if (state === 'unselected') {\n                iconMarker.classList.add(Selectors.DIFF.CHUNK_UNSELECTED.name());\n            } else {\n                // Fallback for backward compatibility\n                iconMarker.classList.add(state);\n            }\n\n            // Preserve placeholder status - don't try to infer it from the element\n            if (isPlaceholder && !iconMarker.classList.contains(Selectors.ICONS.MARKER_PLACEHOLDER.name())) {\n                iconMarker.classList.add(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n                Debug.log(`ChunkVisualStateManager: Preserved placeholder marker status`, null, 3);\n            }\n        } else {\n            Debug.warn(`ChunkVisualStateManager: No icon marker found for line ${lineId}`, null, 3);\n        }\n    }\n\n    /**\n     * Notify about selection change\n     * @private\n     */\n    _notifySelectionChange() {\n        Debug.log(`ChunkVisualStateManager: Notifying about selection change`, null, 3);\n        if (typeof this.chunkManager.onSelectionChange === 'function') {\n            this.chunkManager.onSelectionChange();\n        } else {\n            Debug.log(`ChunkVisualStateManager: No onSelectionChange handler defined`, null, 3);\n        }\n    }\n\n    /**\n     * Get performance metrics\n     * @returns {Object} Current metrics\n     */\n    getMetrics() {\n        return {...this._metrics};\n    }\n}\n","import { ChunkUtils } from '../../utils/ChunkUtils';\nimport { Debug } from '../../utils/Debug';\n\n/**\n * Generates merged content from selections\n */\nexport class MergeContentGenerator {\n    /**\n     * @param {ChunkManager} chunkManager - Parent chunk manager\n     */\n    constructor(chunkManager) {\n        this.chunkManager = chunkManager;\n    }\n\n    /**\n     * Generate merged content based on selections\n     * @param {Object} selections - Map of chunk IDs to selected sides\n     * @returns {string} Merged content\n     */\n    generateMergedContent(selections) {\n        // If no selections, return right side content\n        if (Object.keys(selections).length === 0) {\n            return ChunkUtils.generateFileContent(this.chunkManager.newContent);\n        }\n\n        // Start with empty result array\n        const result = [];\n\n        // Group right-side lines by chunk ID for better lookups\n        const rightChunkLines = {};\n        this.chunkManager.newContent.forEach(line => {\n            if (line.chunkId) {\n                if (!rightChunkLines[line.chunkId]) {\n                    rightChunkLines[line.chunkId] = [];\n                }\n                rightChunkLines[line.chunkId].push(line);\n            }\n        });\n\n        // Group left-side lines by chunk ID for better lookups\n        const leftChunkLines = {};\n        this.chunkManager.oldContent.forEach(line => {\n            if (line.chunkId) {\n                if (!leftChunkLines[line.chunkId]) {\n                    leftChunkLines[line.chunkId] = [];\n                }\n                leftChunkLines[line.chunkId].push(line);\n            }\n        });\n\n        Debug.log('leftChunkLines', leftChunkLines, 3);\n        Debug.log('rightChunkLines', rightChunkLines, 3);\n        Debug.log('selections', selections, 3);\n\n        // Track processed chunks to avoid duplicates\n        const processedChunks = new Set();\n\n        // First pass: add non-chunk lines and handle chunk lines based on selection\n        for (let i = 0; i < this.chunkManager.newContent.length; i++) {\n            const line = this.chunkManager.newContent[i];\n\n            // Non-chunk content lines always get added\n            if (!line.chunkId && line.type === 'content') {\n                result.push(line.line);\n                continue;\n            }\n\n            // Skip non-content lines\n            if (line.type !== 'content') {\n                continue;\n            }\n\n            // Process chunk lines\n            if (line.chunkId && !processedChunks.has(line.chunkId)) {\n                // Mark this chunk as processed\n                processedChunks.add(line.chunkId);\n\n                // Get chunk selection (left, right, or undefined)\n                const selection = selections[line.chunkId];\n\n                // Handle based on selection\n                if (selection === 'left') {\n                    // Use left content for this chunk\n                    const leftLines = leftChunkLines[line.chunkId] || [];\n                    const contentLines = leftLines.filter(l => l.type === 'content');\n\n                    if (contentLines.length > 0) {\n                        contentLines.forEach(l => result.push(l.line));\n                    }\n                } else {\n                    // Use right content for this chunk\n                    const rightLines = rightChunkLines[line.chunkId] || [];\n                    const contentLines = rightLines.filter(l => l.type === 'content');\n\n                    if (contentLines.length > 0) {\n                        contentLines.forEach(l => result.push(l.line));\n                    }\n                }\n            }\n        }\n\n        // Return the combined content\n        return result.join('\\n');\n    }\n\n    /**\n     * Generate file content from lines\n     * @param {Array} lines - Array of line objects\n     * @returns {string} Generated content\n     */\n    generateFileFromLines(lines) {\n        return ChunkUtils.generateFileContent(lines);\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { TranslationManager } from '../../utils/TranslationManager';\nimport { LoaderManager } from '../../utils/LoaderManager';\nimport AlertManager from '../../utils/AlertManager';\n\n/**\n * Handles merge operation actions\n */\nexport class MergeOperationHandler {\n    /**\n     * @param {MergeHandler} mergeHandler - Parent merge handler\n     */\n    constructor(mergeHandler) {\n        this.mergeHandler = mergeHandler;\n        this.diffViewer = mergeHandler.diffViewer;\n    }\n\n    /**\n     * Proceed with merge operation - this is the main entry point called from MergeHandler\n     * @param {string} mergeType - Type of merge ('new', 'new-suffix', etc.)\n     * @returns {Promise<Object>} Result object with success status\n     */\n    async proceedWithMerge(mergeType) {\n        Debug.log('MergeOperationHandler: Proceeding with merge', { mergeType }, 2);\n\n        // Get runtime properties to check context\n        const runtimeProps = this.diffViewer.getRuntimeProps();\n        const fileRefId = runtimeProps.fileRefId || '';\n        const oldFileRefId = runtimeProps.oldFileRefId || '';\n\n        // If mergeType requires file references but we don't have them,\n        // automatically switch to clipboard mode\n        if ((mergeType === 'new' || mergeType === 'new-suffix') && !fileRefId) {\n            Debug.log('MergeOperationHandler: Switching to clipboard mode (no fileRefId available)', null, 2);\n            mergeType = 'clipboard';\n        } else if ((mergeType === 'old' || mergeType === 'old-suffix') && !oldFileRefId) {\n            Debug.log('MergeOperationHandler: Switching to clipboard mode (no oldFileRefId available)', null, 2);\n            mergeType = 'clipboard';\n        } else if ((mergeType === 'both' || mergeType === 'both-suffix') && (!fileRefId || !oldFileRefId)) {\n            Debug.log('MergeOperationHandler: Switching to clipboard mode (missing file reference IDs)', null, 2);\n            mergeType = 'clipboard';\n        }\n\n        // Get translation manager for loading message\n        const translationManager = TranslationManager.getInstance();\n        const loadingMessage = translationManager.get('loadingContent', 'Processing merge...');\n\n        // Show loading indicator\n        const loaderManager = LoaderManager.getInstance();\n        const loaderId = loaderManager.showLoader(loadingMessage, {\n            fullscreen: true,\n            zIndex: 1000 // Ensure it appears above other UI elements\n        });\n\n        try {\n            // Generate merged content\n            const mergedContent = this.diffViewer.chunkManager.generateMergedContent();\n\n            // Apply the merge - skip server calls for clipboard type (text-compare, url-compare, file-upload)\n            let result;\n            if (mergeType === 'clipboard') {\n                // For clipboard type, we don't need to save on server, just return success\n                result = {\n                    success: true,\n                    message: translationManager.get('mergeSuccessClipboard', 'Merge completed successfully. The merged content is ready.')\n                };\n            } else {\n                // For file-browser mode, apply the merge on server\n                result = await this.applyMerge(mergedContent, mergeType);\n            }\n\n            // Hide loading indicator\n            loaderManager.hideLoader(loaderId);\n\n            // Show result message\n            if (result.success) {\n                // Get the result container and show success message\n                const resultContainer = document.getElementById('vdm-merge__result');\n                if (resultContainer) {\n                    resultContainer.innerHTML = '';\n                    resultContainer.classList.remove('vdm-d-none');\n\n                    // Use AlertManager to show success message\n                    const alertManager = AlertManager.getInstance();\n                    const alertElement = alertManager.showSuccess(result.message, {\n                        timeout: 0, // Don't auto-dismiss\n                        translate: false // Message is already translated\n                    });\n\n                    resultContainer.appendChild(alertElement);\n\n                    // Scroll to the result container\n                    this.scrollToMergeResult();\n                }\n            } else {\n                // Show error message\n                const resultContainer = document.getElementById('vdm-merge__result');\n                if (resultContainer) {\n                    resultContainer.innerHTML = '';\n                    resultContainer.classList.remove('vdm-d-none');\n\n                    // Use AlertManager to show error message\n                    const alertManager = AlertManager.getInstance();\n                    const alertElement = alertManager.showError(result.message || 'An error occurred during the merge operation.', {\n                        timeout: 0, // Don't auto-dismiss\n                        translate: false // Message is already translated\n                    });\n\n                    resultContainer.appendChild(alertElement);\n\n                    // Scroll to the result container\n                    this.scrollToMergeResult();\n                }\n            }\n\n            return result;\n        } catch (error) {\n            // Hide loading indicator in case of error\n            loaderManager.hideLoader(loaderId);\n\n            Debug.error('MergeOperationHandler: Error in merge operation', error, 1);\n\n            // Show error message in UI\n            const resultContainer = document.getElementById('vdm-merge__result');\n            if (resultContainer) {\n                resultContainer.innerHTML = '';\n                resultContainer.classList.remove('vdm-d-none');\n\n                // Use AlertManager to show error message\n                const alertManager = AlertManager.getInstance();\n                const errorMessage = `Error: ${error.message || 'An unexpected error occurred during merge.'}`;\n                const alertElement = alertManager.showError(errorMessage, {\n                    timeout: 0, // Don't auto-dismiss\n                    translate: false // Error message doesn't need translation\n                });\n\n                resultContainer.appendChild(alertElement);\n            }\n\n            return {\n                success: false,\n                message: error.message || 'An unexpected error occurred during merge'\n            };\n        }\n    }\n\n    /**\n     * Apply merged content to file\n     * @param {string} mergedContent - Merged content\n     * @param {string} mergeType - Merge type (new, new-suffix, old, old-suffix, both, both-suffix)\n     * @returns {Promise<Object>} Result object with success status\n     */\n    async applyMerge(mergedContent, mergeType) {\n        // Get the runtime properties - using only fileRefId, not server paths\n        const runtimeProps = this.diffViewer.getRuntimeProps();\n\n        // Get only the file reference IDs - security improvement\n        const fileRefId = runtimeProps.fileRefId || '';\n        const oldFileRefId = runtimeProps.oldFileRefId || '';\n\n        Debug.log('MergeOperationHandler: File references for merge operation', {\n            fileRefId,\n            oldFileRefId,\n            mergeType\n        }, 2);\n\n        // If no file references are available, automatically fall back to clipboard mode\n        if (((mergeType === 'new' || mergeType === 'new-suffix') && !fileRefId) ||\n            ((mergeType === 'old' || mergeType === 'old-suffix') && !oldFileRefId) ||\n            ((mergeType === 'both' || mergeType === 'both-suffix') && (!fileRefId || !oldFileRefId))) {\n\n            Debug.log('MergeOperationHandler: Switching to clipboard mode in applyMerge (missing file references)', null, 2);\n            return {\n                success: true,\n                message: TranslationManager.getInstance().get('mergeSuccessClipboard', 'Merge completed successfully. The merged content is ready.')\n            };\n        }\n\n        // Rest of original validation kept for safety\n        if ((mergeType === 'new' || mergeType === 'new-suffix') && !fileRefId) {\n            Debug.error('MergeOperationHandler: No file reference ID available for new file', null, 1);\n            return {\n                success: false,\n                message: 'No file reference ID available to save changes to new file'\n            };\n        } else if ((mergeType === 'old' || mergeType === 'old-suffix') && !oldFileRefId) {\n            Debug.error('MergeOperationHandler: No file reference ID available for old file', null, 1);\n            return {\n                success: false,\n                message: 'No file reference ID available to save changes to old file'\n            };\n        } else if ((mergeType === 'both' || mergeType === 'both-suffix') && (!fileRefId || !oldFileRefId)) {\n            Debug.error('MergeOperationHandler: Missing file reference IDs for both files', null, 1);\n            return {\n                success: false,\n                message: 'Missing file reference IDs to save changes to both files'\n            };\n        }\n\n        // Get selections and beautification status\n        const selections = JSON.stringify(this.diffViewer.chunkManager.selections);\n        const wasBeautified = this.diffViewer.isContentBeautified() ? 1 : 0;\n\n        try {\n            // SECURITY: Only use fileRefId - never pass server paths\n            const formParams = {\n                action: 'registerMergedContent',\n                content: mergedContent,\n                selections,\n                mergeType,\n                wasBeautified\n            };\n\n            // Add appropriate file reference IDs based on merge type\n            if (mergeType === 'new' || mergeType === 'new-suffix' || mergeType === 'both' || mergeType === 'both-suffix') {\n                formParams.fileRefId = fileRefId;\n            }\n\n            if (mergeType === 'old' || mergeType === 'old-suffix' || mergeType === 'both' || mergeType === 'both-suffix') {\n                formParams.oldFileRefId = oldFileRefId;\n            }\n\n            Debug.log('MergeOperationHandler: Form parameters for save request', formParams, 2);\n\n            // Get API endpoint\n            const endpoint = await this.diffViewer.getEndpoint('ajaxDiffMerge');\n            Debug.log('MergeOperationHandler: Using endpoint', { endpoint }, 2);\n\n            // Send the request\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams(formParams)\n            });\n\n            // Parse response\n            const result = await response.json();\n            Debug.log('MergeOperationHandler: API response', result, 2);\n\n            return result;\n        } catch (error) {\n            Debug.error(\"MergeOperationHandler: Error applying merge:\", error, 1);\n            return {\n                success: false,\n                message: `Error applying merge: ${error.message}`\n            };\n        }\n    }\n\n    /**\n     * Scroll to the merge result container\n     */\n    scrollToMergeResult() {\n        const resultElement = document.getElementById('vdm-merge__result');\n        if (resultElement) {\n            // Scroll the element into view with smooth behavior\n            resultElement.scrollIntoView({\n                behavior: 'smooth',\n                block: 'center'\n            });\n\n            Debug.log('MergeOperationHandler: Scrolled to merge result', null, 2);\n        }\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { MergeContentFormatter } from '../../utils/MergeContentFormatter';\nimport { DOMUtils } from '../../utils/DOMUtils';\nimport { StringUtils } from '../../utils/StringUtils';\nimport { CopyButton } from '../syntax/CopyButton';\nimport Selectors from '../../constants/Selectors';\nimport { TranslationManager } from '../../utils/TranslationManager';\nimport { LoaderManager } from '../../utils/LoaderManager';\n\n/**\n * Handles preview functionality for merges\n */\nexport class MergePreviewManager {\n    /**\n     * Initialize preview manager\n     * @param {MergeHandler} mergeHandler - Parent merge handler\n     */\n    constructor(mergeHandler) {\n        this.mergeHandler = mergeHandler;\n        this.diffViewer = mergeHandler.diffViewer;\n        this.modalManager = mergeHandler.modalManager;\n    }\n\n    /**\n     * Initialize preview button and events\n     * Sets up the preview button click handler\n     */\n    initialize() {\n        // Set up the preview button event handler\n        this.setupPreviewButton();\n        Debug.log('MergePreviewManager: Initialized', null, 2);\n    }\n\n    /**\n     * Set up the preview button with event handler\n     * Recreates button to remove existing handlers\n     */\n    setupPreviewButton() {\n        // Try to find the standard preview button first\n        const previewButton = document.getElementById(Selectors.MERGE.BUTTON_PREVIEW.name());\n\n        // If not found, check for the \"Get merged result\" button (used in local-only mode)\n        const getMergedResultButton = !previewButton ?\n            document.getElementById(Selectors.MERGE.GET_MERGED_RESULT_BTN.name()) : null;\n\n        // Use whichever button is available\n        const buttonToUse = previewButton || getMergedResultButton;\n\n        if (!buttonToUse) {\n            Debug.warn('MergePreviewManager: Preview button not found', null, 2);\n            return;\n        }\n\n        // Remove any existing handlers by cloning\n        const newBtn = buttonToUse.cloneNode(true);\n        if (buttonToUse.parentNode) {\n            buttonToUse.parentNode.replaceChild(newBtn, buttonToUse);\n        }\n\n        // Add the icon and text if needed (only for the regular preview button)\n        if (buttonToUse === previewButton && (!newBtn.innerHTML || newBtn.innerHTML.trim() === '')) {\n            newBtn.innerHTML = DOMUtils.getIconHtml('eye', { classes: 'me-2' }) + 'Preview';\n        }\n\n        // Add handler\n        newBtn.addEventListener('click', this.handlePreviewClick.bind(this));\n        Debug.log(`MergePreviewManager: ${buttonToUse === previewButton ? 'Preview' : 'Get merged result'} button handler set up`, null, 3);\n    }\n\n    /**\n     * Handle preview button click\n     * Generates preview content and shows in modal\n     */\n    handlePreviewClick() {\n        Debug.log('MergePreviewManager: Preview button clicked', null, 2);\n\n        // Get translation manager for loading message\n        const translationManager = TranslationManager.getInstance();\n        const loadingMessage = translationManager.get('loadingContent', 'Generating preview...');\n\n        // Show loading indicator\n        const loaderManager = LoaderManager.getInstance();\n        const loaderId = loaderManager.showLoader(loadingMessage, {\n            fullscreen: true,\n            zIndex: 1000 // Ensure it appears above other UI elements\n        });\n\n        try {\n            // Get the merged content from the content generator\n            const mergedContent = this.mergeHandler.getMergedContent();\n\n            // Get file extension from runtime properties instead of options\n            const fileToMerge = this.diffViewer.runtimeProps?.filepath || '';\n            const extension = fileToMerge.split('.').pop().toLowerCase();\n\n            // Format the content for preview with line numbers\n            const formattedContent = MergeContentFormatter.formatPreview(mergedContent, extension, true);\n\n            // Hide loading indicator now that content is ready\n            loaderManager.hideLoader(loaderId);\n\n            // Set the filename in the preview modal title using DOMUtils\n            DOMUtils.setContent(\n                Selectors.MODAL.PREVIEW_FILENAME.name(),\n                this.diffViewer.runtimeProps.filepath || 'merged-file'\n            );\n\n            // Use ModalManager to set content and open modal\n            this.modalManager.setContent(\n                Selectors.MODAL.PREVIEW.name(),\n                formattedContent,\n                Selectors.MODAL.PREVIEW_CONTENT_ID.name()\n            );\n\n            // Create controls container\n            const controlsContainer = document.createElement('div');\n            controlsContainer.classList.add(Selectors.UTILITY.FLEX.name(),\n                                           Selectors.UTILITY.JUSTIFY_CONTENT_BETWEEN.name(),\n                                           Selectors.UTILITY.MARGIN_TOP_2.name(),\n                                           Selectors.UTILITY.PADDING_2.name());\n\n            // Create message area\n            const messageArea = document.createElement('div');\n            messageArea.id = 'merge-preview-message';\n            messageArea.classList.add(Selectors.UTILITY.FLEX.name(),\n                                     Selectors.UTILITY.ALIGN_ITEMS_CENTER.name());\n            controlsContainer.appendChild(messageArea);\n\n            // Open the modal\n            this.modalManager.open(Selectors.MODAL.PREVIEW.name());\n\n            // Apply syntax highlighting if available\n            this.applySyntaxHighlighting();\n\n            // Add copy buttons to code blocks\n            CopyButton.addCopyButtonsToPreview(Selectors.MODAL.PREVIEW_CONTENT_ID.name());\n\n            Debug.log('MergePreviewManager: Preview opened successfully', null, 2);\n        } catch (error) {\n            // Hide loading indicator in case of error\n            loaderManager.hideLoader(loaderId);\n\n            Debug.error('MergePreviewManager: Error during preview:', error, 2);\n            this.showPreviewError(error);\n        }\n    }\n\n    /**\n     * Apply syntax highlighting to preview content\n     * Uses highlight.js if available\n     */\n    applySyntaxHighlighting() {\n        if (!window.hljs) {\n            Debug.log('MergePreviewManager: Highlight.js not available', null, 3);\n            return;\n        }\n\n        try {\n            // Use DOMUtils to get the preview element\n            const preElement = DOMUtils.getElement(Selectors.MODAL.PREVIEW_CONTENT_ID.name())?.querySelector('pre');\n            const codeElement = preElement?.querySelector('code');\n\n            if (!codeElement) {\n                Debug.warn('MergePreviewManager: No code element found for highlighting', null, 2);\n                return;\n            }\n\n            // Apply syntax highlighting\n            window.hljs.highlightElement(codeElement);\n\n            // Add line numbers if the pre element has the data-line-numbers attribute\n            if (preElement.getAttribute('data-line-numbers') === 'true' && window.hljs.lineNumbersBlock) {\n                window.hljs.lineNumbersBlock(codeElement);\n                Debug.log('MergePreviewManager: Line numbers added to preview', null, 3);\n            }\n\n            Debug.log('MergePreviewManager: Syntax highlighting applied', null, 3);\n        } catch (error) {\n            Debug.warn('MergePreviewManager: Error applying syntax highlighting:', error, 2);\n        }\n    }\n\n    /**\n     * Show error in preview modal\n     * @param {Error} error - Error object\n     */\n    showPreviewError(error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        const escapedError = StringUtils.escapeHtml(errorMessage);\n\n        // First clear the modal content\n        this.modalManager.setContent(\n            Selectors.MODAL.PREVIEW.name(),\n            '',\n            Selectors.MODAL.PREVIEW_CONTENT_ID.name()\n        );\n\n        // Then use DOMUtils to show the message\n        DOMUtils.showMessage(\n            Selectors.MODAL.PREVIEW_CONTENT_ID.name(),\n            `<h4>Error Generating Preview</h4><p>${escapedError}</p>`,\n            'danger',\n            { className: '' } // No margin in modal\n        );\n\n        this.modalManager.open(Selectors.MODAL.PREVIEW.name());\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { DOMUtils } from '../../utils/DOMUtils';\nimport { MergeContentFormatter } from '../../utils/MergeContentFormatter';\nimport { NavigationUtils } from '../../utils/NavigationUtils';\nimport { TranslationManager } from '../../utils/TranslationManager';\nimport Selectors from '../../constants/Selectors';\n\n/**\n * Controls merge UI elements and interactions\n */\nexport class MergeUIController {\n    /**\n     * Initialize UI controller\n     * @param {MergeHandler} mergeHandler - Parent merge handler\n     */\n    constructor(mergeHandler) {\n        this.mergeHandler = mergeHandler;\n        this.diffViewer = mergeHandler.diffViewer;\n        this.modalManager = mergeHandler.modalManager;\n        this.translationManager = TranslationManager.getInstance();\n\n        // UI element references\n        this.mergeDestination = null;\n        this.mergeToggleBtn = null;\n        this.mergeToggleIcon = null;\n        this.mergeToggleText = null;\n    }\n\n    /**\n     * Initialize UI elements and event handlers\n     */\n    initialize() {\n        // Initialize merge destination toggle\n        this.initMergeDestinationToggle();\n\n        // Set up modal buttons\n        this.setupModalButtons();\n\n        // Set up apply merge button\n        this.setupApplyMergeButton();\n\n        Debug.log('MergeUIController: Initialized', null, 2);\n    }\n\n    /**\n     * Initialize merge destination toggle\n     */\n    initMergeDestinationToggle() {\n        // Get the necessary elements\n        this.mergeDestination = DOMUtils.getElement(Selectors.MERGE.DESTINATION_DROPDOWN);\n        this.mergeToggleBtn = DOMUtils.getElement(Selectors.MERGE.DESTINATION_TOGGLE);\n\n        // Get toggle icon and text by proper IDs, not using name()\n        this.mergeToggleIcon = document.getElementById('vdm-merge-controls__toggle-icon');\n        this.mergeToggleText = document.getElementById('vdm-merge-controls__toggle-text');\n\n        if (!this.mergeDestination || !this.mergeToggleBtn) {\n            Debug.warn('MergeUIController: Missing merge destination elements', null, 2);\n            return;\n        }\n\n        // Explicitly set type=\"button\" on toggle button to prevent form submission\n        if (this.mergeToggleBtn) {\n            this.mergeToggleBtn.setAttribute('type', 'button');\n        }\n\n        // ALWAYS populate the dropdown options regardless of current state\n        // This ensures configuration-based options are always used\n        Debug.log('MergeUIController: Populating merge destination options', null, 2);\n        this.populateMergeDestinations();\n\n        // Load saved preference or default to 'new'\n        const savedDestination = localStorage.getItem('preferredMergeDestination') || 'new';\n\n        // Ensure the value exists in the dropdown\n        let valueExists = false;\n        for (let i = 0; i < this.mergeDestination.options.length; i++) {\n            if (this.mergeDestination.options[i].value === savedDestination) {\n                valueExists = true;\n                break;\n            }\n        }\n\n        // Set the value if it exists, otherwise use the first option\n        if (valueExists) {\n            this.mergeDestination.value = savedDestination;\n        } else if (this.mergeDestination.options.length > 0) {\n            this.mergeDestination.selectedIndex = 0;\n        }\n\n        Debug.log(`MergeUIController: Initial merge destination set to ${this.mergeDestination.value}`, null, 2);\n\n        // Set up event handlers\n        this.setupMergeToggleEvents();\n\n        Debug.log('MergeUIController: Merge destination toggle initialized', null, 2);\n    }\n\n    /**\n     * Populate merge destination dropdown\n     */\n    populateMergeDestinations() {\n        // Get runtime properties\n        const runtimeProps = this.diffViewer.getRuntimeProps();\n\n        // Get diffData which contains file information\n        const diffData = runtimeProps.diffData || {};\n\n        // Get filenames from the appropriate sources using the new pattern (no server paths)\n        // Prefer new secure properties (newFileName, oldFileName) that only contain the filename\n        const newFileName = runtimeProps.newFileName || diffData.new?.filename || runtimeProps.filepath?.split('/').pop() || 'new-file';\n        const oldFileName = runtimeProps.oldFileName || diffData.old?.filename || 'old-file';\n\n        // Clean filenames - ensure we're only using the basename without any path components\n        const newFile = newFileName.split(/[\\/\\\\]/).pop();\n        const oldFile = oldFileName.split(/[\\/\\\\]/).pop();\n\n        Debug.log('MergeUIController: File names for merge destinations', {\n            newFileName,\n            oldFileName,\n            newFile,\n            oldFile\n        }, 3);\n\n        // Create merged filenames\n        const newFileWithoutExt = newFile.substring(0, newFile.lastIndexOf('.')) || newFile;\n        const oldFileWithoutExt = oldFile.substring(0, oldFile.lastIndexOf('.')) || oldFile;\n        const newFileExt = newFile.substring(newFile.lastIndexOf('.')) || '';\n        const oldFileExt = oldFile.substring(oldFile.lastIndexOf('.')) || '';\n\n        const newMergedFile = `${newFileWithoutExt}-merged${newFileExt}`;\n        const oldMergedFile = `${oldFileWithoutExt}-merged${oldFileExt}`;\n\n        // Get configuration for enabled save options\n        const config = this.diffViewer.getConfig();\n        const saveOptions = config?.saveOptions || {\n            saveToOriginal: true,\n            saveWithSuffix: true,\n            saveToOld: true,\n            saveToOldWithSuffix: true,\n            saveToBoth: true,\n            saveToBothWithSuffix: true\n        };\n\n        Debug.log('MergeUIController: Save options configuration', saveOptions, 3);\n\n        // IMPORTANT: Always clear ALL existing options to ensure we start fresh\n        while (this.mergeDestination.options.length > 0) {\n            this.mergeDestination.remove(0);\n        }\n\n        // Alternative method to clear options for cross-browser compatibility\n        this.mergeDestination.innerHTML = '';\n\n        Debug.log('MergeUIController: Cleared existing dropdown options', null, 3);\n\n        let optionCount = 0;\n\n        // Add options based on configuration\n        if (saveOptions.saveToOriginal) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'new',\n                    'data-tooltip': this.translationManager.get('saveToOriginalTooltip', 'Replace the current file with merged content')\n                },\n                content: `${newFile} (new)`\n            });\n            optionCount++;\n        }\n\n        if (saveOptions.saveWithSuffix) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'new-suffix',\n                    'data-tooltip': this.translationManager.get('saveWithSuffixTooltip', 'Save merged content as a new file with -merged suffix')\n                },\n                content: `${newMergedFile} (new)`\n            });\n            optionCount++;\n        }\n\n        if (saveOptions.saveToOld) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'old',\n                    'data-tooltip': this.translationManager.get('saveToOldTooltip', 'Replace the old file with merged content')\n                },\n                content: `${oldFile} (old)`\n            });\n            optionCount++;\n        }\n\n        if (saveOptions.saveToOldWithSuffix) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'old-suffix',\n                    'data-tooltip': this.translationManager.get('saveToOldWithSuffixTooltip', 'Save merged content as a new file with -merged suffix in old location')\n                },\n                content: `${oldMergedFile} (old)`\n            });\n            optionCount++;\n        }\n\n        if (saveOptions.saveToBoth) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'both',\n                    'data-tooltip': this.translationManager.get('saveToBothTooltip', 'Replace both old and new files with merged content')\n                },\n                content: this.translationManager.get('saveToBoth', 'Overwrite both files')\n            });\n            optionCount++;\n        }\n\n        if (saveOptions.saveToBothWithSuffix) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'both-suffix',\n                    'data-tooltip': this.translationManager.get('saveToBothWithSuffixTooltip', 'Save merged content as new files with -merged suffix in both locations')\n                },\n                content: this.translationManager.get('saveToBothWithSuffix', 'Save to both with suffix')\n            });\n            optionCount++;\n        }\n\n        // If no options were added (all disabled), add at least the default option\n        if (optionCount === 0) {\n            Debug.log('MergeUIController: No save options enabled, adding default option', null, 2);\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'new',\n                    'data-tooltip': this.translationManager.get('saveToOriginalTooltip', 'Replace the current file with merged content')\n                },\n                content: `${newFile} (new)`\n            });\n            optionCount = 1;\n        }\n\n        Debug.log(`MergeUIController: Populated merge destinations with ${optionCount} options`, null, 2);\n    }\n\n    /**\n     * Set up merge toggle button events\n     */\n    setupMergeToggleEvents() {\n        // Create event handlers\n        const toggleHandler = (event) => {\n            // Prevent default action and stop propagation\n            event.preventDefault();\n            event.stopPropagation();\n\n            // We need a better approach to open the dropdown - the current method doesn't work in all browsers\n            if (this.mergeDestination) {\n                // Instead of trying to simulate a click, make the dropdown visible\n                // First, directly focus the element to prepare it\n                this.mergeDestination.focus();\n\n                // If the browser supports it, use the showPicker method\n                if (typeof this.mergeDestination.showPicker === 'function') {\n                    try {\n                        this.mergeDestination.showPicker();\n                        Debug.log('MergeUIController: Opened dropdown using showPicker()', null, 3);\n                        return;\n                    } catch (e) {\n                        Debug.log('MergeUIController: showPicker() failed, trying alternative method', e, 2);\n                    }\n                }\n\n                // Alternative: Use a small delay and click to open\n                setTimeout(() => {\n                    try {\n                        // Create and dispatch a mouse event\n                        const clickEvent = new MouseEvent('mousedown', {\n                            bubbles: true,\n                            cancelable: true,\n                            view: window\n                        });\n                        this.mergeDestination.dispatchEvent(clickEvent);\n                    } catch (e) {\n                        Debug.log('MergeUIController: Failed to open dropdown with click event', e, 2);\n                    }\n                }, 10);\n\n                // If all else fails, make the select element very noticeable to prompt user interaction\n                this.mergeDestination.classList.add('vdm-dropdown-highlight');\n                setTimeout(() => {\n                    this.mergeDestination.classList.remove('vdm-dropdown-highlight');\n                }, 1000);\n            }\n\n            Debug.log('MergeUIController: Toggle button clicked, attempting to open dropdown', null, 3);\n        };\n\n        const changeHandler = () => {\n            // Update appearance and save preference\n            this.updateMergeToggle(this.mergeDestination.value);\n            localStorage.setItem('preferredMergeDestination', this.mergeDestination.value);\n\n            Debug.log(`MergeUIController: Selection changed to ${this.mergeDestination.value}`, null, 3);\n        };\n\n        // Remove any existing listeners using cloneNode\n        const newToggleBtn = this.mergeToggleBtn.cloneNode(true);\n        const newMergeDestination = this.mergeDestination.cloneNode(true);\n\n        // Replace elements - Add null checks to prevent errors when elements don't exist in DOM\n        if (this.mergeToggleBtn && this.mergeToggleBtn.parentNode) {\n            this.mergeToggleBtn.parentNode.replaceChild(newToggleBtn, this.mergeToggleBtn);\n        }\n\n        if (this.mergeDestination && this.mergeDestination.parentNode) {\n            this.mergeDestination.parentNode.replaceChild(newMergeDestination, this.mergeDestination);\n        }\n\n        // Update references\n        this.mergeToggleBtn = newToggleBtn;\n        this.mergeDestination = newMergeDestination;\n\n        // Add the icon and text elements if they're now missing\n        if (!this.mergeToggleBtn.querySelector('#vdm-merge-controls__toggle-icon')) {\n            this.mergeToggleIcon = DOMUtils.createAndAppendElement('i', this.mergeToggleBtn, {\n                id: 'vdm-merge-controls__toggle-icon',\n            });\n            this.mergeToggleBtn.insertBefore(this.mergeToggleIcon, this.mergeToggleBtn.firstChild);\n        } else {\n            this.mergeToggleIcon = this.mergeToggleBtn.querySelector('#vdm-merge-controls__toggle-icon');\n        }\n\n        if (!this.mergeToggleBtn.querySelector('#vdm-merge-controls__toggle-text')) {\n            this.mergeToggleText = DOMUtils.createAndAppendElement('span', this.mergeToggleBtn, {\n                id: 'vdm-merge-controls__toggle-text'\n            });\n        } else {\n            this.mergeToggleText = this.mergeToggleBtn.querySelector('#vdm-merge-controls__toggle-text');\n        }\n\n        // Enhance dropdown appearance to make it more visible\n        this.mergeDestination.classList.add('vdm-dropdown-visible');\n        this.mergeDestination.style.cursor = 'pointer';\n\n        // Add a small down arrow icon to the toggle button to indicate it opens a dropdown\n        const dropdownIcon = document.createElement('span');\n        dropdownIcon.className = Selectors.UTILITY.MARGIN_START_2.name(); // Using the correct end start class\n        dropdownIcon.innerHTML = DOMUtils.getIconHtml('chevron-down', { width: 10, height: 10 });\n        this.mergeToggleBtn.appendChild(dropdownIcon);\n\n        // Add event listeners to both the toggle button and dropdown\n        this.mergeToggleBtn.addEventListener('click', toggleHandler);\n        this.mergeDestination.addEventListener('change', changeHandler);\n\n        // Make the dropdown more interactive and visible\n        this.mergeDestination.style.paddingRight = '1.5rem';\n        this.mergeDestination.style.appearance = 'menulist';\n        this.mergeDestination.style.cursor = 'pointer';\n\n        // Add tooltip to the dropdown\n        this.mergeDestination.title = 'Click to select where to save the merged content';\n\n        // Make the dropdown more easily clickable and indicate it's interactive\n        this.mergeDestination.addEventListener('mouseover', () => {\n            this.mergeDestination.style.borderColor = 'var(--vdm-primary, #0d6efd)';\n        });\n        this.mergeDestination.addEventListener('mouseout', () => {\n            this.mergeDestination.style.borderColor = 'var(--vdm-border-color, #495057)';\n        });\n\n        // Re-apply the toggle styling AFTER cloning\n        this.updateMergeToggle(this.mergeDestination.value);\n    }\n\n    /**\n     * Update merge toggle button appearance\n     */\n    updateMergeToggle(value) {\n        // Define color classes for different destination types\n        const newFileColorClass = 'vdm-text-primary'; // Purple for new file destinations\n        const oldFileColorClass = 'vdm-text-warning'; // Amber for old file destinations\n        const bothFilesColorClass = 'vdm-text-info';  // Turquoise for both files destinations\n\n        // Define button style classes that match the color theme\n        const newFileBtnClass = Selectors.UTILITY.BUTTON_PRIMARY.name(); // Purple button\n        const oldFileBtnClass = Selectors.UTILITY.BUTTON_WARNING.name(); // Amber button\n        const bothFilesBtnClass = Selectors.UTILITY.BUTTON_INFO.name();  // Turquoise button\n\n        // Create single SVG icon HTML for each destination state with appropriate color class\n        // Always use a single icon per destination type with color indicating the destination\n        let iconHtml = '';\n        let colorClass = '';\n        let buttonClass = '';\n\n        // Determine icon, color class, and button class based on destination type\n        switch (value) {\n            case 'new':\n            case 'new-suffix':\n                // New file destinations use file icon with primary color\n                iconHtml = 'file';\n                colorClass = newFileColorClass;\n                buttonClass = newFileBtnClass;\n                break;\n\n            case 'old':\n            case 'old-suffix':\n                // Old file destinations use file-lines icon with warning color\n                iconHtml = 'file-lines';\n                colorClass = oldFileColorClass;\n                buttonClass = oldFileBtnClass;\n                break;\n\n            case 'both':\n            case 'both-suffix':\n                // Both files destinations use file-copy icon with info color\n                iconHtml = 'file-copy';\n                colorClass = bothFilesColorClass;\n                buttonClass = bothFilesBtnClass;\n                break;\n\n            default:\n                // Default to new file icon with primary color\n                iconHtml = 'file';\n                colorClass = newFileColorClass;\n                buttonClass = newFileBtnClass;\n                break;\n        }\n\n        // Generate the icon HTML with proper classes\n        const iconClasses = `${Selectors.UTILITY.MARGIN_END_1.name()} ${colorClass}`;\n        this.mergeToggleIcon.innerHTML = DOMUtils.getIconHtml(iconHtml, { classes: iconClasses });\n\n        // Update the Apply Merge button style to match the destination\n        const applyButton = document.getElementById(Selectors.MERGE.BUTTON_APPLY.name());\n        if (applyButton) {\n            // Remove any existing button style classes\n            applyButton.classList.remove(\n                Selectors.UTILITY.BUTTON_PRIMARY.name(),\n                Selectors.UTILITY.BUTTON_WARNING.name(),\n                Selectors.UTILITY.BUTTON_INFO.name(),\n                Selectors.UTILITY.BUTTON_SUCCESS.name(),\n                Selectors.UTILITY.BUTTON_DANGER.name(),\n                Selectors.UTILITY.BUTTON_SECONDARY.name()\n            );\n\n            // Add the appropriate button style class\n            applyButton.classList.add(buttonClass);\n\n            Debug.log(`MergeUIController: Updated apply button style to ${buttonClass}`, null, 3);\n        }\n\n        // Update text content based on the destination value\n        switch (value) {\n            case 'new':\n                // Save to new file (overwrite)\n                this.mergeToggleText.textContent = this.translationManager.get('saveToOriginal', 'Save to original');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToOriginalTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'new');\n                break;\n\n            case 'new-suffix':\n                // Save to new file with suffix\n                this.mergeToggleText.textContent = this.translationManager.get('saveWithSuffix', 'Save with suffix');\n                this.mergeToggleBtn.title = this.translationManager.get('saveWithSuffixTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'new-suffix');\n                break;\n\n            case 'old':\n                // Save to old file (overwrite)\n                this.mergeToggleText.textContent = this.translationManager.get('saveToOld', 'Save to old file');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToOldTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'old');\n                break;\n\n            case 'old-suffix':\n                // Save to old file with suffix\n                this.mergeToggleText.textContent = this.translationManager.get('saveToOldWithSuffix', 'Save to old with suffix');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToOldWithSuffixTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'old-suffix');\n                break;\n\n            case 'both':\n                // Save to both files (overwrite)\n                this.mergeToggleText.textContent = this.translationManager.get('saveToBoth', 'Save to both files');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToBothTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'both');\n                break;\n\n            case 'both-suffix':\n                // Save to both files with suffix\n                this.mergeToggleText.textContent = this.translationManager.get('saveToBothWithSuffix', 'Save to both with suffix');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToBothWithSuffixTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'both-suffix');\n                break;\n\n            default:\n                // Default to 'new' if value is not recognized\n                this.mergeToggleText.textContent = this.translationManager.get('saveToOriginal', 'Save to original');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToOriginalTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'new');\n                break;\n        }\n\n        Debug.log(`MergeUIController: Toggle updated to ${value}`, null, 3);\n    }\n\n    /**\n     * Set up modal buttons\n     */\n    setupModalButtons() {\n        // Add a direct event listener to the document for clicks on modal buttons\n        document.addEventListener('click', (event) => {\n            // Handle continue merging button\n            if (event.target.closest && event.target.closest(`#${Selectors.MODAL.CONTINUE_BTN.name()}`)) {\n                Debug.log('MergeUIController: Continue merging button clicked via delegation', null, 2);\n                this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n\n                // Also close the preview modal - use MODAL.PREVIEW instead of MERGE.PREVIEW_MODAL\n                const previewModalId = Selectors.MODAL.PREVIEW.name();\n                Debug.log(`MergeUIController: Also closing preview modal (ID: ${previewModalId})`, null, 1);\n                this.modalManager.close(previewModalId);\n\n                setTimeout(() => {\n                    this.highlightUnresolvedChunks();\n                }, 400);\n            }\n\n            // Handle merge anyway button\n            if (event.target.closest && event.target.closest(`#${Selectors.MODAL.MERGE_BTN.name()}`)) {\n                Debug.log('MergeUIController: Merge anyway button clicked via delegation', null, 2);\n                this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n                this.mergeHandler.proceedWithMerge(this.getMergeType());\n            }\n        });\n\n        // For compatibility, still register the before-open callback as well\n        if (this.modalManager && typeof this.modalManager.registerBeforeOpenCallback === 'function') {\n            this.modalManager.registerBeforeOpenCallback(Selectors.MERGE.CONFLICT_MODAL.name(), () => {\n                // Log the presence of the buttons when the modal opens\n                const continueBtn = document.getElementById(Selectors.MODAL.CONTINUE_BTN.name());\n                const mergeBtn = document.getElementById(Selectors.MODAL.MERGE_BTN.name());\n\n                Debug.log(`MergeUIController: Modal opened, buttons present: continueBtn=${!!continueBtn}, mergeBtn=${!!mergeBtn}`, null, 2);\n\n                // Add direct click handlers (as a backup)\n                if (continueBtn) {\n                    continueBtn.onclick = () => {\n                        Debug.log('MergeUIController: Continue merging clicked via direct handler', null, 2);\n                        this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n\n                        // Also close the preview modal - use MODAL.PREVIEW instead of MERGE.PREVIEW_MODAL\n                        const previewModalId = Selectors.MODAL.PREVIEW.name();\n                        Debug.log(`MergeUIController: Also closing preview modal (ID: ${previewModalId})`, null, 1);\n                        this.modalManager.close(previewModalId);\n\n                        setTimeout(() => {\n                            this.highlightUnresolvedChunks();\n                        }, 400);\n                        return false; // Prevent default\n                    };\n                }\n\n                if (mergeBtn) {\n                    mergeBtn.onclick = () => {\n                        Debug.log('MergeUIController: Merge anyway clicked via direct handler', null, 2);\n                        this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n                        this.mergeHandler.proceedWithMerge(this.getMergeType());\n                        return false; // Prevent default\n                    };\n                }\n            });\n        }\n    }\n\n    /**\n     * Set up apply merge button\n     */\n    setupApplyMergeButton() {\n        // Get the Apply Merge button\n        const applyButton = document.getElementById(Selectors.MERGE.BUTTON_APPLY.name());\n        if (!applyButton) {\n            Debug.warn('MergeUIController: Apply merge button not found', null, 2);\n            return;\n        }\n\n        // Get the merge controls actions container\n        const mergeControlsActions = document.querySelector(Selectors.MERGE.CONTROLS_ACTIONS.toString());\n        if (!mergeControlsActions) {\n            Debug.warn('MergeUIController: Merge controls container not found', null, 2);\n            return;\n        }\n\n        // Get the merge destination dropdown and toggle button\n        const destinationDropdown = document.getElementById(Selectors.MERGE.DESTINATION_DROPDOWN.name());\n        const toggleButton = document.getElementById(Selectors.MERGE.DESTINATION_TOGGLE.name());\n\n        // Create a form element to wrap the merge controls\n        const form = document.createElement('form');\n        form.id = 'vdm-merge__form';\n        form.className = mergeControlsActions.className;\n        form.style.display = 'flex';\n        form.style.justifyContent = 'space-between';\n        form.style.width = '100%';\n\n        // Replace the merge controls actions container with the form\n        if (mergeControlsActions.parentNode) {\n            mergeControlsActions.parentNode.replaceChild(form, mergeControlsActions);\n\n            // Move all content from the original container to the form\n            while (mergeControlsActions.firstChild) {\n                form.appendChild(mergeControlsActions.firstChild);\n            }\n\n            // Make sure the dropdown is inside the form by checking if it exists but is outside\n            if (destinationDropdown && !form.contains(destinationDropdown)) {\n                const destinationContainer = document.querySelector('.vdm-merge-controls__destination');\n                if (destinationContainer) {\n                    form.insertBefore(destinationContainer, form.firstChild);\n                }\n            }\n\n            Debug.log('MergeUIController: Created form wrapper for merge controls', null, 2);\n        }\n\n        // Listen for form submission instead of button click\n        form.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this.handleApplyMerge();\n            Debug.log('MergeUIController: Form submitted', null, 3);\n        });\n\n        // Important: Prevent the toggle button from submitting the form\n        if (toggleButton) {\n            toggleButton.type = 'button'; // Explicitly set type to 'button' to prevent form submission\n\n            // Add a click handler that stops propagation\n            toggleButton.addEventListener('click', (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                // The toggle logic is already in setupMergeToggleEvents\n                // This is just to prevent form submission\n                Debug.log('MergeUIController: Toggle button click intercepted to prevent form submission', null, 3);\n            });\n        }\n\n        // For backwards compatibility, also keep the button click handler\n        applyButton.addEventListener('click', (event) => {\n            event.preventDefault();\n            // Validate that the button is inside the form\n            if (applyButton.form) {\n                applyButton.form.dispatchEvent(new Event('submit'));\n            } else {\n                this.handleApplyMerge();\n            }\n            Debug.log('MergeUIController: Apply merge clicked', null, 3);\n        });\n    }\n\n    /**\n     * Handle the apply merge button click\n     */\n    handleApplyMerge() {\n        // Count unresolved conflicts\n        const unresolvedCount = this.countUnresolvedConflicts();\n\n        if (unresolvedCount > 0) {\n            this.showConflictModal(unresolvedCount);\n        } else {\n            // Check if we're in file-browser mode or not by checking for fileRefId\n            const runtimeProps = this.diffViewer.getRuntimeProps();\n            const fileRefId = runtimeProps.fileRefId || '';\n            const oldFileRefId = runtimeProps.oldFileRefId || '';\n\n            // If neither fileRefId exists, we're in a non-file-browser mode\n            // (text-compare, url-compare, file-upload)\n            if (!fileRefId && !oldFileRefId) {\n                // Use 'clipboard' merge type for non-file-browser modes\n                Debug.log('MergeUIController: Using clipboard merge type for non-file-browser mode', null, 2);\n                this.mergeHandler.proceedWithMerge('clipboard');\n            } else {\n                // Use selected merge type for file-browser mode\n                Debug.log('MergeUIController: Using selected merge type for file-browser mode', null, 2);\n                this.mergeHandler.proceedWithMerge(this.getMergeType());\n            }\n        }\n    }\n\n    /**\n     * Count unresolved conflicts\n     * @returns {number} Number of unresolved conflicts\n     */\n    countUnresolvedConflicts() {\n        const conflictChunks = this.diffViewer.chunkManager.chunks.filter(c => c.conflict);\n        const selections = this.diffViewer.chunkManager.selections || {};\n        return conflictChunks.length - Object.keys(selections).length;\n    }\n\n    /**\n     * Show conflict resolution modal\n     * @param {number} unresolvedCount - Number of unresolved conflicts\n     */\n    showConflictModal(unresolvedCount) {\n        // Get translations from config\n        const translations = this.diffViewer.getConfig().translations || {};\n\n        // Set message about unresolved conflicts\n        const message = MergeContentFormatter.formatUnresolvedCount(unresolvedCount, translations);\n\n        // Open the conflict modal\n        this.modalManager.open(Selectors.MERGE.CONFLICT_MODAL.name());\n\n        // Set the message in the modal\n        setTimeout(() => {\n            DOMUtils.showMessage(Selectors.MODAL.MESSAGE.name(), message, 'warning', {\n                className: '' // No extra margin needed in modal\n            });\n            Debug.log('MergeUIController: Showing conflict modal with message', null, 2);\n        }, 50);\n\n        // Attach event handlers to buttons with a small delay to ensure the modal is fully rendered\n        setTimeout(() => {\n            const continueBtn = document.getElementById(Selectors.MODAL.CONTINUE_BTN.name());\n            const mergeBtn = document.getElementById(Selectors.MODAL.MERGE_BTN.name());\n\n            // Handle the Continue button\n            if (continueBtn) {\n                // Remove any existing handlers by cloning\n                const newContinueBtn = continueBtn.cloneNode(true);\n                continueBtn.parentNode.replaceChild(newContinueBtn, continueBtn);\n\n                // Add direct, simplified handler\n                newContinueBtn.addEventListener('click', () => {\n                    Debug.log('MergeUIController: Continue button clicked', null, 2);\n\n                    // First close the conflict modal\n                    this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n\n                    // Then close the preview modal\n                    const previewModalId = Selectors.MODAL.PREVIEW.name();\n                    Debug.log(`MergeUIController: Closing preview modal (ID: ${previewModalId})`, null, 2);\n                    this.modalManager.close(previewModalId);\n\n                    // Highlight any unresolved chunks after a delay\n                    setTimeout(() => {\n                        this.highlightUnresolvedChunks();\n                    }, 400);\n                });\n            }\n\n            // Handle the Merge Anyway button\n            if (mergeBtn) {\n                // Remove any existing handlers by cloning\n                const newMergeBtn = mergeBtn.cloneNode(true);\n                mergeBtn.parentNode.replaceChild(newMergeBtn, mergeBtn);\n\n                // Add direct, simplified handler\n                newMergeBtn.addEventListener('click', () => {\n                    Debug.log('MergeUIController: Merge anyway button clicked', null, 2);\n                    this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n                    this.mergeHandler.proceedWithMerge(this.getMergeType());\n                });\n            }\n        }, 50);\n    }\n\n    /**\n     * Get current merge type from UI\n     * @returns {string} Merge type ('original' or 'new')\n     */\n    getMergeType() {\n        return this.mergeDestination?.value || 'original';\n    }\n\n    /**\n     * Highlight unresolved chunks\n     * @returns {boolean} True if any chunk was highlighted\n     */\n    highlightUnresolvedChunks() {\n        Debug.log('MergeUIController: Finding first unresolved conflict', null, 2);\n\n        // Get all chunks and current selections\n        const chunks = this.diffViewer.chunkManager.chunks;\n        const selections = this.diffViewer.chunkManager.selections || {};\n\n        // Find the first unresolved chunk\n        for (const chunk of chunks) {\n            if (chunk.conflict && !selections[chunk.id]) {\n                // Use DiffNavigator to navigate to this chunk\n                const chunkIndex = chunks.indexOf(chunk);\n                if (this.diffViewer.diffNavigator) {\n                    // First navigate to the chunk\n                    this.diffViewer.diffNavigator.navigateToChunk(chunkIndex);\n\n                    // Then highlight the chunk element using imported NavigationUtils\n                    const chunkElement = document.querySelector(`[data-chunk-id=\"${chunk.id}\"]`);\n                    if (chunkElement) {\n                        NavigationUtils.addHighlightEffect(chunkElement, 4000);\n                    }\n\n                    Debug.log(`MergeUIController: Highlighted unresolved chunk ${chunk.id}`, null, 2);\n                    return true;\n                }\n            }\n        }\n\n        Debug.log('MergeUIController: No unresolved conflicts found', null, 2);\n        return false;\n    }\n\n    /**\n     * Setup local-only controls when server save is disabled\n     * This creates a simplified UI with just the \"Get merged result\" button\n     */\n    setupLocalOnlyControls() {\n        Debug.log('MergeUIController: Setting up local-only controls (server save disabled)', null, 2);\n\n        // Get translations using the TranslationManager\n        Debug.log('MergeUIController: Getting translations for local-only controls', this.translationManager, 2);\n        const getMergedResultText = this.translationManager.get('getMergedResult', 'Get Merged Result');\n        const getMergedResultTooltip = this.translationManager.get('getMergedResultTooltip', 'View and download the merged content');\n\n        // Find the merge controls container\n        const mergeControlsActions = document.querySelector(Selectors.MERGE.CONTROLS_ACTIONS.toString());\n\n        if (!mergeControlsActions) {\n            Debug.error('MergeUIController: Could not find merge controls container', null, 1);\n            return;\n        }\n\n        // Clear any existing content from the container to ensure we only have our button\n        mergeControlsActions.innerHTML = '';\n\n        // Create the \"Get merged result\" button\n        const getMergedResultBtn = document.createElement('button');\n        getMergedResultBtn.id = Selectors.MERGE.GET_MERGED_RESULT_BTN.name();\n        getMergedResultBtn.className = `${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_PRIMARY.name()}`;\n        getMergedResultBtn.title = getMergedResultTooltip;\n\n        // Add download icon and text using the proper icon system\n        const downloadIconHtml = DOMUtils.getIconHtml('download', { classes: Selectors.UTILITY.MARGIN_END_1.name() });\n        getMergedResultBtn.innerHTML = `${downloadIconHtml} ${getMergedResultText}`;\n\n        // Add to container (align to right)\n        const buttonContainer = document.createElement('div');\n        buttonContainer.className = `${Selectors.UTILITY.FLEX.name()} ${Selectors.UTILITY.JUSTIFY_CONTENT_BETWEEN.name()} w-100`;\n        buttonContainer.style.width = '100%';\n\n        // Add a spacer on the left to push the button to the right\n        const spacer = document.createElement('div');\n        spacer.style.flex = '1';\n\n        buttonContainer.appendChild(spacer);\n        buttonContainer.appendChild(getMergedResultBtn);\n        mergeControlsActions.appendChild(buttonContainer);\n\n        // Add event handler to show the preview content when clicked\n        getMergedResultBtn.addEventListener('click', (event) => {\n            event.preventDefault();\n\n            // Use 'clipboard' merge type for non-file-browser modes\n            this.mergeHandler.proceedWithMerge('clipboard');\n\n            Debug.log('MergeUIController: Get merged result button clicked (using clipboard merge type)', null, 2);\n        });\n\n        Debug.log('MergeUIController: Local-only controls setup complete', null, 2);\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { BaseSingleton } from '../../utils/BaseSingleton';\nimport Selectors from '../../constants/Selectors';\nimport { DOMUtils } from '../../utils/DOMUtils';\nimport { TranslationManager } from '../../utils/TranslationManager';\n\n// Module-level singleton instance\nlet instance = null;\n\n/**\n * Lightweight standalone modal manager without external dependencies\n */\nexport class ModalManager extends BaseSingleton {\n    /**\n     * Get the singleton instance\n     * @param {Object} options - Configuration options (only used during first initialization)\n     * @returns {ModalManager} The singleton instance\n     */\n    static getInstance(options = {}) {\n        if (!instance) {\n            instance = new ModalManager(options);\n        }\n        return instance;\n    }\n\n    /**\n     * Constructor - protected from direct instantiation\n     * @param {Object} options - Configuration options\n     */\n    constructor(options = {}) {\n        super();\n\n        // Skip initialization if instance already exists\n        if (!this._isFirstInstance(instance)) {\n            return;\n        }\n\n        this.options = {\n            debug: false,\n            translations: {},\n            ...options\n        };\n\n        this.modals = {};\n        this.activeModal = null;\n        this.initialized = false;\n\n        Debug.log('ModalManager: Initialized', null, 2);\n    }\n\n    /**\n     * Initialize modals by creating the necessary HTML\n     * @returns {boolean} Success status\n     */\n    initModals() {\n        try {\n            if (this.initialized) {\n                Debug.log('ModalManager: Already initialized', null, 2);\n                return true;\n            }\n\n            const translationManager = TranslationManager.getInstance();\n\n            // Create confirm modal\n            this.createModal({\n                id: Selectors.MODAL.CONFIRM.name(),\n                title: translationManager.get('confirmation'),\n                contentId: Selectors.MODAL.MESSAGE.name(),\n                contentClass: Selectors.UTILITY.PADDING_3.name(),\n                footerButtons: [\n                    {\n                        id: Selectors.MODAL.CONTINUE_BTN.name(),\n                        text: translationManager.get('continueResolving'),\n                        class: Selectors.UTILITY.BUTTON.name() + ' ' + Selectors.UTILITY.BUTTON_PRIMARY.name() + ' ' + Selectors.UTILITY.MARGIN_END_2.name()\n                    },\n                    {\n                        id: Selectors.MODAL.MERGE_BTN.name(),\n                        text: translationManager.get('mergeAnyway'),\n                        class: Selectors.UTILITY.BUTTON.name() + ' ' + Selectors.UTILITY.BUTTON_WARNING.name()\n                    }\n                ]\n            });\n\n            // Create preview modal\n            this.createModal({\n                id: Selectors.MODAL.PREVIEW.name(),\n                title: '<span id=\"' + Selectors.MODAL.PREVIEW_FILENAME.name() + '\"></span>',\n                contentId: Selectors.MODAL.PREVIEW_CONTENT_ID.name(),\n                contentClass: Selectors.MODAL.PREVIEW_CONTENT.name(),\n                headerClass: Selectors.MODAL.HEADER_FIXED.name(),\n                modalClass: 'vdm-modal--fixed-footer',\n                fullscreen: true\n            });\n\n            // Create conflict modal\n            this.createModal({\n                id: Selectors.MERGE.CONFLICT_MODAL.name(),\n                title: translationManager.get('unresolvedConflicts'),\n                contentId: Selectors.MODAL.MESSAGE.name(),\n                contentClass: Selectors.UTILITY.PADDING_3.name(),\n                footerButtons: [\n                    {\n                        id: Selectors.MODAL.CONTINUE_BTN.name(),\n                        text: translationManager.get('continueResolving'),\n                        class: Selectors.UTILITY.BUTTON.name() + ' ' + Selectors.UTILITY.BUTTON_PRIMARY.name() + ' ' + Selectors.UTILITY.MARGIN_END_2.name()\n                    },\n                    {\n                        id: Selectors.MODAL.MERGE_BTN.name(),\n                        text: translationManager.get('mergeAnyway'),\n                        class: Selectors.UTILITY.BUTTON.name() + ' ' + Selectors.UTILITY.BUTTON_WARNING.name()\n                    }\n                ]\n            });\n\n            // Add event listeners for close buttons, backdrop clicks, etc.\n            this._setupEventListeners();\n\n            this.initialized = true;\n            Debug.log('ModalManager: Modals initialized', null, 2);\n            return true;\n        } catch (error) {\n            Debug.error('ModalManager: Error initializing modals', error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Create a modal with the specified configuration\n     * @param {Object} config - Modal configuration\n     * @param {string} config.id - Modal ID (without # prefix)\n     * @param {string} config.title - Modal title (can include HTML)\n     * @param {string} [config.contentId] - ID for the content container (without # prefix)\n     * @param {string} [config.contentClass] - CSS class for the content container\n     * @param {string} [config.modalClass] - Additional CSS class for the modal\n     * @param {string} [config.headerClass] - CSS class for the header (overrides default)\n     * @param {Array} [config.footerButtons] - Array of button configurations\n     * @param {boolean} [config.fullscreen] - Whether to make the modal fullscreen\n     * @param {Object} [config.events] - Custom event handlers for modal elements\n     * @param {Object} [config.attr] - Additional attributes to add to the modal element\n     * @returns {boolean} Success status\n     */\n    createModal(config) {\n        try {\n            const modalId = config.id;\n\n            // Check if modal already exists in DOM\n            if (document.getElementById(modalId)) {\n                Debug.log(`ModalManager: Modal ${modalId} already exists in DOM`, null, 2);\n                return true;\n            }\n\n            // Use header class from config or default to MODAL.HEADER with prefix removed\n            const headerClass = config.headerClass || Selectors.MODAL.HEADER.name();\n\n            // Start building modal HTML\n            let modalHtml = `\n                <div id=\"${modalId}\" class=\"${Selectors.MODAL.CONTAINER.name()/*remove dot prefix*/}${config.modalClass ? ' ' + config.modalClass : ''}\" style=\"display: none;\"`;\n\n            // Add additional attributes if provided\n            if (config.attr) {\n                Object.entries(config.attr).forEach(([key, value]) => {\n                    modalHtml += ` ${key}=\"${value}\"`;\n                });\n            }\n\n            modalHtml += `>\n                    <div class=\"${Selectors.MODAL.CONTENT.name()}\">\n                        <div class=\"${headerClass}\">\n                            <h5 class=\"${Selectors.MODAL.TITLE.name()}\">${config.title}</h5>\n                            <button class=\"${Selectors.MODAL.CLOSE.name()}\">&times;</button>\n                        </div>`;\n\n            // Add content container\n            if (config.contentId) {\n                modalHtml += `<div id=\"${config.contentId}\" class=\"${config.contentClass || ''}\"></div>`;\n            } else {\n                modalHtml += `<div class=\"${config.contentClass || ''}\"></div>`;\n            }\n\n            // Add footer with buttons if specified\n            if (config.footerButtons && config.footerButtons.length > 0) {\n                modalHtml += `<div class=\"${Selectors.MODAL.FOOTER.name()} ${Selectors.UTILITY.FLEX.name()} ${Selectors.UTILITY.JUSTIFY_CONTENT_BETWEEN.name()} ${Selectors.UTILITY.PADDING_3.name()}\">`;\n                config.footerButtons.forEach(button => {\n                    // Check if this is a close button - only buttons with the exact MODAL.CLOSE.name() class should be considered close buttons\n                    const isCloseButton = button?.class.split(' ').includes(Selectors.MODAL.CLOSE.name());\n\n                    // Determine the button type based on class\n                    let iconName = 'chevron-right'; // Default icon\n\n                    if (button.class) {\n                        const classNames = button.class.split(' ');\n\n                        // Determine button type from classes\n                        if (classNames.some(cls => cls.includes('primary'))) {\n                            iconName = 'check-circle';\n                        } else if (classNames.some(cls => cls.includes('success'))) {\n                            iconName = 'check-circle';\n                        } else if (classNames.some(cls => cls.includes('danger'))) {\n                            iconName = 'exclamation-triangle';\n                        } else if (classNames.some(cls => cls.includes('warning'))) {\n                            iconName = 'exclamation-circle';\n                        } else if (classNames.some(cls => cls.includes('info'))) {\n                            iconName = 'info-circle';\n                        }\n                    }\n\n                    // Special case for specific button IDs\n                    if (button.id) {\n                        if (button.id.toLowerCase().includes('copy')) {\n                            iconName = 'copy';\n                        } else if (button.id === Selectors.MODAL.CONTINUE_BTN.name()) {\n                            iconName = 'chevron-right';\n                        } else if (button.id === Selectors.MODAL.MERGE_BTN.name()) {\n                            iconName = 'exclamation-circle';\n                        }\n                    }\n\n                    // Generate icon HTML if this is not a close button\n                    let iconHtml = '';\n                    if (!isCloseButton) {\n                        iconHtml = DOMUtils.getIconHtml(iconName, { classes: Selectors.UTILITY.MARGIN_END_2.name() });\n                    }\n\n                    modalHtml += `<button id=\"${button.id}\" class=\"${button.class || Selectors.UTILITY.BUTTON.name() + ' ' + Selectors.UTILITY.BUTTON_SECONDARY.name()}\"`;\n\n                    // Add data attributes if provided\n                    if (button.data) {\n                        Object.entries(button.data).forEach(([key, value]) => {\n                            modalHtml += ` data-${key}=\"${value}\"`;\n                        });\n                    }\n\n                    // Add the icon before text but only for non-close buttons\n                    if (isCloseButton && !button.text) {\n                        // For close buttons without text, don't add any content (X will be created by CSS)\n                        modalHtml += `></button>`;\n                    } else {\n                        // For other buttons or close buttons with text, add icon + text span\n                        modalHtml += `>${iconHtml}<span>${button.text || ''}</span></button>`;\n                    }\n                });\n                modalHtml += `</div>`;\n            }\n\n            // Close the modal structure\n            modalHtml += `\n                    </div>\n                </div>\n            `;\n\n            this._appendToBody(modalId, modalHtml);\n            this.modals[modalId] = {\n                element: document.getElementById(modalId),\n                isOpen: false,\n                config: config\n            };\n\n            // Apply fullscreen if needed\n            if (config.fullscreen) {\n                const modalElement = document.getElementById(modalId);\n                if (modalElement) {\n                    this.setFullscreenSize(modalElement);\n                }\n            }\n\n            // Attach custom event handlers if provided\n            if (config.events) {\n                const modalElement = document.getElementById(modalId);\n\n                Object.entries(config.events).forEach(([selector, events]) => {\n                    let elements;\n\n                    // Handle special selectors\n                    if (selector === 'modal') {\n                        elements = [modalElement];\n                    } else if (selector === 'close') {\n                        elements = Array.from(modalElement.querySelectorAll(Selectors.MODAL.CLOSE));\n                    } else {\n                        // For regular selectors, query within the modal\n                        elements = Array.from(modalElement.querySelectorAll(selector));\n                    }\n\n                    // Attach events to each matching element\n                    elements.forEach(element => {\n                        if (element) {\n                            Object.entries(events).forEach(([eventName, handler]) => {\n                                element.addEventListener(eventName, handler);\n                                Debug.log(`ModalManager: Attached ${eventName} event to ${selector} in modal ${modalId}`, null, 3);\n                            });\n                        }\n                    });\n                });\n            }\n\n            Debug.log(`ModalManager: Created modal - ${modalId}`, null, 3);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error creating modal - ${config.id}`, error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Determine the appropriate icon for a button based on context\n     * @private\n     * @param {Object} button - The button configuration object\n     * @returns {string} The name of the icon to use\n     */\n    _getIconNameForButton(button) {\n        // First, check the IconRegistry to ensure we use icons that actually exist\n\n        // Icons based on button text (case insensitive)\n        const buttonText = button.text.toLowerCase();\n\n        if (buttonText.includes('continue')) return 'chevron-right';\n        if (buttonText.includes('merge')) return 'check'; // Changed from code-merge to check\n        if (buttonText.includes('close') || buttonText.includes('cancel')) return 'exclamation-circle'; // Changed from times-circle\n        if (buttonText.includes('confirm') || buttonText.includes('ok')) return 'check-circle';\n        if (buttonText.includes('copy')) return 'copy';\n        if (buttonText.includes('download')) return 'file'; // Changed from download\n        if (buttonText.includes('upload')) return 'file-circle-plus'; // Changed from upload\n        if (buttonText.includes('save')) return 'check-circle'; // Changed from save\n        if (buttonText.includes('delete')) return 'exclamation-triangle'; // Changed from trash\n        if (buttonText.includes('edit')) return 'eye'; // Changed from edit\n\n        // Icons based on button class\n        if (button.class) {\n            const buttonClass = button.class.toLowerCase();\n\n            if (buttonClass.includes('primary')) return 'check';\n            if (buttonClass.includes('secondary')) return 'chevron-right';\n            if (buttonClass.includes('success')) return 'check-circle';\n            if (buttonClass.includes('danger')) return 'exclamation-triangle';\n            if (buttonClass.includes('warning')) return 'exclamation-circle';\n            if (buttonClass.includes('info')) return 'info-circle';\n        }\n\n        // Default icon if no matching pattern found\n        return 'chevron-right';\n    }\n\n    /**\n     * Append HTML to body\n     * @private\n     * @param {string} modalId - Modal ID\n     * @param {string} html - HTML to append\n     */\n    _appendToBody(modalId, html) {\n        // Create wrapper div for modals if it doesn't exist\n        let modal = document.getElementById(modalId);\n        if (!modal) {\n            // Convert HTML string to DOM element before appending\n            const tempContainer = document.createElement('div');\n            tempContainer.innerHTML = html;\n            document.body.appendChild(tempContainer.firstElementChild);\n        }\n\n        // Create or update the backdrop element\n        let backdrop = document.getElementById(Selectors.MODAL.BACKDROP.name());\n        if (!backdrop) {\n            backdrop = document.createElement('div');\n            backdrop.id = Selectors.MODAL.BACKDROP.name();\n            backdrop.style.display = 'none';\n            document.body.appendChild(backdrop);\n        }\n    }\n\n    /**\n     * Set up event listeners for modals\n     * @private\n     */\n    _setupEventListeners() {\n        // Use document-level event delegation for close buttons\n        document.addEventListener('click', (event) => {\n            // Check if the clicked element is a close button or has the close class\n            if (event.target.matches(Selectors.MODAL.CLOSE)) {\n                const modal = event.target.closest(Selectors.MODAL.CONTAINER);\n                if (modal?.id) {\n                    this.close(modal.id);\n                }\n            }\n        });\n\n        // Backdrop click to close\n        const backdrop = document.getElementById(Selectors.MODAL.BACKDROP.name());\n        if (backdrop) {\n            backdrop.addEventListener('click', () => {\n                if (this.activeModal) {\n                    this.close(this.activeModal);\n                }\n            });\n        }\n\n        // ESC key to close\n        document.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape' && this.activeModal) {\n                this.close(this.activeModal);\n            }\n        });\n    }\n\n    /**\n     * Register a modal instance\n     * @param {string} modalId - ID of the modal element\n     * @param {Object} options - Modal configuration options\n     * @returns {boolean} Success status\n     */\n    register(modalId, options = {}) {\n        try {\n            const element = document.getElementById(modalId);\n            if (!element) {\n                Debug.warn(`ModalManager: Element not found for modal ID ${modalId}`, null, 2);\n                return false;\n            }\n\n            this.modals[modalId] = {\n                element: element,\n                isOpen: false,\n                options: options\n            };\n\n            Debug.log(`ModalManager: Registered modal - ${modalId}`, null, 3);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error registering modal - ${modalId}`, error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Register a callback to be executed before opening a modal\n     * @param {string} modalId - ID of the modal\n     * @param {Function} callback - Function to execute before opening\n     * @returns {boolean} Success status\n     */\n    registerBeforeOpenCallback(modalId, callback) {\n        try {\n            if (!this.modals[modalId]) {\n                this.modals[modalId] = {\n                    element: document.getElementById(modalId),\n                    isOpen: false,\n                    config: {}\n                };\n            }\n\n            if (!this.modals[modalId].beforeOpenCallbacks) {\n                this.modals[modalId].beforeOpenCallbacks = [];\n            }\n\n            this.modals[modalId].beforeOpenCallbacks.push(callback);\n            Debug.log(`ModalManager: Registered before-open callback for modal ${modalId}`, null, 2);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error registering before-open callback for modal ${modalId}`, error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Open a modal by ID\n     * @param {string} modalId - ID of the modal to open\n     * @returns {boolean} Success status\n     */\n    open(modalId) {\n        try {\n            const modal = this.modals[modalId];\n            if (!modal) {\n                Debug.warn(`ModalManager: Cannot open modal ${modalId} - not registered`, null, 2);\n\n                // Forcefully try to find the modal element even if not registered\n                const element = document.getElementById(modalId);\n                if (element) {\n                    Debug.log(`ModalManager: Found unregistered modal element ${modalId}, registering now`, null, 2);\n                    this.register(modalId, { element });\n                    this._showModal(modalId);\n                    return true;\n                }\n\n                return false;\n            }\n\n            // Execute any registered before-open callbacks\n            if (modal.beforeOpenCallbacks && modal.beforeOpenCallbacks.length > 0) {\n                Debug.log(`ModalManager: Executing ${modal.beforeOpenCallbacks.length} before-open callbacks for modal ${modalId}`, null, 2);\n                modal.beforeOpenCallbacks.forEach(callback => {\n                    try {\n                        callback();\n                    } catch (err) {\n                        Debug.error(`ModalManager: Error in before-open callback for modal ${modalId}`, err, 1);\n                    }\n                });\n            }\n\n            this._showModal(modalId);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error opening modal ${modalId}:`, error, 2);\n            return false;\n        }\n    }\n\n    /**\n     * Show a modal\n     * @private\n     * @param {string} modalId - Modal ID to show\n     */\n    _showModal(modalId) {\n        const modal = this.modals[modalId];\n        if (!modal) {\n            Debug.warn(`ModalManager: Modal ${modalId} not found`, null, 2);\n            return;\n        }\n\n        // Set as active modal - important for proper backdrop handling\n        this.activeModal = modalId;\n\n        // Show backdrop\n        const backdrop = document.getElementById(Selectors.MODAL.BACKDROP.name());\n        if (backdrop) {\n            backdrop.style.display = 'block';\n            setTimeout(() => {\n                backdrop.style.opacity = '1';\n            }, 10);\n        }\n\n        // IMPORTANT: Force modal display style using direct manipulation\n        // Show modal with animation - set display IMMEDIATELY\n        modal.element.style.display = 'block';\n        modal.element.style.opacity = '0';\n\n        // Debug logs to help diagnose modal display issues\n        Debug.log(`ModalManager: Setting modal ${modalId} display to block`, {\n            modalElement: modal.element.id,\n            displayBefore: modal.element.style.display\n        }, 2);\n\n        // Apply animation\n        setTimeout(() => {\n            modal.element.style.opacity = '1';\n            Debug.log(`ModalManager: Fading in modal ${modalId}`, null, 3);\n        }, 10);\n\n        modal.isOpen = true;\n\n        // Handle fullscreen if needed\n        if (modalId === Selectors.MODAL.PREVIEW.name()) {\n            this.setFullscreenSize(modal.element);\n        }\n\n        // Prevent body scrolling\n        document.body.style.overflow = 'hidden';\n    }\n\n    /**\n     * Hide a modal\n     * @private\n     * @param {string} modalId - Modal ID to hide\n     */\n    _hideModal(modalId) {\n        const modal = this.modals[modalId];\n        if (!modal) return;\n\n        // Fade out\n        modal.element.style.opacity = '0';\n\n        // After animation completes\n        setTimeout(() => {\n            modal.element.style.display = 'none';\n            modal.isOpen = false;\n\n            // Hide backdrop if this is the currently active modal\n            if (this.activeModal === modalId) {\n                const backdrop = document.getElementById(Selectors.MODAL.BACKDROP.name());\n                if (backdrop) {\n                    backdrop.style.opacity = '0';\n\n                    // Hide backdrop after fade-out animation\n                    setTimeout(() => {\n                        backdrop.style.display = 'none';\n                    }, 150);\n                }\n\n                // Reset body scrolling\n                document.body.style.overflow = '';\n                this.activeModal = null;\n            }\n        }, 250); // Match transition duration\n    }\n\n    /**\n     * Close a modal by ID\n     * @param {string} modalId - ID of the modal to close\n     * @returns {boolean} Success status\n     */\n    close(modalId) {\n        try {\n            if (!this.modals[modalId]) {\n                Debug.warn(`ModalManager: Modal not found - ${modalId}`, null, 2);\n                return false;\n            }\n\n            this._hideModal(modalId);\n\n            Debug.log(`ModalManager: Closed modal - ${modalId}`, null, 3);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error closing modal - ${modalId}`, error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Set content for a modal\n     * @param {string} modalId - ID of the modal\n     * @param {string|Element} content - HTML content or DOM element\n     * @param {string} contentSelector - Selector for content container\n     * @returns {boolean} Success status\n     */\n    setContent(modalId, content, contentSelector = null) {\n        try {\n            Debug.log(`ModalManager: Setting content for modal ${modalId}`, {\n                contentType: typeof content,\n                contentLength: typeof content === 'string' ? content.length : 'Element',\n                contentPreview: typeof content === 'string' ? content.substring(0, 150) + '...' : 'Element object',\n                targetSelector: contentSelector\n            }, 2);\n\n            const modal = this.modals[modalId];\n            if (!modal) {\n                Debug.error(`ModalManager: Modal not found - ${modalId}`, null, 1);\n                return false;\n            }\n\n            // Find the content container\n            let container;\n            if (contentSelector) {\n                Debug.log(`ModalManager: Looking for content container with selector: ${contentSelector}`, null, 2);\n                // Check if contentSelector is an ID without # prefix\n                if (!contentSelector.startsWith('#') && !contentSelector.startsWith('.')) {\n                    container = document.getElementById(contentSelector);\n                    Debug.log(`ModalManager: Tried getElementById with: ${contentSelector}, found: ${!!container}`, null, 2);\n                }\n\n                // If not found or not an ID, try as a selector\n                if (!container) {\n                    container = document.querySelector(contentSelector);\n                    Debug.log(`ModalManager: Tried querySelector with: ${contentSelector}, found: ${!!container}`, null, 2);\n                }\n\n                // Log container details\n                Debug.log(`ModalManager: Container lookup result:`, {\n                    found: !!container,\n                    id: container?.id || 'none',\n                    classList: container ? Array.from(container.classList) : []\n                }, 2);\n            } else {\n                container = modal.element.querySelector(Selectors.MODAL.CONTENT);\n                Debug.log(`ModalManager: Using default content container:`, {\n                    found: !!container,\n                    selector: Selectors.MODAL.CONTENT\n                }, 2);\n\n                if (!container) {\n                    Debug.error(`ModalManager: Content container not found - ${modalId}`, null, 1);\n                    return false;\n                }\n            }\n\n            if (!container) {\n                Debug.error(`ModalManager: Could not find content container with selector: ${contentSelector}`, null, 1);\n                return false;\n            }\n\n            // Set the content\n            if (typeof content === 'string') {\n                Debug.log(`ModalManager: Setting HTML content for modal ${modalId}`, {\n                    contentLength: content.length,\n                    containsPre: content.includes('<pre'),\n                    container: container.id || container.className\n                }, 2);\n\n                container.innerHTML = content;\n\n                // Verify the content was set correctly\n                const hasPreElements = container.querySelectorAll('pre').length > 0;\n                Debug.log(`ModalManager: Content set verification:`, {\n                    hasPreElements,\n                    innerHTML: container.innerHTML.substring(0, 100) + '...'\n                }, 2);\n\n                if (content.includes('<pre') && !hasPreElements) {\n                    Debug.warn(`ModalManager: Content included <pre> tags but none found after setting innerHTML`, {\n                        innerHtmlLength: container.innerHTML.length\n                    }, 1);\n                }\n            } else if (content instanceof Element) {\n                Debug.log(`ModalManager: Setting Element content for modal ${modalId}`, {\n                    elementType: content.tagName,\n                    elementId: content.id || 'none'\n                }, 2);\n                container.innerHTML = '';\n                container.appendChild(content);\n            } else {\n                Debug.error(`ModalManager: Invalid content type - ${typeof content}`, null, 1);\n                return false;\n            }\n\n            Debug.log(`ModalManager: Content set for modal - ${modalId}`, null, 3);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error setting content - ${modalId}`, error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Set fullscreen size for modal\n     * @param {Element} modalElement - Modal DOM element\n     * @returns {boolean} Success status\n     */\n    setFullscreenSize(modalElement) {\n        try {\n            if (!modalElement) {\n                Debug.warn('ModalManager: Modal element not provided for fullscreen', null, 2);\n                return false;\n            }\n\n            // Add fullscreen class\n            modalElement.classList.add(Selectors.MODAL.FULLSCREEN.name());\n\n            // Calculate and set the height\n            const headerHeight = modalElement.querySelector(Selectors.MODAL.HEADER) ?\n                modalElement.querySelector(Selectors.MODAL.HEADER).offsetHeight : 0;\n\n            const content = modalElement.querySelector(Selectors.MODAL.CONTENT);\n            if (content) {\n                content.style.height = `calc(100% - ${headerHeight}px)`;\n            }\n\n            Debug.log('ModalManager: Modal set to fullscreen size', null, 3);\n            return true;\n        } catch (error) {\n            Debug.error('ModalManager: Error setting fullscreen size', error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Creates a code copy modal for displaying and copying code snippets\n     * @param {string} codeText - The code text to display in the modal\n     * @returns {string} Modal ID\n     */\n    createCopyModal(codeText) {\n        const modalId = Selectors.MODAL.CODE_COPY.name();\n        // Get translations\n        const translationManager = TranslationManager.getInstance();\n\n        // Create modal if it doesn't exist yet\n        if (!this.modals[modalId]) {\n            this.createModal({\n                id: modalId,\n                title: translationManager.get('copyCode'),\n                contentId: Selectors.MODAL.COPY_CONTENT.name(),\n                modalClass: Selectors.MODAL.FIXED_FOOTER.name(),\n                headerClass: Selectors.MODAL.HEADER_FIXED.name(),\n                footerButtons: [\n                    {\n                        class: `${Selectors.MODAL.CLOSE.name()} ${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_SECONDARY.name()}`\n                    }\n                ]\n            });\n        }\n\n        // Create content with textarea and copy button\n        const safeText = this._escapeHtml(codeText);\n        const content = `\n            <div class=\"${Selectors.COPY.MODAL.DIALOG.name()}\">\n                <p class=\"${Selectors.COPY.MODAL.INSTRUCTIONS.name()}\">${translationManager.get('copyInstructions')}</p>\n                <div class=\"${Selectors.COPY.MODAL.TEXTAREA.name()}\">\n                    <textarea id=\"${Selectors.COPY.MODAL.TEXTAREA_ELEM.name()}\" class=\"${Selectors.COPY.MODAL.TEXTAREA_ELEM.name()}\">${safeText}</textarea>\n                </div>\n                <div class=\"${Selectors.COPY.MODAL.ACTIONS.name()}\">\n                    <button id=\"${Selectors.COPY.MODAL.BUTTON.name()}\" class=\"${Selectors.COPY.MODAL.BUTTON.name()} ${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_PRIMARY.name()}\">\n                        ${DOMUtils.getIconHtml('copy', { classes: Selectors.UTILITY.MARGIN_END_2.name() })}\n                        <span>${translationManager.get('copyToClipboard')}</span>\n                    </button>\n                </div>\n            </div>\n        `;\n\n        // Set content\n        this.setContent(modalId, content, Selectors.MODAL.COPY_CONTENT.name());\n\n        // Set up event handlers after a short delay to ensure DOM is ready\n        setTimeout(() => {\n            const textarea = document.getElementById(Selectors.COPY.MODAL.TEXTAREA_ELEM.name());\n            const copyBtn = document.getElementById(Selectors.COPY.MODAL.BUTTON.name());\n\n            if (textarea) {\n                // Select all text when focused\n                textarea.addEventListener('focus', function() {\n                    this.select();\n                });\n\n                // Initial focus and select\n                textarea.select();\n            }\n\n            if (copyBtn && textarea) {\n                copyBtn.addEventListener('click', function() {\n                    // Focus and select the textarea\n                    textarea.select();\n\n                    try {\n                        // Try to copy using clipboard API or fallback to execCommand\n                        let success = false;\n\n                        if (navigator.clipboard?.writeText) {\n                            navigator.clipboard.writeText(textarea.value)\n                                .then(() => {\n                                    this._showCopySuccess(copyBtn);\n                                    Debug.log('ModalManager: Successfully copied using Clipboard API', null, 3);\n                                })\n                                .catch(_err => {\n                                    // Fallback to execCommand\n                                    // @SuppressWarnings(javascript:S1874) - Keeping for browser compatibility\n                                    success = document.execCommand('copy');\n                                    if (success) {\n                                        this._showCopySuccess(copyBtn);\n                                        Debug.log('ModalManager: Successfully copied using execCommand fallback', null, 3);\n                                    } else {\n                                        this._showCopyFailure(copyBtn);\n                                        Debug.warn('ModalManager: Copy failed with execCommand fallback', null, 2);\n                                    }\n                                });\n                        } else {\n                            // Try execCommand directly\n                            // @SuppressWarnings(javascript:S1874) - Keeping for browser compatibility\n                            success = document.execCommand('copy');\n                            if (success) {\n                                this._showCopySuccess(copyBtn);\n                                Debug.log('ModalManager: Successfully copied using execCommand', null, 3);\n                            } else {\n                                this._showCopyFailure(copyBtn);\n                                Debug.warn('ModalManager: Copy failed with execCommand', null, 2);\n                            }\n                        }\n                    } catch (err) {\n                        this._showCopyFailure(copyBtn);\n                        Debug.error('ModalManager: Error during copy operation', err, 2);\n                    }\n                }.bind(this)); // Bind to modal manager for access to helper methods\n            }\n        }, 300);\n\n        return modalId;\n    }\n\n    /**\n     * Show success state on copy button\n     * @param {HTMLElement} button - Button element\n     * @private\n     */\n    _showCopySuccess(button) {\n        const translationManager = TranslationManager.getInstance();\n        button.innerHTML = DOMUtils.getIconHtml('check-circle', { classes: 'vdm-icon--success ' + Selectors.UTILITY.MARGIN_END_2.name() }) +\n            `<span>${translationManager.get('copied')}</span>`;\n        button.classList.remove(Selectors.UTILITY.BUTTON_PRIMARY.name());\n        button.classList.add(Selectors.UTILITY.BUTTON_SUCCESS.name());\n\n        setTimeout(() => {\n            button.innerHTML = DOMUtils.getIconHtml('copy', { classes: Selectors.UTILITY.MARGIN_END_2.name() }) +\n                `<span>${translationManager.get('copyToClipboard')}</span>`;\n            button.classList.remove(Selectors.UTILITY.BUTTON_SUCCESS.name());\n            button.classList.add(Selectors.UTILITY.BUTTON_PRIMARY.name());\n        }, 2000);\n    }\n\n    /**\n     * Show failure state on copy button\n     * @param {HTMLElement} button - Button element\n     * @private\n     */\n    _showCopyFailure(button) {\n        const translationManager = TranslationManager.getInstance();\n        button.innerHTML = DOMUtils.getIconHtml('exclamation-triangle', { classes: 'vdm-icon--danger ' + Selectors.UTILITY.MARGIN_END_2.name() }) +\n            `<span>${translationManager.get('copyFailed')}</span>`;\n        button.classList.remove(Selectors.UTILITY.BUTTON_PRIMARY.name());\n        button.classList.add(Selectors.UTILITY.BUTTON_DANGER.name());\n\n        setTimeout(() => {\n            button.innerHTML = DOMUtils.getIconHtml('copy', { classes: Selectors.UTILITY.MARGIN_END_2.name() }) +\n                `<span>${translationManager.get('tryAgain')}</span>`;\n            button.classList.remove(Selectors.UTILITY.BUTTON_DANGER.name());\n            button.classList.add(Selectors.UTILITY.BUTTON_PRIMARY.name());\n        }, 2000);\n    }\n\n    /**\n     * Escape HTML entities in a string\n     * @param {string} html - String to escape\n     * @returns {string} Escaped string\n     * @private\n     */\n    _escapeHtml(html) {\n        if (!html) return '';\n\n        return html\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    /**\n     * Create a modal dynamically with content and open it immediately\n     * @param {Object} config - Modal configuration (see createModal)\n     * @param {string|Element} content - Content to set in the modal\n     * @param {string} [contentSelector] - Optional content container selector\n     * @returns {string} Modal ID\n     */\n    createAndOpenModal(config, content, contentSelector = null) {\n        try {\n            // Generate a unique ID if none provided\n            if (!config.id) {\n                config.id = 'vdm-modal--dynamic-' + Date.now();\n            }\n\n            // Create the modal\n            this.createModal(config);\n\n            // Set the content if provided\n            if (content) {\n                this.setContent(config.id, content, contentSelector || config.contentId);\n            }\n\n            // Open the modal\n            this.open(config.id);\n\n            return config.id;\n        } catch (error) {\n            Debug.error('ModalManager: Error creating and opening modal', error, 1);\n            return null;\n        }\n    }\n\n    /**\n     * Create a simple confirmation modal\n     * @param {Object} options - Confirmation options\n     * @param {string} options.title - Modal title\n     * @param {string} options.message - Confirmation message\n     * @param {string} options.confirmText - Text for confirm button\n     * @param {string} options.cancelText - Text for cancel button\n     * @param {Function} options.onConfirm - Callback for confirm action\n     * @param {Function} options.onCancel - Callback for cancel action\n     * @returns {string} Modal ID\n     */\n    createConfirmationModal(options) {\n        const modalId = 'vdm-modal--confirmation-' + Date.now();\n\n        // Create modal\n        this.createModal({\n            id: modalId,\n            title: options.title || 'Confirmation',\n            contentId: 'vdm-modal__confirmation-content',\n            contentClass: Selectors.UTILITY.PADDING_3.name(),\n            footerButtons: [\n                {\n                    id: `${modalId}-cancel-btn`,\n                    text: options.cancelText || 'Cancel',\n                    class: `${Selectors.MODAL.CLOSE.name()} ${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_SECONDARY.name()} me-2`\n                },\n                {\n                    id: `${modalId}-confirm-btn`,\n                    text: options.confirmText || 'Confirm',\n                    class: `${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_PRIMARY.name()}`\n                }\n            ],\n            events: {\n                [`#${modalId}-confirm-btn`]: {\n                    click: () => {\n                        if (typeof options.onConfirm === 'function') {\n                            options.onConfirm();\n                        }\n                        this.close(modalId);\n                    }\n                },\n                [`#${modalId}-cancel-btn`]: {\n                    click: () => {\n                        if (typeof options.onCancel === 'function') {\n                            options.onCancel();\n                        }\n                        this.close(modalId);\n                    }\n                }\n            }\n        });\n\n        // Set message content\n        this.setContent(modalId, `<p>${options.message || ''}</p>`, 'vdm-modal__confirmation-content');\n\n        // Open the modal\n        this.open(modalId);\n\n        return modalId;\n    }\n\n    /**\n     * Create an alert modal for showing messages\n     * @param {Object} options - Alert options\n     * @param {string} options.title - Modal title\n     * @param {string} options.message - Alert message\n     * @param {string} options.type - Alert type (success, info, warning, danger)\n     * @param {string} options.buttonText - Text for button\n     * @param {Function} options.onClose - Callback for close action\n     * @returns {string} Modal ID\n     */\n    createAlertModal(options) {\n        const modalId = `${Selectors.MODAL.CONTAINER.name()}--alert-${Date.now()}`;\n\n        // Determine alert class based on type\n        const alertClass = options.type ?\n            `${Selectors.UTILITY.ALERT} ${Selectors.UTILITY.ALERT_PREFIX}${options.type}` :\n            `${Selectors.UTILITY.ALERT} ${Selectors.UTILITY.ALERT_INFO}`;\n\n        // Create modal\n        this.createModal({\n            id: modalId,\n            title: options.title || 'Alert',\n            contentId: `${Selectors.MODAL.CONTAINER.name()}__alert-content`,\n            contentClass: Selectors.UTILITY.PADDING_3.name(),\n            footerButtons: [\n                {\n                    id: `${modalId}-ok-btn`,\n                    text: options.buttonText || 'OK',\n                    class: `${Selectors.MODAL.CLOSE.name()} ${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_PRIMARY.name()}`\n                }\n            ],\n            events: {\n                [`#${modalId}-ok-btn`]: {\n                    click: (e) => {\n                        if (typeof options.onClose === 'function') {\n                            options.onClose(e);\n                        }\n                        this.close(modalId);\n                    }\n                }\n            }\n        });\n\n        // Create alert content\n        const alertContent = `\n            <div class=\"${alertClass} mb-0\">\n                ${options.message || ''}\n            </div>\n        `;\n\n        // Set content\n        this.setContent(modalId, alertContent, `${Selectors.MODAL.CONTAINER.name()}__alert-content`);\n\n        // Open the modal\n        this.open(modalId);\n\n        return modalId;\n    }\n\n    /**\n     * Destroy all modal instances and clean up\n     */\n    destroy() {\n        try {\n            // Close any open modal\n            if (this.activeModal) {\n                this.close(this.activeModal);\n            }\n\n            // Reset all modal references\n            this.modals = {};\n            this.activeModal = null;\n\n            Debug.log('ModalManager: Destroyed', null, 2);\n        } catch (error) {\n            Debug.error('ModalManager: Error during destroy', error, 1);\n        }\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { NavigationUtils } from '../../utils/NavigationUtils';\nimport Selectors from '../../constants/Selectors';\n\n/**\n * Handles navigation between conflicts\n */\nexport class ConflictNavigator {\n    /**\n     * @param {DiffNavigator} navigator - Parent navigator component\n     */\n    constructor(navigator) {\n        this.navigator = navigator;\n        this.diffViewer = navigator.diffViewer;\n    }\n\n    /**\n     * Find all unresolved chunk IDs in the document\n     * @returns {Object} Object containing unresolvedChunkIds and total count\n     */\n    _getUnresolvedChunkInfo() {\n        // Find elements with unresolved status\n        const unresolvedElements = Array.from(document.querySelectorAll(\n            `[data-chunk-id]:not([data-chunk-id=\"\"])`\n        )).filter(el => el.classList.contains(Selectors.STATUS.UNRESOLVED.name()));\n\n        if (unresolvedElements.length === 0) {\n            Debug.log('ConflictNavigator: No unresolved elements found', null, 2);\n            return { unresolvedChunkIds: [], count: 0 };\n        }\n\n        // Get a unique list of chunk IDs that have unresolved status\n        const unresolvedChunkIds = [...new Set(\n            unresolvedElements.map(el => el.getAttribute('data-chunk-id'))\n        )];\n\n        Debug.log(`ConflictNavigator: Found ${unresolvedChunkIds.length} unresolved chunks`, null, 3);\n\n        return { unresolvedChunkIds, count: unresolvedChunkIds.length };\n    }\n\n    /**\n     * Navigate to first conflict\n     */\n    navigateToFirstConflict() {\n        const { unresolvedChunkIds, count } = this._getUnresolvedChunkInfo();\n\n        if (count === 0) {\n            Debug.log('ConflictNavigator: No unresolved chunks found', null, 2);\n            return false;\n        }\n\n        // Find the first chunk with this ID\n        const chunks = this.diffViewer.chunkManager.chunks;\n        const firstUnresolvedIndex = chunks.findIndex(chunk =>\n            unresolvedChunkIds.includes(String(chunk.id))\n        );\n\n        if (firstUnresolvedIndex >= 0) {\n            Debug.log(`ConflictNavigator: Navigating to first unresolved chunk at index ${firstUnresolvedIndex}`, null, 2);\n            return this.navigator.navigateToChunk(firstUnresolvedIndex);\n        }\n\n        Debug.log('ConflictNavigator: No matching chunk found', null, 2);\n        return false;\n    }\n\n    /**\n     * Navigate to next conflict\n     */\n    navigateToNextConflict() {\n        const currentIndex = this.navigator.currentChunkIndex;\n        Debug.log(`ConflictNavigator: Current chunk index is ${currentIndex}`, null, 3);\n\n        const { unresolvedChunkIds, count } = this._getUnresolvedChunkInfo();\n\n        if (count === 0) {\n            Debug.log('ConflictNavigator: No unresolved chunks found', null, 2);\n            return false;\n        }\n\n        const chunks = this.diffViewer.chunkManager.chunks;\n\n        // Find next chunk or wrap around\n        const nextIndex = this._findNextChunkIndex(chunks, unresolvedChunkIds, currentIndex);\n\n        if (nextIndex >= 0) {\n            Debug.log(`ConflictNavigator: Navigating to next unresolved chunk at index ${nextIndex}`, null, 2);\n            return this.navigator.navigateToChunk(nextIndex);\n        }\n\n        Debug.log('ConflictNavigator: No matching chunk found', null, 2);\n        return false;\n    }\n\n    /**\n     * Find the next chunk index from a starting point\n     * @private\n     */\n    _findNextChunkIndex(chunks, unresolvedChunkIds, currentIndex) {\n        const indexMap = this._createChunkIndexMap(chunks, unresolvedChunkIds);\n\n        // No matching chunks\n        if (indexMap.size === 0) {\n            return -1;\n        }\n\n        // Get all indices in the map\n        const indices = Array.from(indexMap.values()).sort((a, b) => a - b);\n\n        // Find the next index after currentIndex\n        for (const index of indices) {\n            if (index > currentIndex) {\n                return index;\n            }\n        }\n\n        // Wrap around to beginning\n        return indices[0];\n    }\n\n    /**\n     * Navigate to previous conflict\n     */\n    navigateToPrevConflict() {\n        const currentIndex = this.navigator.currentChunkIndex;\n\n        const { unresolvedChunkIds, count } = this._getUnresolvedChunkInfo();\n\n        if (count === 0) {\n            Debug.log('ConflictNavigator: No unresolved chunks found', null, 2);\n            return false;\n        }\n\n        const chunks = this.diffViewer.chunkManager.chunks;\n\n        // Find previous chunk or wrap around\n        const prevIndex = this._findPrevChunkIndex(chunks, unresolvedChunkIds, currentIndex);\n\n        if (prevIndex >= 0) {\n            Debug.log(`ConflictNavigator: Navigating to previous unresolved chunk at index ${prevIndex}`, null, 2);\n            return this.navigator.navigateToChunk(prevIndex);\n        }\n\n        Debug.log('ConflictNavigator: No matching chunk found', null, 2);\n        return false;\n    }\n\n    /**\n     * Find the previous chunk index from a starting point\n     * @private\n     */\n    _findPrevChunkIndex(chunks, unresolvedChunkIds, currentIndex) {\n        const indexMap = this._createChunkIndexMap(chunks, unresolvedChunkIds);\n\n        // No matching chunks\n        if (indexMap.size === 0) {\n            return -1;\n        }\n\n        // Get all indices in the map\n        const indices = Array.from(indexMap.values()).sort((a, b) => a - b);\n\n        // Find the previous index before currentIndex\n        for (let i = indices.length - 1; i >= 0; i--) {\n            if (indices[i] < currentIndex) {\n                return indices[i];\n            }\n        }\n\n        // Wrap around to end\n        return indices[indices.length - 1];\n    }\n\n    /**\n     * Create a map of chunk IDs to their indices for fast lookup\n     * @private\n     */\n    _createChunkIndexMap(chunks, unresolvedChunkIds) {\n        const indexMap = new Map();\n\n        chunks.forEach((chunk, index) => {\n            // Only include chunks that are unresolved\n            if (chunk && chunk.id && unresolvedChunkIds.includes(String(chunk.id))) {\n                indexMap.set(String(chunk.id), index);\n            }\n        });\n\n        return indexMap;\n    }\n\n    /**\n     * Navigate to specific chunk\n     * @param {number} index - Chunk index\n     * @returns {boolean} Success status\n     */\n    navigateToChunk(index) {\n        // Set current chunk\n        this.navigator.currentChunkIndex = index;\n\n        // Get the chunk element\n        const chunkElement = this.diffViewer.chunkManager.chunkElements[index];\n\n        // Scroll to it\n        if (chunkElement) {\n            Debug.log(`ConflictNavigator: Navigating to chunk ${index}`, null, 2);\n\n            // Find the diff-pane-content containing this element\n            const paneContent = chunkElement.closest(Selectors.DIFF.PANE_CONTENT);\n            if (paneContent) {\n                // Use utility to scroll element into view\n                NavigationUtils.scrollElementIntoView(chunkElement, paneContent);\n\n                // Add highlight effect\n                NavigationUtils.addHighlightEffect(chunkElement, 2000);\n            } else {\n                Debug.warn(`ConflictNavigator: Cannot navigate - chunk ${index} parent not found`, null, 2);\n                return false;\n            }\n        } else {\n            Debug.warn(`ConflictNavigator: Cannot scroll - chunk ${index} not found`, null, 2);\n            return false;\n        }\n\n        // Update counter\n        this.navigator.navigationCounter.updateCounter();\n        Debug.log('ConflictNavigator: Navigation complete', null, 2);\n\n        return true;\n    }\n}\n","\n/**\n * Manages navigation counter display and state\n */\nexport class NavigationCounter {\n    /**\n     * @param {DiffNavigator} navigator - Parent navigator component\n     */\n    constructor(navigator) {\n        this.navigator = navigator;\n        this.counterElement = null;\n        this.prevButton = null;\n        this.nextButton = null;\n    }\n\n    /**\n     * Set counter element reference\n     * @param {Element} element - Counter element\n     */\n    setCounterElement(element) {\n        this.counterElement = element;\n    }\n\n    /**\n     * Set navigation button references\n     * @param {Element} prevButton - Previous button\n     * @param {Element} nextButton - Next button\n     */\n    setButtons(prevButton, nextButton) {\n        this.prevButton = prevButton;\n        this.nextButton = nextButton;\n    }\n\n    /**\n     * Update counter display\n     * @returns {Array} Active conflicts for navigation\n     */\n    updateCounter() {\n        if (!this.counterElement) return [];\n\n        const chunks = this.navigator.diffViewer.chunkManager.chunks;\n        const selections = this.navigator.diffViewer.chunkManager.selections;\n        let conflictCount = 0;\n        let currentIndex = 0;\n        let activeConflicts = [];\n\n        // Count only unresolved conflicts\n        chunks.forEach((chunk, index) => {\n            if (chunk.conflict && !selections[chunk.id]) {\n                // This is an unresolved conflict - no selection made yet\n                activeConflicts.push(index);\n                conflictCount++;\n            }\n        });\n\n        // Find current position in active conflicts\n        if (this.navigator.currentChunkIndex >= 0) {\n            const position = activeConflicts.findIndex(index => index >= this.navigator.currentChunkIndex);\n            if (position !== -1) {\n                currentIndex = position + 1; // 1-based index for display\n            }\n        }\n\n        // Update counter text with different symbol when complete\n        if (conflictCount === 0) {\n            // All conflicts resolved! Show a checkmark\n            this.counterElement.textContent = '✓';\n            this.counterElement.title = 'All conflicts resolved!';\n        } else {\n            this.counterElement.textContent = `${currentIndex || 1}/${conflictCount}`;\n            this.counterElement.title = `${conflictCount} conflicts remaining`;\n        }\n\n        // Enable/disable buttons based on conflict count\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = conflictCount === 0;\n            this.nextButton.disabled = conflictCount === 0;\n        }\n\n        return activeConflicts;\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { DOMUtils } from '../../utils/DOMUtils';\nimport Selectors from '../../constants/Selectors';\n\n/**\n * Builds navigation UI elements\n */\nexport class NavigationUIBuilder {\n    /**\n     * @param {DiffNavigator} navigator - Parent navigator component\n     */\n    constructor(navigator) {\n        this.navigator = navigator;\n    }\n\n    /**\n     * Create navigation UI elements\n     * @returns {Object|null} Object with counter, prev button, and next button elements\n     */\n    createNavigationUI() {\n        Debug.log('NavigationUIBuilder: Creating navigation UI', null, 2);\n\n        // Find container element - first look for an existing one\n        let container = document.querySelector(Selectors.NAVIGATION.CONTAINER);\n\n        // If no container found, create one\n        if (!container) {\n            Debug.log('NavigationUIBuilder: No navigation container found, creating one', null, 2);\n\n            // Get the diff pane contents as parent reference\n            const panes = document.querySelectorAll(Selectors.DIFF.PANE);\n            if (!panes || panes.length === 0) {\n                Debug.warn('NavigationUIBuilder: No diff panes found to append navigation container');\n                return null;\n            }\n\n            // Create container\n            container = document.createElement('div');\n            container.className = Selectors.NAVIGATION.CONTAINER.name();\n\n            // Build controls inside the container\n            this._createControls(container);\n\n            // Append after the first pane\n            if (panes[0].parentNode) {\n                panes[0].parentNode.insertBefore(container, panes[0]);\n            }\n        } else {\n            // Use existing container, but update its contents\n            Debug.log('NavigationUIBuilder: Using existing navigation container', null, 2);\n            container.innerHTML = '';\n            this._createControls(container);\n        }\n\n        // Return references to the elements\n        return {\n            counter: document.getElementById(Selectors.NAVIGATION.COUNTER.name()),\n            prevButton: document.getElementById(Selectors.NAVIGATION.PREV_BUTTON.name()),\n            nextButton: document.getElementById(Selectors.NAVIGATION.NEXT_BUTTON.name())\n        };\n    }\n\n    /**\n     * Create navigation controls\n     * @private\n     * @param {Element} container - Container element\n     */\n    _createControls (container) {\n        // Create nav chunk element\n        const navChunk = document.createElement('div');\n        navChunk.className = Selectors.NAVIGATION.NAV_CHUNK.name();\n\n        // Create counter element\n        const counter = document.createElement('span');\n        counter.id = Selectors.NAVIGATION.COUNTER.name();\n        counter.className = Selectors.NAVIGATION.COUNTER_ELEMENT.name();\n\n        // Create previous button\n        const prevButton = document.createElement('button');\n        prevButton.id = Selectors.NAVIGATION.PREV_BUTTON.name();\n        prevButton.classList.add(\n            Selectors.UTILITY.BUTTON.name(),\n            Selectors.UTILITY.BUTTON_FLAT.name(),\n            Selectors.UTILITY.BUTTON_SMALL.name()\n        );\n        prevButton.innerHTML = DOMUtils.getIconHtml('chevron-up');\n        prevButton.title = 'Previous change';\n        prevButton.addEventListener('click', () => this.navigator.navigateToPrevConflict());\n\n        // Create next button\n        const nextButton = document.createElement('button');\n        nextButton.id = Selectors.NAVIGATION.NEXT_BUTTON.name();\n        nextButton.classList.add(\n            Selectors.UTILITY.BUTTON.name(),\n            Selectors.UTILITY.BUTTON_FLAT.name(),\n            Selectors.UTILITY.BUTTON_SMALL.name()\n        );\n        nextButton.innerHTML = DOMUtils.getIconHtml('chevron-down');\n        nextButton.title = 'Next change';\n        nextButton.addEventListener('click', () => this.navigator.navigateToNextConflict());\n\n        // Add elements to navChunk\n        navChunk.appendChild(prevButton);\n        navChunk.appendChild(counter);\n        navChunk.appendChild(nextButton);\n\n        // Add navChunk to container\n        container.appendChild(navChunk);\n\n        Debug.log('NavigationUIBuilder: Navigation controls created', null, 2);\n    }\n\n    /**\n     * Clean up event handlers\n     */\n    destroy() {\n        // Find navigation buttons\n        const prevButton = document.getElementById(Selectors.NAVIGATION.PREV_BUTTON.name());\n        const nextButton = document.getElementById(Selectors.NAVIGATION.NEXT_BUTTON.name());\n\n        // Remove event listeners by cloning\n        if (prevButton) {\n            const newPrevButton = prevButton.cloneNode(true);\n            prevButton.parentNode.replaceChild(newPrevButton, prevButton);\n        }\n\n        if (nextButton) {\n            const newNextButton = nextButton.cloneNode(true);\n            nextButton.parentNode.replaceChild(newNextButton, nextButton);\n        }\n\n        Debug.log('NavigationUIBuilder: Event handlers removed', null, 2);\n    }\n}\n"],"names":["Debug","StringUtils","Selectors","LoaderManager","TranslationManager","ChunkRenderer","chunkManager","_classCallCheck","_createClass","key","value","renderChunks","log","loaderId","chunks","length","translationManager","getInstance","loaderManager","loadingMessage","get","showLoader","fullscreen","zIndex","startTime","performance","now","leftHtml","buildDiffPaneHtml","oldContent","rightHtml","newContent","diffViewer","container","innerHTML","concat","DIFF","PANES_CONTAINER","name","PANE","PANE_LEFT","PANE_RIGHT","hideLoader","endTime","duration","toFixed","lines","side","chunksWithPlaceholders","Set","_iterator","_createForOfIteratorHelper","_step","s","n","done","line","type","chunkId","add","err","e","f","html","PANE_CONTENT","TABLE_WRAPPER","CODE","TABLE","lineCounter","_iterator2","_step2","_renderDiffLine","lineNumber","undefined","chunkType","chunk","find","c","id","LINE_NUMBER","hasPlaceholder","has","_renderPlaceholderLine","_renderContentLine","additionalClass","CHUNK","conflict","STATUS","UNRESOLVED","LINE_CONTENT","LINE_CONTENT_EMPTY","LINE_PLACEHOLDER","placeholderType","lineContent","isEmpty","_getChunkClass","LINE_EMPTY","displayContent","escapeHtml","replace","styleAttr","LINE_DELETE","LINE_ADD","cls","LINE_REPLACE_LEFT","LINE_REPLACE_RIGHT","DOMUtils","ChunkUtils","IconRegistry","ChunkVisualStateManager","ChunkSelectionHandler","selections","visualStateManager","SELECTED","CHUNK_SELECTED","UNSELECTED","CHUNK_UNSELECTED","_performanceMetrics","lastOperationTime","operationCount","setupChunkSelection","_this","_boundClickHandler","event","_handleClick","_boundCheckAllHandler","_handleCheckAll","setupEventHandlers","removeExisting","styles","cursor","_setupCheckAllButtons","clearCache","panes","querySelectorAll","leftPane","rightPane","_createCheckAllButtonHeader","pane","header","document","createElement","className","PANE_HEADER","classList","language","runtimeProps","diffData","langBadge","textContent","checkAllButton","UTILITY","BUTTON","BUTTON_EXTRA_SMALL","BUTTON_SECONDARY","CHECK_ALL_BTN","setAttribute","title","style","display","alignItems","verticalAlign","iconWrapper","marginRight","height","lineHeight","uncheckIcon","createIcon","width","classes","appendChild","textSpan","createTextNode","insertBefore","firstChild","addEventListener","_this2","button","currentTarget","getAttribute","iconState","oppositeButton","_getOppositeButton","message","_setButtonProcessingState","setTimeout","_toggleButtonIconState","clearAllSelections","selectAllOnSide","_recordPerformanceMetrics","isProcessing","opacity","remove","operationTime","cacheStats","getCacheStats","elementHitRatio","elementCacheHits","elementCacheMisses","iconHitRatio","iconMarkerCacheHits","iconMarkerCacheMisses","totalOperations","currentSide","oppositeSide","querySelector","currentState","newIconState","_this3","useBatch","arguments","conflictChunks","filter","largeDiff","forEach","_syncWithDiffConfig","chunksBySide","Map","updateVisualState","elements","getChunkElements","set","applyBatch","requestAnimationFrame","_refreshIconStates","element","RESOLVED","_updateNavigationCounter","onSelectionChange","toggleChunkSelection","selectedSide","selectedElements","oppositeElements","sortedElements","sortElementsByLineNumber","firstElement","lineId","dataset","iconMarker","getIconMarker","ICONS","SELECT","SELECT_LEFT","SELECT_RIGHT","row","getParentRow","sortedOppositeElements","firstOppositeElement","oppositeLineId","oppositeIconMarker","isPlaceholderType","contains","wasPlaceholder","MARKER_PLACEHOLDER","split","selectedLineId","selectedElement","selectedHasPlaceholder","selectedIsPlaceholderType","outerHTML","substring","isAlreadySelected","_this$chunkManager$di","diffConfig","chunkSelections","resetVisualState","chunkElements","state","batch","_this$chunkManager$di2","_this$chunkManager$di3","diffNavigator","updateCounter","getSelections","_objectSpread","isChunkResolved","getUnresolvedCount","Object","keys","_this4","selectedChunks","selectedChunkIds","map","elementsToUpdate","_this4$chunkManager$d","_chunkId","_this4$chunkManager$d2","_pendingOperations","_isBatching","_metrics","lastBatchSize","lastBatchTime","initialize","preloadChunks","push","_applyStateToElements","_updateIconMarker","_updateOppositeMarker","warn","_notifySelectionChange","_element$dataset","lineIdParts","oppositeMarker","currentClasses","Array","from","iconMarkers","getChunkIconMarkers","_applyResetToElements","notify","batchSize","updateOperations","resetOperations","operation","_processBatchedResets","_processBatchedUpdates","processingTime","operations","resetOps","updateOps","msPerOperation","error","allElements","allIconMarkers","apply","_toConsumableArray","elementsByState","firstElementsByState","_elementsByState$stat","entries","_ref","_ref2","_slicedToArray","_ref3","_ref4","chunksMap","_ref5","_ref6","data","body","getBoundingClientRect","removeClasses","addClass","rows","_element$classList","PLACEHOLDER","_row$classList","iconRemoveClasses","el","_el$classList","_row$classList2","marker","_marker$classList","isPlaceholder","getMetrics","MergeContentGenerator","generateMergedContent","generateFileContent","result","rightChunkLines","leftChunkLines","processedChunks","i","selection","leftLines","contentLines","l","rightLines","join","generateFileFromLines","_regeneratorRuntime","t","r","prototype","hasOwnProperty","o","defineProperty","Symbol","a","iterator","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","_next","_throw","_defineProperties","_toPropertyKey","_toPrimitive","toPrimitive","String","Number","AlertManager","MergeOperationHandler","mergeHandler","_proceedWithMerge","_callee","mergeType","fileRefId","oldFileRefId","mergedContent","resultContainer","alertManager","alertElement","_resultContainer","_alertManager","_alertElement","_resultContainer2","_alertManager2","errorMessage","_alertElement2","_callee$","_context","getRuntimeProps","success","applyMerge","getElementById","showSuccess","timeout","translate","scrollToMergeResult","showError","t0","proceedWithMerge","_x","_applyMerge","_callee2","wasBeautified","formParams","endpoint","response","_callee2$","_context2","JSON","stringify","isContentBeautified","action","content","getEndpoint","fetch","headers","URLSearchParams","json","_x2","_x3","resultElement","scrollIntoView","behavior","block","MergeContentFormatter","CopyButton","MergePreviewManager","modalManager","setupPreviewButton","previewButton","MERGE","BUTTON_PREVIEW","getMergedResultButton","GET_MERGED_RESULT_BTN","buttonToUse","newBtn","cloneNode","parentNode","replaceChild","trim","getIconHtml","handlePreviewClick","bind","_this$diffViewer$runt","getMergedContent","fileToMerge","filepath","extension","toLowerCase","formattedContent","formatPreview","setContent","MODAL","PREVIEW_FILENAME","PREVIEW","PREVIEW_CONTENT_ID","controlsContainer","FLEX","JUSTIFY_CONTENT_BETWEEN","MARGIN_TOP_2","PADDING_2","messageArea","ALIGN_ITEMS_CENTER","open","applySyntaxHighlighting","addCopyButtonsToPreview","showPreviewError","window","hljs","_DOMUtils$getElement","preElement","getElement","codeElement","highlightElement","lineNumbersBlock","escapedError","showMessage","NavigationUtils","MergeUIController","mergeDestination","mergeToggleBtn","mergeToggleIcon","mergeToggleText","initMergeDestinationToggle","setupModalButtons","setupApplyMergeButton","DESTINATION_DROPDOWN","DESTINATION_TOGGLE","populateMergeDestinations","savedDestination","localStorage","getItem","valueExists","options","selectedIndex","setupMergeToggleEvents","_diffData$new","_runtimeProps$filepat","_diffData$old","newFileName","filename","oldFileName","old","newFile","oldFile","newFileWithoutExt","lastIndexOf","oldFileWithoutExt","newFileExt","oldFileExt","newMergedFile","oldMergedFile","config","getConfig","saveOptions","saveToOriginal","saveWithSuffix","saveToOld","saveToOldWithSuffix","saveToBoth","saveToBothWithSuffix","optionCount","createAndAppendElement","attributes","toggleHandler","preventDefault","stopPropagation","focus","showPicker","clickEvent","MouseEvent","bubbles","cancelable","view","dispatchEvent","changeHandler","updateMergeToggle","setItem","newToggleBtn","newMergeDestination","dropdownIcon","MARGIN_START_2","paddingRight","appearance","borderColor","newFileColorClass","oldFileColorClass","bothFilesColorClass","newFileBtnClass","BUTTON_PRIMARY","oldFileBtnClass","BUTTON_WARNING","bothFilesBtnClass","BUTTON_INFO","iconHtml","colorClass","buttonClass","iconClasses","MARGIN_END_1","applyButton","BUTTON_APPLY","BUTTON_SUCCESS","BUTTON_DANGER","target","closest","CONTINUE_BTN","close","CONFLICT_MODAL","previewModalId","highlightUnresolvedChunks","MERGE_BTN","getMergeType","registerBeforeOpenCallback","continueBtn","mergeBtn","onclick","mergeControlsActions","CONTROLS_ACTIONS","toString","destinationDropdown","toggleButton","form","justifyContent","destinationContainer","handleApplyMerge","Event","unresolvedCount","countUnresolvedConflicts","showConflictModal","translations","formatUnresolvedCount","MESSAGE","newContinueBtn","newMergeBtn","_this$mergeDestinatio","chunkIndex","indexOf","navigateToChunk","chunkElement","addHighlightEffect","setupLocalOnlyControls","_this5","getMergedResultText","getMergedResultTooltip","getMergedResultBtn","downloadIconHtml","buttonContainer","spacer","flex","BaseSingleton","instance","ModalManager","_BaseSingleton","_callSuper","_isFirstInstance","_possibleConstructorReturn","debug","modals","activeModal","initialized","_inherits","initModals","createModal","CONFIRM","contentId","contentClass","PADDING_3","footerButtons","text","MARGIN_END_2","PREVIEW_CONTENT","headerClass","HEADER_FIXED","modalClass","_setupEventListeners","modalId","HEADER","modalHtml","CONTAINER","attr","CONTENT","TITLE","CLOSE","FOOTER","isCloseButton","includes","iconName","classNames","some","_appendToBody","isOpen","modalElement","setFullscreenSize","events","selector","_ref7","_ref8","eventName","handler","_getIconNameForButton","buttonText","modal","tempContainer","firstElementChild","backdrop","BACKDROP","matches","register","callback","beforeOpenCallbacks","_showModal","displayBefore","overflow","_hideModal","contentSelector","contentType","contentLength","contentPreview","targetSelector","_container","startsWith","found","containsPre","hasPreElements","innerHtmlLength","Element","elementType","tagName","elementId","FULLSCREEN","headerHeight","offsetHeight","createCopyModal","codeText","CODE_COPY","COPY_CONTENT","FIXED_FOOTER","safeText","_escapeHtml","COPY","DIALOG","INSTRUCTIONS","TEXTAREA","TEXTAREA_ELEM","ACTIONS","textarea","copyBtn","select","_navigator$clipboard","navigator","clipboard","writeText","_showCopySuccess","_err","execCommand","_showCopyFailure","createAndOpenModal","Date","createConfirmationModal","_this6","cancelText","confirmText","_defineProperty","click","onConfirm","onCancel","createAlertModal","_this7","alertClass","ALERT","ALERT_PREFIX","ALERT_INFO","onClose","alertContent","destroy","ConflictNavigator","_getUnresolvedChunkInfo","unresolvedElements","unresolvedChunkIds","count","navigateToFirstConflict","_this$_getUnresolvedC","firstUnresolvedIndex","findIndex","navigateToNextConflict","currentIndex","currentChunkIndex","_this$_getUnresolvedC2","nextIndex","_findNextChunkIndex","indexMap","_createChunkIndexMap","size","indices","sort","b","index","navigateToPrevConflict","_this$_getUnresolvedC3","prevIndex","_findPrevChunkIndex","paneContent","scrollElementIntoView","navigationCounter","NavigationCounter","counterElement","prevButton","nextButton","setCounterElement","setButtons","conflictCount","activeConflicts","position","disabled","NavigationUIBuilder","createNavigationUI","NAVIGATION","_createControls","counter","COUNTER","PREV_BUTTON","NEXT_BUTTON","navChunk","NAV_CHUNK","COUNTER_ELEMENT","BUTTON_FLAT","BUTTON_SMALL","newPrevButton","newNextButton"],"sourceRoot":""}