{"version":3,"file":"diff-viewer-b4afe919.js","mappings":"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","sources":["webpack://diff-files/./src/components/merge/MergePreviewManager.js","webpack://diff-files/./src/components/navigator/ConflictNavigator.js","webpack://diff-files/./src/components/chunks/ChunkRenderer.js","webpack://diff-files/./src/components/chunks/MergeContentGenerator.js","webpack://diff-files/./src/components/merge/MergeOperationHandler.js","webpack://diff-files/./src/components/navigator/NavigationCounter.js","webpack://diff-files/./src/components/navigator/NavigationUIBuilder.js","webpack://diff-files/./src/components/modal/ModalManager.js","webpack://diff-files/./src/components/merge/MergeUIController.js","webpack://diff-files/./src/components/chunks/ChunkVisualStateManager.js","webpack://diff-files/./src/components/chunks/ChunkSelectionHandler.js"],"sourcesContent":["import { Debug } from '../../utils/Debug';\nimport { MergeContentFormatter } from '../../utils/MergeContentFormatter';\nimport { DOMUtils } from '../../utils/DOMUtils';\nimport { StringUtils } from '../../utils/StringUtils';\nimport { CopyButton } from '../syntax/CopyButton';\nimport Selectors from '../../constants/Selectors';\nimport { TranslationManager } from '../../utils/TranslationManager';\nimport { LoaderManager } from '../../utils/LoaderManager';\n\n/**\n * Handles preview functionality for merges\n */\nexport class MergePreviewManager {\n    /**\n     * Initialize preview manager\n     * @param {MergeHandler} mergeHandler - Parent merge handler\n     */\n    constructor(mergeHandler) {\n        this.mergeHandler = mergeHandler;\n        this.diffViewer = mergeHandler.diffViewer;\n        this.modalManager = mergeHandler.modalManager;\n    }\n\n    /**\n     * Initialize preview button and events\n     * Sets up the preview button click handler\n     */\n    initialize() {\n        // Set up the preview button event handler\n        this.setupPreviewButton();\n        Debug.log('MergePreviewManager: Initialized', null, 2);\n    }\n\n    /**\n     * Set up the preview button with event handler\n     * Recreates button to remove existing handlers\n     */\n    setupPreviewButton() {\n        // Try to find the standard preview button first\n        const previewButton = document.getElementById(Selectors.MERGE.BUTTON_PREVIEW.name());\n\n        // If not found, check for the \"Get merged result\" button (used in local-only mode)\n        const getMergedResultButton = !previewButton ?\n            document.getElementById(Selectors.MERGE.GET_MERGED_RESULT_BTN.name()) : null;\n\n        // Use whichever button is available\n        const buttonToUse = previewButton || getMergedResultButton;\n\n        if (!buttonToUse) {\n            Debug.warn('MergePreviewManager: Preview button not found', null, 2);\n            return;\n        }\n\n        // Remove any existing handlers by cloning\n        const newBtn = buttonToUse.cloneNode(true);\n        if (buttonToUse.parentNode) {\n            buttonToUse.parentNode.replaceChild(newBtn, buttonToUse);\n        }\n\n        // Add the icon and text if needed (only for the regular preview button)\n        if (buttonToUse === previewButton && (!newBtn.innerHTML || newBtn.innerHTML.trim() === '')) {\n            newBtn.innerHTML = DOMUtils.getIconHtml('eye', { classes: 'me-2' }) + 'Preview';\n        }\n\n        // Add handler\n        newBtn.addEventListener('click', this.handlePreviewClick.bind(this));\n        Debug.log(`MergePreviewManager: ${buttonToUse === previewButton ? 'Preview' : 'Get merged result'} button handler set up`, null, 3);\n    }\n\n    /**\n     * Handle preview button click\n     * Generates preview content and shows in modal\n     */\n    handlePreviewClick() {\n        Debug.log('MergePreviewManager: Preview button clicked', null, 2);\n\n        // Get translation manager for loading message\n        const translationManager = TranslationManager.getInstance();\n        const loadingMessage = translationManager.get('loadingContent', 'Generating preview...');\n\n        // Show loading indicator\n        const loaderManager = LoaderManager.getInstance();\n        const loaderId = loaderManager.showLoader(loadingMessage, {\n            fullscreen: true,\n            zIndex: 1000 // Ensure it appears above other UI elements\n        });\n\n        try {\n            // Get the merged content from the content generator\n            const mergedContent = this.mergeHandler.getMergedContent();\n\n            // Get file extension from runtime properties instead of options\n            const fileToMerge = this.diffViewer.runtimeProps?.filepath || '';\n            const extension = fileToMerge.split('.').pop().toLowerCase();\n\n            // Format the content for preview with line numbers\n            const formattedContent = MergeContentFormatter.formatPreview(mergedContent, extension, true);\n\n            // Hide loading indicator now that content is ready\n            loaderManager.hideLoader(loaderId);\n\n            // Set the filename in the preview modal title using DOMUtils\n            DOMUtils.setContent(\n                Selectors.MODAL.PREVIEW_FILENAME.name(),\n                this.diffViewer.runtimeProps.filepath || 'merged-file'\n            );\n\n            // Use ModalManager to set content and open modal\n            this.modalManager.setContent(\n                Selectors.MODAL.PREVIEW.name(),\n                formattedContent,\n                Selectors.MODAL.PREVIEW_CONTENT_ID.name()\n            );\n\n            // Create controls container\n            const controlsContainer = document.createElement('div');\n            controlsContainer.classList.add(Selectors.UTILITY.FLEX.name(),\n                                           Selectors.UTILITY.JUSTIFY_CONTENT_BETWEEN.name(),\n                                           Selectors.UTILITY.MARGIN_TOP_2.name(),\n                                           Selectors.UTILITY.PADDING_2.name());\n\n            // Create message area\n            const messageArea = document.createElement('div');\n            messageArea.id = 'merge-preview-message';\n            messageArea.classList.add(Selectors.UTILITY.FLEX.name(),\n                                     Selectors.UTILITY.ALIGN_ITEMS_CENTER.name());\n            controlsContainer.appendChild(messageArea);\n\n            // Open the modal\n            this.modalManager.open(Selectors.MODAL.PREVIEW.name());\n\n            // Apply syntax highlighting if available\n            this.applySyntaxHighlighting();\n\n            // Add copy buttons to code blocks\n            CopyButton.addCopyButtonsToPreview(Selectors.MODAL.PREVIEW_CONTENT_ID.name());\n\n            Debug.log('MergePreviewManager: Preview opened successfully', null, 2);\n        } catch (error) {\n            // Hide loading indicator in case of error\n            loaderManager.hideLoader(loaderId);\n\n            Debug.error('MergePreviewManager: Error during preview:', error, 2);\n            this.showPreviewError(error);\n        }\n    }\n\n    /**\n     * Apply syntax highlighting to preview content\n     * Uses highlight.js if available\n     */\n    applySyntaxHighlighting() {\n        if (!window.hljs) {\n            Debug.log('MergePreviewManager: Highlight.js not available', null, 3);\n            return;\n        }\n\n        try {\n            // Use DOMUtils to get the preview element\n            const preElement = DOMUtils.getElement(Selectors.MODAL.PREVIEW_CONTENT_ID.name())?.querySelector('pre');\n            const codeElement = preElement?.querySelector('code');\n\n            if (!codeElement) {\n                Debug.warn('MergePreviewManager: No code element found for highlighting', null, 2);\n                return;\n            }\n\n            // Apply syntax highlighting\n            window.hljs.highlightElement(codeElement);\n\n            // Add line numbers if the pre element has the data-line-numbers attribute\n            if (preElement.getAttribute('data-line-numbers') === 'true' && window.hljs.lineNumbersBlock) {\n                window.hljs.lineNumbersBlock(codeElement);\n                Debug.log('MergePreviewManager: Line numbers added to preview', null, 3);\n            }\n\n            Debug.log('MergePreviewManager: Syntax highlighting applied', null, 3);\n        } catch (error) {\n            Debug.warn('MergePreviewManager: Error applying syntax highlighting:', error, 2);\n        }\n    }\n\n    /**\n     * Show error in preview modal\n     * @param {Error} error - Error object\n     */\n    showPreviewError(error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        const escapedError = StringUtils.escapeHtml(errorMessage);\n\n        // First clear the modal content\n        this.modalManager.setContent(\n            Selectors.MODAL.PREVIEW.name(),\n            '',\n            Selectors.MODAL.PREVIEW_CONTENT_ID.name()\n        );\n\n        // Then use DOMUtils to show the message\n        DOMUtils.showMessage(\n            Selectors.MODAL.PREVIEW_CONTENT_ID.name(),\n            `<h4>Error Generating Preview</h4><p>${escapedError}</p>`,\n            'danger',\n            { className: '' } // No margin in modal\n        );\n\n        this.modalManager.open(Selectors.MODAL.PREVIEW.name());\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { NavigationUtils } from '../../utils/NavigationUtils';\nimport Selectors from '../../constants/Selectors';\n\n/**\n * Handles navigation between conflicts\n */\nexport class ConflictNavigator {\n    /**\n     * @param {DiffNavigator} navigator - Parent navigator component\n     */\n    constructor(navigator) {\n        this.navigator = navigator;\n        this.diffViewer = navigator.diffViewer;\n    }\n\n    /**\n     * Find all unresolved chunk IDs in the document\n     * @returns {Object} Object containing unresolvedChunkIds and total count\n     */\n    _getUnresolvedChunkInfo() {\n        // Find elements with unresolved status\n        const unresolvedElements = Array.from(document.querySelectorAll(\n            `[data-chunk-id]:not([data-chunk-id=\"\"])`\n        )).filter(el => el.classList.contains(Selectors.STATUS.UNRESOLVED.name()));\n\n        if (unresolvedElements.length === 0) {\n            Debug.log('ConflictNavigator: No unresolved elements found', null, 2);\n            return { unresolvedChunkIds: [], count: 0 };\n        }\n\n        // Get a unique list of chunk IDs that have unresolved status\n        const unresolvedChunkIds = [...new Set(\n            unresolvedElements.map(el => el.getAttribute('data-chunk-id'))\n        )];\n\n        Debug.log(`ConflictNavigator: Found ${unresolvedChunkIds.length} unresolved chunks`, null, 3);\n\n        return { unresolvedChunkIds, count: unresolvedChunkIds.length };\n    }\n\n    /**\n     * Navigate to first conflict\n     */\n    navigateToFirstConflict() {\n        const { unresolvedChunkIds, count } = this._getUnresolvedChunkInfo();\n\n        if (count === 0) {\n            Debug.log('ConflictNavigator: No unresolved chunks found', null, 2);\n            return false;\n        }\n\n        // Find the first chunk with this ID\n        const chunks = this.diffViewer.chunkManager.chunks;\n        const firstUnresolvedIndex = chunks.findIndex(chunk =>\n            unresolvedChunkIds.includes(String(chunk.id))\n        );\n\n        if (firstUnresolvedIndex >= 0) {\n            Debug.log(`ConflictNavigator: Navigating to first unresolved chunk at index ${firstUnresolvedIndex}`, null, 2);\n            return this.navigator.navigateToChunk(firstUnresolvedIndex);\n        }\n\n        Debug.log('ConflictNavigator: No matching chunk found', null, 2);\n        return false;\n    }\n\n    /**\n     * Navigate to next conflict\n     */\n    navigateToNextConflict() {\n        const currentIndex = this.navigator.currentChunkIndex;\n        Debug.log(`ConflictNavigator: Current chunk index is ${currentIndex}`, null, 3);\n\n        const { unresolvedChunkIds, count } = this._getUnresolvedChunkInfo();\n\n        if (count === 0) {\n            Debug.log('ConflictNavigator: No unresolved chunks found', null, 2);\n            return false;\n        }\n\n        const chunks = this.diffViewer.chunkManager.chunks;\n\n        // Find next chunk or wrap around\n        const nextIndex = this._findNextChunkIndex(chunks, unresolvedChunkIds, currentIndex);\n\n        if (nextIndex >= 0) {\n            Debug.log(`ConflictNavigator: Navigating to next unresolved chunk at index ${nextIndex}`, null, 2);\n            return this.navigator.navigateToChunk(nextIndex);\n        }\n\n        Debug.log('ConflictNavigator: No matching chunk found', null, 2);\n        return false;\n    }\n\n    /**\n     * Find the next chunk index from a starting point\n     * @private\n     */\n    _findNextChunkIndex(chunks, unresolvedChunkIds, currentIndex) {\n        const indexMap = this._createChunkIndexMap(chunks, unresolvedChunkIds);\n\n        // No matching chunks\n        if (indexMap.size === 0) {\n            return -1;\n        }\n\n        // Get all indices in the map\n        const indices = Array.from(indexMap.values()).sort((a, b) => a - b);\n\n        // Find the next index after currentIndex\n        for (const index of indices) {\n            if (index > currentIndex) {\n                return index;\n            }\n        }\n\n        // Wrap around to beginning\n        return indices[0];\n    }\n\n    /**\n     * Navigate to previous conflict\n     */\n    navigateToPrevConflict() {\n        const currentIndex = this.navigator.currentChunkIndex;\n\n        const { unresolvedChunkIds, count } = this._getUnresolvedChunkInfo();\n\n        if (count === 0) {\n            Debug.log('ConflictNavigator: No unresolved chunks found', null, 2);\n            return false;\n        }\n\n        const chunks = this.diffViewer.chunkManager.chunks;\n\n        // Find previous chunk or wrap around\n        const prevIndex = this._findPrevChunkIndex(chunks, unresolvedChunkIds, currentIndex);\n\n        if (prevIndex >= 0) {\n            Debug.log(`ConflictNavigator: Navigating to previous unresolved chunk at index ${prevIndex}`, null, 2);\n            return this.navigator.navigateToChunk(prevIndex);\n        }\n\n        Debug.log('ConflictNavigator: No matching chunk found', null, 2);\n        return false;\n    }\n\n    /**\n     * Find the previous chunk index from a starting point\n     * @private\n     */\n    _findPrevChunkIndex(chunks, unresolvedChunkIds, currentIndex) {\n        const indexMap = this._createChunkIndexMap(chunks, unresolvedChunkIds);\n\n        // No matching chunks\n        if (indexMap.size === 0) {\n            return -1;\n        }\n\n        // Get all indices in the map\n        const indices = Array.from(indexMap.values()).sort((a, b) => a - b);\n\n        // Find the previous index before currentIndex\n        for (let i = indices.length - 1; i >= 0; i--) {\n            if (indices[i] < currentIndex) {\n                return indices[i];\n            }\n        }\n\n        // Wrap around to end\n        return indices[indices.length - 1];\n    }\n\n    /**\n     * Create a map of chunk IDs to their indices for fast lookup\n     * @private\n     */\n    _createChunkIndexMap(chunks, unresolvedChunkIds) {\n        const indexMap = new Map();\n\n        chunks.forEach((chunk, index) => {\n            // Only include chunks that are unresolved\n            if (chunk && chunk.id && unresolvedChunkIds.includes(String(chunk.id))) {\n                indexMap.set(String(chunk.id), index);\n            }\n        });\n\n        return indexMap;\n    }\n\n    /**\n     * Navigate to specific chunk\n     * @param {number} index - Chunk index\n     * @returns {boolean} Success status\n     */\n    navigateToChunk(index) {\n        // Set current chunk\n        this.navigator.currentChunkIndex = index;\n\n        // Get the chunk element\n        const chunkElement = this.diffViewer.chunkManager.chunkElements[index];\n\n        // Scroll to it\n        if (chunkElement) {\n            Debug.log(`ConflictNavigator: Navigating to chunk ${index}`, null, 2);\n\n            // Find the diff-pane-content containing this element\n            const paneContent = chunkElement.closest(Selectors.DIFF.PANE_CONTENT);\n            if (paneContent) {\n                // Use utility to scroll element into view\n                NavigationUtils.scrollElementIntoView(chunkElement, paneContent);\n\n                // Add highlight effect\n                NavigationUtils.addHighlightEffect(chunkElement, 2000);\n            } else {\n                Debug.warn(`ConflictNavigator: Cannot navigate - chunk ${index} parent not found`, null, 2);\n                return false;\n            }\n        } else {\n            Debug.warn(`ConflictNavigator: Cannot scroll - chunk ${index} not found`, null, 2);\n            return false;\n        }\n\n        // Update counter\n        this.navigator.navigationCounter.updateCounter();\n        Debug.log('ConflictNavigator: Navigation complete', null, 2);\n\n        return true;\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { StringUtils } from '../../utils/StringUtils';\nimport Selectors from '../../constants/Selectors';\nimport { LoaderManager } from '../../utils/LoaderManager';\nimport { TranslationManager } from '../../utils/TranslationManager';\n\n/**\n * Responsible for rendering chunk content\n */\nexport class ChunkRenderer {\n    /**\n     * @param {ChunkManager} chunkManager - Parent chunk manager\n     */\n    constructor(chunkManager) {\n        this.chunkManager = chunkManager;\n    }\n\n    /**\n     * Render all chunks to container\n     */\n    renderChunks() {\n        Debug.log('ChunkRenderer: Beginning chunk rendering', null, 2);\n\n        // Show loading indicator for large diffs (more than 100 chunks)\n        let loaderId = null;\n        if (this.chunkManager.chunks.length > 100) {\n            const translationManager = TranslationManager.getInstance();\n            const loaderManager = LoaderManager.getInstance();\n            const loadingMessage = translationManager.get('renderingDiff', 'Rendering diff...');\n\n            loaderId = loaderManager.showLoader(loadingMessage, {\n                fullscreen: true,\n                zIndex: 1000\n            });\n\n            Debug.log('ChunkRenderer: Showing loader for large diff rendering', null, 2);\n        }\n\n        // Performance tracking\n        const startTime = performance.now();\n\n        // Generate HTML for both panes\n        const leftHtml = this.buildDiffPaneHtml(this.chunkManager.oldContent, 'left');\n        const rightHtml = this.buildDiffPaneHtml(this.chunkManager.newContent, 'right');\n\n        // Inject HTML into container - WITHOUT creating empty pane headers\n        // The headers will be added by ChunkSelectionHandler later\n        this.chunkManager.diffViewer.container.innerHTML = `\n            <div class=\"${Selectors.DIFF.PANES_CONTAINER.name()}\">\n                <div class=\"${Selectors.DIFF.PANE.name()}\" id=\"${Selectors.DIFF.PANE_LEFT.name()}\" data-side=\"left\">\n                    ${leftHtml}\n                </div>\n                <div class=\"${Selectors.DIFF.PANE.name()}\" id=\"${Selectors.DIFF.PANE_RIGHT.name()}\" data-side=\"right\">\n                    ${rightHtml}\n                </div>\n            </div>\n        `;\n\n        // Hide loader if shown\n        if (loaderId) {\n            const loaderManager = LoaderManager.getInstance();\n            loaderManager.hideLoader(loaderId);\n\n            // Log performance metrics\n            const endTime = performance.now();\n            const duration = endTime - startTime;\n            Debug.log(`ChunkRenderer: Rendered ${this.chunkManager.chunks.length} chunks in ${duration.toFixed(2)}ms`, null, 2);\n        } else {\n            Debug.log(`ChunkRenderer: Rendered ${this.chunkManager.chunks.length} chunks successfully`, null, 2);\n        }\n    }\n\n    /**\n     * Build HTML for a diff pane\n     * @param {Array} lines - Content lines\n     * @param {string} side - 'left' or 'right'\n     * @returns {string} Generated HTML\n     */\n    buildDiffPaneHtml(lines, side) {\n        // First, identify chunks that have placeholder lines\n        const chunksWithPlaceholders = new Set();\n        for (const line of lines) {\n            if (line.type === 'placeholder' && line.chunkId) {\n                chunksWithPlaceholders.add(line.chunkId);\n            }\n        }\n\n        // Create HTML with nested containers for proper scrolling\n        let html = `<div class=\"${Selectors.DIFF.PANE_CONTENT.name()} hljs\">`; // Add scrolling container\n        html += `<div class=\"${Selectors.DIFF.TABLE_WRAPPER.name()}\">`;\n        html += `<table class=\"${Selectors.CODE.TABLE.name()}\"><tbody>`;\n\n        let lineCounter = 0;\n\n        for (const line of lines) {\n            html += this._renderDiffLine(line, side, ++lineCounter, chunksWithPlaceholders);\n        }\n\n        html += '</tbody></table>';\n        html += '</div>'; // Close table wrapper\n        html += '</div>'; // Close scrolling container\n\n        return html;\n    }\n\n    /**\n     * Render a single diff line\n     * @private\n     */\n    _renderDiffLine(line, side, lineNumber, chunksWithPlaceholders) {\n        let html = '<tr>';\n\n        const chunkId = line.chunkId !== undefined ? line.chunkId : '';\n\n        // Get chunk type if this is a chunk line\n        let chunkType = '';\n        if (chunkId !== '') {\n            const chunk = this.chunkManager.chunks.find(c => c.id === chunkId);\n            chunkType = chunk ? chunk.type : '';\n        }\n\n        // Add line number cell\n        html += `<td class=\"${Selectors.CODE.LINE_NUMBER.name()}\">${lineNumber}</td>`;\n\n        // Check if this chunk has placeholder lines\n        const hasPlaceholder = chunkId !== '' && chunksWithPlaceholders.has(chunkId);\n\n        if (line.type === 'placeholder') {\n            html += this._renderPlaceholderLine(line, chunkId, chunkType, side, lineNumber);\n        } else {\n            html += this._renderContentLine(line, chunkId, chunkType, side, lineNumber, hasPlaceholder);\n        }\n\n        html += '</tr>';\n        return html;\n    }\n\n    /**\n     * Render placeholder line\n     * @private\n     */\n    _renderPlaceholderLine(line, chunkId, chunkType, side, lineNumber) {\n        // Add status class for chunks that can be navigated\n        let additionalClass = '';\n        if (chunkId !== '') {\n            // Add the vdm-diff__chunk class for elements with chunk IDs\n            additionalClass += ` ${Selectors.DIFF.CHUNK.name()}`;\n\n            if (line.conflict || chunkType === 'replace' || chunkType === 'add' || chunkType === 'delete') {\n                additionalClass += ` ${Selectors.STATUS.UNRESOLVED.name()}`;\n            }\n        }\n\n        return `<td class=\"${Selectors.CODE.LINE_CONTENT.name()} ${Selectors.DIFF.LINE_CONTENT_EMPTY.name()} ${Selectors.DIFF.LINE_PLACEHOLDER.name()}${additionalClass}\"\n                   data-chunk-id=\"${chunkId}\"\n                   data-chunk-type=\"${chunkType}\"\n                   data-side=\"${side}\"\n                   data-placeholder-type=\"${line.placeholderType || 'default'}\"\n                   data-line-id=\"${side}-${lineNumber}\"\n                   data-has-placeholder=\"true\">&nbsp;</td>`;\n    }\n\n    /**\n     * Render content line\n     * @private\n     */\n    _renderContentLine(line, chunkId, chunkType, side, lineNumber, hasPlaceholder) {\n        const lineContent = line.line;\n        const isEmpty = !lineContent || lineContent === '\\r' || lineContent === '\\n';\n\n        // Add different classes based on chunk type\n        let additionalClass = '';\n        if (chunkId !== '') {\n            additionalClass = this._getChunkClass(chunkType, side);\n\n            // Add the vdm-diff__chunk class for elements with chunk IDs\n            additionalClass += ` ${Selectors.DIFF.CHUNK.name()}`;\n\n            // Add status class for chunks that can be navigated - include all chunk types that need resolution\n            if (line.conflict || chunkType === 'replace' || chunkType === 'add' || chunkType === 'delete') {\n                additionalClass += ` ${Selectors.STATUS.UNRESOLVED.name()}`;\n            }\n        }\n\n        if (isEmpty) {\n            additionalClass += ` ${Selectors.CODE.LINE_EMPTY.name()}`;\n            return `<td class=\"${Selectors.CODE.LINE_CONTENT.name()}${additionalClass}\"\n                       data-chunk-id=\"${chunkId}\"\n                       data-chunk-type=\"${chunkType}\"\n                       data-side=\"${side}\"\n                       data-line-id=\"${side}-${lineNumber}\"\n                       ${hasPlaceholder ? 'data-has-placeholder=\"true\"' : ''}>&nbsp;</td>`;\n        } else {\n            // Add the line content with proper attributes for chunk handling\n            const displayContent = StringUtils.escapeHtml ?\n                                   StringUtils.escapeHtml(lineContent) :\n                                   lineContent.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n            // Add cursor: pointer to all clickable chunk elements\n            const styleAttr = chunkId !== '' ? ' style=\"cursor: pointer;\"' : '';\n\n            return `<td class=\"${Selectors.CODE.LINE_CONTENT.name()}${additionalClass}\"\n                       data-chunk-id=\"${chunkId}\"\n                       data-chunk-type=\"${chunkType}\"\n                       data-side=\"${side}\"\n                       data-line-id=\"${side}-${lineNumber}\"\n                       ${hasPlaceholder ? 'data-has-placeholder=\"true\"' : ''}${styleAttr}>${displayContent}</td>`;\n        }\n    }\n\n    /**\n     * Get CSS class for a chunk type\n     * @private\n     */\n    _getChunkClass(chunkType, side) {\n        if (chunkType === 'delete' && side === 'left') {\n            return ` ${Selectors.DIFF.LINE_DELETE.name()}`;\n        } else if (chunkType === 'add' && side === 'right') {\n            return ` ${Selectors.DIFF.LINE_ADD.name()}`;\n        } else if (chunkType === 'replace') {\n            let cls = ` ${Selectors.DIFF.LINE_ADD.name()}`;\n            if (side === 'left') {\n                cls += ` ${Selectors.DIFF.LINE_REPLACE_LEFT.name()}`;\n            } else {\n                cls += ` ${Selectors.DIFF.LINE_REPLACE_RIGHT.name()}`;\n            }\n            return cls;\n        }\n        return '';\n    }\n}\n","import { ChunkUtils } from '../../utils/ChunkUtils';\nimport { Debug } from '../../utils/Debug';\n\n/**\n * Generates merged content from selections\n */\nexport class MergeContentGenerator {\n    /**\n     * @param {ChunkManager} chunkManager - Parent chunk manager\n     */\n    constructor(chunkManager) {\n        this.chunkManager = chunkManager;\n    }\n\n        /**\n     * Extract lines for a specific chunk and side\n     * @param {string} chunkId - Chunk identifier\n     * @param {string} side - Side to extract ('old' or 'new')\n     * @returns {Array} Array of lines for the chunk\n     */\n    extractChunkLines(chunkId, side) {\n        const chunk = this.chunkManager.chunks.find(c => c.id === chunkId);\n        if (!chunk) {\n            Debug.log(`MergeContentGenerator: Chunk not found: ${chunkId}`, null, 3);\n            return [];\n        }\n\n        // Get the content array based on side (old or new)\n        const contentArray = side === 'old' ? this.chunkManager.oldContent : this.chunkManager.newContent;\n\n        // Filter lines that belong to this chunk\n        const lines = contentArray.filter(line => line.chunkId === chunkId);\n\n        Debug.log(`MergeContentGenerator: Extracted ${lines.length} lines from chunk ${chunkId} (${side})`, {\n            chunkId,\n            side,\n            linesCount: lines.length,\n            totalContentLines: contentArray.length,\n            sampleLines: lines.slice(0, 3)\n        }, 3);\n\n        return lines;\n    }\n\n    /**\n     * Generate merged content based on selections\n     * @param {Object} selections - Map of chunk IDs to selected sides\n     * @returns {string} Merged content\n     */\n    generateMergedContent(selections) {\n        Debug.log('MergeContentGenerator: Starting merge generation', {\n            totalChunks: this.chunkManager.chunks.length,\n            selections: Object.keys(selections).length\n        }, 2);\n\n        // If no selections, return right side content\n        if (Object.keys(selections).length === 0) {\n            Debug.log('MergeContentGenerator: No selections, returning new content', null, 2);\n            return ChunkUtils.generateFileContent(this.chunkManager.newContent);\n        }\n\n        const mergedLines = [];\n\n        // Create a map of chunk lines by chunk ID for faster lookup\n        const oldChunkLines = {};\n        const newChunkLines = {};\n\n        // Group lines by chunk ID\n        this.chunkManager.oldContent.forEach(line => {\n            if (line.chunkId) {\n                if (!oldChunkLines[line.chunkId]) {\n                    oldChunkLines[line.chunkId] = [];\n                }\n                oldChunkLines[line.chunkId].push(line);\n            }\n        });\n\n        this.chunkManager.newContent.forEach(line => {\n            if (line.chunkId) {\n                if (!newChunkLines[line.chunkId]) {\n                    newChunkLines[line.chunkId] = [];\n                }\n                newChunkLines[line.chunkId].push(line);\n            }\n        });\n\n        // Track which chunks we've processed to avoid duplicates\n        const processedChunks = new Set();\n\n        // Process all lines from newContent in order, but replace chunks as needed\n        for (const line of this.chunkManager.newContent) {\n            if (line.chunkId && selections[line.chunkId]) {\n                // This line belongs to a chunk with a selection\n                if (!processedChunks.has(line.chunkId)) {\n                    // First time we encounter this chunk - add all lines from selected side\n                    const selectedSide = selections[line.chunkId];\n\n                    if (selectedSide === 'left') {\n                        // Add all lines from old content for this chunk\n                        const chunkLines = oldChunkLines[line.chunkId] || [];\n                        chunkLines.forEach(chunkLine => {\n                            if (chunkLine.type === 'content') {\n                                mergedLines.push(chunkLine);\n                            }\n                        });\n                    } else {\n                        // Add all lines from new content for this chunk\n                        const chunkLines = newChunkLines[line.chunkId] || [];\n                        chunkLines.forEach(chunkLine => {\n                            if (chunkLine.type === 'content') {\n                                mergedLines.push(chunkLine);\n                            }\n                        });\n                    }\n                    processedChunks.add(line.chunkId);\n                }\n                // Skip this individual line since we've added the whole chunk\n            } else if (!line.chunkId) {\n                // This is common content (not part of any chunk)\n                if (line.type === 'content') {\n                    mergedLines.push(line);\n                }\n            }\n            // Skip lines that belong to chunks without selections\n        }\n\n        Debug.log('MergeContentGenerator: Processing complete', {\n            totalMergedLines: mergedLines.length,\n            processedChunks: Array.from(processedChunks),\n            sampleLines: mergedLines.slice(0, 3).map(l => l.line?.substring(0, 50) + '...' || 'empty')\n        }, 3);\n\n        const mergedContent = ChunkUtils.generateFileContent(mergedLines);\n\n        Debug.log('MergeContentGenerator: Merge generation complete', {\n            totalLines: mergedLines.length,\n            contentLength: mergedContent.length\n        }, 2);\n\n        return mergedContent;\n    }\n\n    /**\n     * Generate file content from lines\n     * @param {Array} lines - Array of line objects\n     * @returns {string} Generated content\n     */\n    generateFileFromLines(lines) {\n        return ChunkUtils.generateFileContent(lines);\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { TranslationManager } from '../../utils/TranslationManager';\nimport { LoaderManager } from '../../utils/LoaderManager';\nimport AlertManager from '../../utils/AlertManager';\n\n/**\n * Handles merge operation actions\n */\nexport class MergeOperationHandler {\n    /**\n     * @param {MergeHandler} mergeHandler - Parent merge handler\n     */\n    constructor(mergeHandler) {\n        this.mergeHandler = mergeHandler;\n        this.diffViewer = mergeHandler.diffViewer;\n    }\n\n    /**\n     * Proceed with merge operation - this is the main entry point called from MergeHandler\n     * @param {string} mergeType - Type of merge ('new', 'new-suffix', etc.)\n     * @returns {Promise<Object>} Result object with success status\n     */\n    async proceedWithMerge(mergeType) {\n        Debug.log('MergeOperationHandler: Proceeding with merge', { mergeType }, 2);\n\n        // Get runtime properties to check context\n        const runtimeProps = this.diffViewer.getRuntimeProps();\n        const fileRefId = runtimeProps.fileRefId || '';\n        const oldFileRefId = runtimeProps.oldFileRefId || '';\n\n        // If mergeType requires file references but we don't have them,\n        // automatically switch to clipboard mode\n        if ((mergeType === 'new' || mergeType === 'new-suffix') && !fileRefId) {\n            Debug.log('MergeOperationHandler: Switching to clipboard mode (no fileRefId available)', null, 2);\n            mergeType = 'clipboard';\n        } else if ((mergeType === 'old' || mergeType === 'old-suffix') && !oldFileRefId) {\n            Debug.log('MergeOperationHandler: Switching to clipboard mode (no oldFileRefId available)', null, 2);\n            mergeType = 'clipboard';\n        } else if ((mergeType === 'both' || mergeType === 'both-suffix') && (!fileRefId || !oldFileRefId)) {\n            Debug.log('MergeOperationHandler: Switching to clipboard mode (missing file reference IDs)', null, 2);\n            mergeType = 'clipboard';\n        }\n\n        // Get translation manager for loading message\n        const translationManager = TranslationManager.getInstance();\n        const loadingMessage = translationManager.get('loadingContent', 'Processing merge...');\n\n        // Show loading indicator\n        const loaderManager = LoaderManager.getInstance();\n        const loaderId = loaderManager.showLoader(loadingMessage, {\n            fullscreen: true,\n            zIndex: 1000 // Ensure it appears above other UI elements\n        });\n\n        try {\n            // Generate merged content\n            const mergedContent = this.diffViewer.chunkManager.generateMergedContent();\n\n            // Apply the merge - skip server calls for clipboard type (text-compare, url-compare, file-upload)\n            let result;\n            if (mergeType === 'clipboard') {\n                // For clipboard type, we don't need to save on server, just return success\n                result = {\n                    success: true,\n                    message: translationManager.get('mergeSuccessClipboard', 'Merge completed successfully. The merged content is ready.')\n                };\n            } else {\n                // For file-browser mode, apply the merge on server\n                result = await this.applyMerge(mergedContent, mergeType);\n            }\n\n            // Hide loading indicator\n            loaderManager.hideLoader(loaderId);\n\n            // Show result message\n            if (result.success) {\n                // Get the result container and show success message\n                const resultContainer = document.getElementById('vdm-merge__result');\n                if (resultContainer) {\n                    resultContainer.innerHTML = '';\n                    resultContainer.classList.remove('vdm-d-none');\n\n                    // Use AlertManager to show success message\n                    const alertManager = AlertManager.getInstance();\n                    const alertElement = alertManager.showSuccess(result.message, {\n                        timeout: 0, // Don't auto-dismiss\n                        translate: false // Message is already translated\n                    });\n\n                    resultContainer.appendChild(alertElement);\n\n                    // Scroll to the result container\n                    this.scrollToMergeResult();\n                }\n            } else {\n                // Show error message\n                const resultContainer = document.getElementById('vdm-merge__result');\n                if (resultContainer) {\n                    resultContainer.innerHTML = '';\n                    resultContainer.classList.remove('vdm-d-none');\n\n                    // Use AlertManager to show error message\n                    const alertManager = AlertManager.getInstance();\n                    const alertElement = alertManager.showError(result.message || 'An error occurred during the merge operation.', {\n                        timeout: 0, // Don't auto-dismiss\n                        translate: false // Message is already translated\n                    });\n\n                    resultContainer.appendChild(alertElement);\n\n                    // Scroll to the result container\n                    this.scrollToMergeResult();\n                }\n            }\n\n            return result;\n        } catch (error) {\n            // Hide loading indicator in case of error\n            loaderManager.hideLoader(loaderId);\n\n            Debug.error('MergeOperationHandler: Error in merge operation', error, 1);\n\n            // Show error message in UI\n            const resultContainer = document.getElementById('vdm-merge__result');\n            if (resultContainer) {\n                resultContainer.innerHTML = '';\n                resultContainer.classList.remove('vdm-d-none');\n\n                // Use AlertManager to show error message\n                const alertManager = AlertManager.getInstance();\n                const errorMessage = `Error: ${error.message || 'An unexpected error occurred during merge.'}`;\n                const alertElement = alertManager.showError(errorMessage, {\n                    timeout: 0, // Don't auto-dismiss\n                    translate: false // Error message doesn't need translation\n                });\n\n                resultContainer.appendChild(alertElement);\n            }\n\n            return {\n                success: false,\n                message: error.message || 'An unexpected error occurred during merge'\n            };\n        }\n    }\n\n    /**\n     * Apply merged content to file\n     * @param {string} mergedContent - Merged content\n     * @param {string} mergeType - Merge type (new, new-suffix, old, old-suffix, both, both-suffix)\n     * @returns {Promise<Object>} Result object with success status\n     */\n    async applyMerge(mergedContent, mergeType) {\n        // Get the runtime properties - using only fileRefId, not server paths\n        const runtimeProps = this.diffViewer.getRuntimeProps();\n\n        // Get only the file reference IDs - security improvement\n        const fileRefId = runtimeProps.fileRefId || '';\n        const oldFileRefId = runtimeProps.oldFileRefId || '';\n\n        Debug.log('MergeOperationHandler: File references for merge operation', {\n            fileRefId,\n            oldFileRefId,\n            mergeType\n        }, 2);\n\n        // If no file references are available, automatically fall back to clipboard mode\n        if (((mergeType === 'new' || mergeType === 'new-suffix') && !fileRefId) ||\n            ((mergeType === 'old' || mergeType === 'old-suffix') && !oldFileRefId) ||\n            ((mergeType === 'both' || mergeType === 'both-suffix') && (!fileRefId || !oldFileRefId))) {\n\n            Debug.log('MergeOperationHandler: Switching to clipboard mode in applyMerge (missing file references)', null, 2);\n            return {\n                success: true,\n                message: TranslationManager.getInstance().get('mergeSuccessClipboard', 'Merge completed successfully. The merged content is ready.')\n            };\n        }\n\n        // Rest of original validation kept for safety\n        if ((mergeType === 'new' || mergeType === 'new-suffix') && !fileRefId) {\n            Debug.error('MergeOperationHandler: No file reference ID available for new file', null, 1);\n            return {\n                success: false,\n                message: 'No file reference ID available to save changes to new file'\n            };\n        } else if ((mergeType === 'old' || mergeType === 'old-suffix') && !oldFileRefId) {\n            Debug.error('MergeOperationHandler: No file reference ID available for old file', null, 1);\n            return {\n                success: false,\n                message: 'No file reference ID available to save changes to old file'\n            };\n        } else if ((mergeType === 'both' || mergeType === 'both-suffix') && (!fileRefId || !oldFileRefId)) {\n            Debug.error('MergeOperationHandler: Missing file reference IDs for both files', null, 1);\n            return {\n                success: false,\n                message: 'Missing file reference IDs to save changes to both files'\n            };\n        }\n\n        // Get selections and beautification status\n        const selections = JSON.stringify(this.diffViewer.chunkManager.selections);\n        const wasBeautified = this.diffViewer.isContentBeautified() ? 1 : 0;\n\n        try {\n            // SECURITY: Only use fileRefId - never pass server paths\n            const formParams = {\n                action: 'registerMergedContent',\n                content: mergedContent,\n                selections,\n                mergeType,\n                wasBeautified\n            };\n\n            // Add appropriate file reference IDs based on merge type\n            if (mergeType === 'new' || mergeType === 'new-suffix' || mergeType === 'both' || mergeType === 'both-suffix') {\n                formParams.fileRefId = fileRefId;\n            }\n\n            if (mergeType === 'old' || mergeType === 'old-suffix' || mergeType === 'both' || mergeType === 'both-suffix') {\n                formParams.oldFileRefId = oldFileRefId;\n            }\n\n            Debug.log('MergeOperationHandler: Form parameters for save request', formParams, 2);\n\n            // Get API endpoint\n            const endpoint = await this.diffViewer.getEndpoint('ajaxDiffMerge');\n            Debug.log('MergeOperationHandler: Using endpoint', { endpoint }, 2);\n\n            // Send the request\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams(formParams)\n            });\n\n            // Parse response\n            const result = await response.json();\n            Debug.log('MergeOperationHandler: API response', result, 2);\n\n            return result;\n        } catch (error) {\n            Debug.error(\"MergeOperationHandler: Error applying merge:\", error, 1);\n            return {\n                success: false,\n                message: `Error applying merge: ${error.message}`\n            };\n        }\n    }\n\n    /**\n     * Scroll to the merge result container\n     */\n    scrollToMergeResult() {\n        const resultElement = document.getElementById('vdm-merge__result');\n        if (resultElement) {\n            // Scroll the element into view with smooth behavior\n            resultElement.scrollIntoView({\n                behavior: 'smooth',\n                block: 'center'\n            });\n\n            Debug.log('MergeOperationHandler: Scrolled to merge result', null, 2);\n        }\n    }\n}\n","\n/**\n * Manages navigation counter display and state\n */\nexport class NavigationCounter {\n    /**\n     * @param {DiffNavigator} navigator - Parent navigator component\n     */\n    constructor(navigator) {\n        this.navigator = navigator;\n        this.counterElement = null;\n        this.prevButton = null;\n        this.nextButton = null;\n    }\n\n    /**\n     * Set counter element reference\n     * @param {Element} element - Counter element\n     */\n    setCounterElement(element) {\n        this.counterElement = element;\n    }\n\n    /**\n     * Set navigation button references\n     * @param {Element} prevButton - Previous button\n     * @param {Element} nextButton - Next button\n     */\n    setButtons(prevButton, nextButton) {\n        this.prevButton = prevButton;\n        this.nextButton = nextButton;\n    }\n\n    /**\n     * Update counter display\n     * @returns {Array} Active conflicts for navigation\n     */\n    updateCounter() {\n        if (!this.counterElement) return [];\n\n        const chunks = this.navigator.diffViewer.chunkManager.chunks;\n        const selections = this.navigator.diffViewer.chunkManager.selections;\n        let conflictCount = 0;\n        let currentIndex = 0;\n        let activeConflicts = [];\n\n        // Count only unresolved conflicts\n        chunks.forEach((chunk, index) => {\n            if (chunk.conflict && !selections[chunk.id]) {\n                // This is an unresolved conflict - no selection made yet\n                activeConflicts.push(index);\n                conflictCount++;\n            }\n        });\n\n        // Find current position in active conflicts\n        if (this.navigator.currentChunkIndex >= 0) {\n            const position = activeConflicts.findIndex(index => index >= this.navigator.currentChunkIndex);\n            if (position !== -1) {\n                currentIndex = position + 1; // 1-based index for display\n            }\n        }\n\n        // Update counter text with different symbol when complete\n        if (conflictCount === 0) {\n            // All conflicts resolved! Show a checkmark\n            this.counterElement.textContent = '✓';\n            this.counterElement.title = 'All conflicts resolved!';\n        } else {\n            this.counterElement.textContent = `${currentIndex || 1}/${conflictCount}`;\n            this.counterElement.title = `${conflictCount} conflicts remaining`;\n        }\n\n        // Enable/disable buttons based on conflict count\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = conflictCount === 0;\n            this.nextButton.disabled = conflictCount === 0;\n        }\n\n        return activeConflicts;\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { DOMUtils } from '../../utils/DOMUtils';\nimport Selectors from '../../constants/Selectors';\n\n/**\n * Builds navigation UI elements\n */\nexport class NavigationUIBuilder {\n    /**\n     * @param {DiffNavigator} navigator - Parent navigator component\n     */\n    constructor(navigator) {\n        this.navigator = navigator;\n    }\n\n    /**\n     * Create navigation UI elements\n     * @returns {Object|null} Object with counter, prev button, and next button elements\n     */\n    createNavigationUI() {\n        Debug.log('NavigationUIBuilder: Creating navigation UI', null, 2);\n\n        // Find container element - first look for an existing one\n        let container = document.querySelector(Selectors.NAVIGATION.CONTAINER);\n\n        // If no container found, create one\n        if (!container) {\n            Debug.log('NavigationUIBuilder: No navigation container found, creating one', null, 2);\n\n            // Get the diff pane contents as parent reference\n            const panes = document.querySelectorAll(Selectors.DIFF.PANE);\n            if (!panes || panes.length === 0) {\n                Debug.warn('NavigationUIBuilder: No diff panes found to append navigation container');\n                return null;\n            }\n\n            // Create container\n            container = document.createElement('div');\n            container.className = Selectors.NAVIGATION.CONTAINER.name();\n\n            // Build controls inside the container\n            this._createControls(container);\n\n            // Append after the first pane\n            if (panes[0].parentNode) {\n                panes[0].parentNode.insertBefore(container, panes[0]);\n            }\n        } else {\n            // Use existing container, but update its contents\n            Debug.log('NavigationUIBuilder: Using existing navigation container', null, 2);\n            container.innerHTML = '';\n            this._createControls(container);\n        }\n\n        // Return references to the elements\n        return {\n            counter: document.getElementById(Selectors.NAVIGATION.COUNTER.name()),\n            prevButton: document.getElementById(Selectors.NAVIGATION.PREV_BUTTON.name()),\n            nextButton: document.getElementById(Selectors.NAVIGATION.NEXT_BUTTON.name())\n        };\n    }\n\n    /**\n     * Create navigation controls\n     * @private\n     * @param {Element} container - Container element\n     */\n    _createControls (container) {\n        // Create nav chunk element\n        const navChunk = document.createElement('div');\n        navChunk.className = Selectors.NAVIGATION.NAV_CHUNK.name();\n\n        // Create counter element\n        const counter = document.createElement('span');\n        counter.id = Selectors.NAVIGATION.COUNTER.name();\n        counter.className = Selectors.NAVIGATION.COUNTER_ELEMENT.name();\n\n        // Create previous button\n        const prevButton = document.createElement('button');\n        prevButton.id = Selectors.NAVIGATION.PREV_BUTTON.name();\n        prevButton.classList.add(\n            Selectors.UTILITY.BUTTON.name(),\n            Selectors.UTILITY.BUTTON_FLAT.name(),\n            Selectors.UTILITY.BUTTON_SMALL.name()\n        );\n        prevButton.innerHTML = DOMUtils.getIconHtml('chevron-up');\n        prevButton.title = 'Previous change';\n        prevButton.addEventListener('click', () => this.navigator.navigateToPrevConflict());\n\n        // Create next button\n        const nextButton = document.createElement('button');\n        nextButton.id = Selectors.NAVIGATION.NEXT_BUTTON.name();\n        nextButton.classList.add(\n            Selectors.UTILITY.BUTTON.name(),\n            Selectors.UTILITY.BUTTON_FLAT.name(),\n            Selectors.UTILITY.BUTTON_SMALL.name()\n        );\n        nextButton.innerHTML = DOMUtils.getIconHtml('chevron-down');\n        nextButton.title = 'Next change';\n        nextButton.addEventListener('click', () => this.navigator.navigateToNextConflict());\n\n        // Add elements to navChunk\n        navChunk.appendChild(prevButton);\n        navChunk.appendChild(counter);\n        navChunk.appendChild(nextButton);\n\n        // Add navChunk to container\n        container.appendChild(navChunk);\n\n        Debug.log('NavigationUIBuilder: Navigation controls created', null, 2);\n    }\n\n    /**\n     * Clean up event handlers\n     */\n    destroy() {\n        // Find navigation buttons\n        const prevButton = document.getElementById(Selectors.NAVIGATION.PREV_BUTTON.name());\n        const nextButton = document.getElementById(Selectors.NAVIGATION.NEXT_BUTTON.name());\n\n        // Remove event listeners by cloning\n        if (prevButton) {\n            const newPrevButton = prevButton.cloneNode(true);\n            prevButton.parentNode.replaceChild(newPrevButton, prevButton);\n        }\n\n        if (nextButton) {\n            const newNextButton = nextButton.cloneNode(true);\n            nextButton.parentNode.replaceChild(newNextButton, nextButton);\n        }\n\n        Debug.log('NavigationUIBuilder: Event handlers removed', null, 2);\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { BaseSingleton } from '../../utils/BaseSingleton';\nimport Selectors from '../../constants/Selectors';\nimport { DOMUtils } from '../../utils/DOMUtils';\nimport { TranslationManager } from '../../utils/TranslationManager';\n\n// Module-level singleton instance\nlet instance = null;\n\n/**\n * Lightweight standalone modal manager without external dependencies\n */\nexport class ModalManager extends BaseSingleton {\n    /**\n     * Get the singleton instance\n     * @param {Object} options - Configuration options (only used during first initialization)\n     * @returns {ModalManager} The singleton instance\n     */\n    static getInstance(options = {}) {\n        if (!instance) {\n            instance = new ModalManager(options);\n        }\n        return instance;\n    }\n\n    /**\n     * Constructor - protected from direct instantiation\n     * @param {Object} options - Configuration options\n     */\n    constructor(options = {}) {\n        super();\n\n        // Skip initialization if instance already exists\n        if (!this._isFirstInstance(instance)) {\n            return;\n        }\n\n        this.options = {\n            debug: false,\n            translations: {},\n            ...options\n        };\n\n        this.modals = {};\n        this.activeModal = null;\n        this.initialized = false;\n\n        Debug.log('ModalManager: Initialized', null, 2);\n    }\n\n    /**\n     * Initialize modals by creating the necessary HTML\n     * @returns {boolean} Success status\n     */\n    initModals() {\n        try {\n            if (this.initialized) {\n                Debug.log('ModalManager: Already initialized', null, 2);\n                return true;\n            }\n\n            const translationManager = TranslationManager.getInstance();\n\n            // Create confirm modal\n            this.createModal({\n                id: Selectors.MODAL.CONFIRM.name(),\n                title: translationManager.get('confirmation'),\n                contentId: Selectors.MODAL.MESSAGE.name(),\n                contentClass: Selectors.UTILITY.PADDING_3.name(),\n                footerButtons: [\n                    {\n                        id: Selectors.MODAL.CONTINUE_BTN.name(),\n                        text: translationManager.get('continueResolving'),\n                        class: Selectors.UTILITY.BUTTON.name() + ' ' + Selectors.UTILITY.BUTTON_PRIMARY.name() + ' ' + Selectors.UTILITY.MARGIN_END_2.name()\n                    },\n                    {\n                        id: Selectors.MODAL.MERGE_BTN.name(),\n                        text: translationManager.get('mergeAnyway'),\n                        class: Selectors.UTILITY.BUTTON.name() + ' ' + Selectors.UTILITY.BUTTON_WARNING.name()\n                    }\n                ]\n            });\n\n            // Create preview modal\n            this.createModal({\n                id: Selectors.MODAL.PREVIEW.name(),\n                title: '<span id=\"' + Selectors.MODAL.PREVIEW_FILENAME.name() + '\"></span>',\n                contentId: Selectors.MODAL.PREVIEW_CONTENT_ID.name(),\n                contentClass: Selectors.MODAL.PREVIEW_CONTENT.name(),\n                headerClass: Selectors.MODAL.HEADER_FIXED.name(),\n                modalClass: 'vdm-modal--fixed-footer',\n                fullscreen: true\n            });\n\n            // Create conflict modal\n            this.createModal({\n                id: Selectors.MERGE.CONFLICT_MODAL.name(),\n                title: translationManager.get('unresolvedConflicts'),\n                contentId: Selectors.MODAL.MESSAGE.name(),\n                contentClass: Selectors.UTILITY.PADDING_3.name(),\n                footerButtons: [\n                    {\n                        id: Selectors.MODAL.CONTINUE_BTN.name(),\n                        text: translationManager.get('continueResolving'),\n                        class: Selectors.UTILITY.BUTTON.name() + ' ' + Selectors.UTILITY.BUTTON_PRIMARY.name() + ' ' + Selectors.UTILITY.MARGIN_END_2.name()\n                    },\n                    {\n                        id: Selectors.MODAL.MERGE_BTN.name(),\n                        text: translationManager.get('mergeAnyway'),\n                        class: Selectors.UTILITY.BUTTON.name() + ' ' + Selectors.UTILITY.BUTTON_WARNING.name()\n                    }\n                ]\n            });\n\n            // Add event listeners for close buttons, backdrop clicks, etc.\n            this._setupEventListeners();\n\n            this.initialized = true;\n            Debug.log('ModalManager: Modals initialized', null, 2);\n            return true;\n        } catch (error) {\n            Debug.error('ModalManager: Error initializing modals', error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Create a modal with the specified configuration\n     * @param {Object} config - Modal configuration\n     * @param {string} config.id - Modal ID (without # prefix)\n     * @param {string} config.title - Modal title (can include HTML)\n     * @param {string} [config.contentId] - ID for the content container (without # prefix)\n     * @param {string} [config.contentClass] - CSS class for the content container\n     * @param {string} [config.modalClass] - Additional CSS class for the modal\n     * @param {string} [config.headerClass] - CSS class for the header (overrides default)\n     * @param {Array} [config.footerButtons] - Array of button configurations\n     * @param {boolean} [config.fullscreen] - Whether to make the modal fullscreen\n     * @param {Object} [config.events] - Custom event handlers for modal elements\n     * @param {Object} [config.attr] - Additional attributes to add to the modal element\n     * @returns {boolean} Success status\n     */\n    createModal(config) {\n        try {\n            const modalId = config.id;\n\n            // Check if modal already exists in DOM\n            if (document.getElementById(modalId)) {\n                Debug.log(`ModalManager: Modal ${modalId} already exists in DOM`, null, 2);\n                return true;\n            }\n\n            // Use header class from config or default to MODAL.HEADER with prefix removed\n            const headerClass = config.headerClass || Selectors.MODAL.HEADER.name();\n\n            // Start building modal HTML\n            let modalHtml = `\n                <div id=\"${modalId}\" class=\"${Selectors.MODAL.CONTAINER.name()/*remove dot prefix*/}${config.modalClass ? ' ' + config.modalClass : ''}\" style=\"display: none;\"`;\n\n            // Add additional attributes if provided\n            if (config.attr) {\n                Object.entries(config.attr).forEach(([key, value]) => {\n                    modalHtml += ` ${key}=\"${value}\"`;\n                });\n            }\n\n            modalHtml += `>\n                    <div class=\"${Selectors.MODAL.CONTENT.name()}\">\n                        <div class=\"${headerClass}\">\n                            <h5 class=\"${Selectors.MODAL.TITLE.name()}\">${config.title}</h5>\n                            <button class=\"${Selectors.MODAL.CLOSE.name()}\">&times;</button>\n                        </div>`;\n\n            // Add content container\n            if (config.contentId) {\n                modalHtml += `<div id=\"${config.contentId}\" class=\"${config.contentClass || ''}\"></div>`;\n            } else {\n                modalHtml += `<div class=\"${config.contentClass || ''}\"></div>`;\n            }\n\n            // Add footer with buttons if specified\n            if (config.footerButtons && config.footerButtons.length > 0) {\n                modalHtml += `<div class=\"${Selectors.MODAL.FOOTER.name()} ${Selectors.UTILITY.FLEX.name()} ${Selectors.UTILITY.JUSTIFY_CONTENT_BETWEEN.name()} ${Selectors.UTILITY.PADDING_3.name()}\">`;\n                config.footerButtons.forEach(button => {\n                    // Check if this is a close button - only buttons with the exact MODAL.CLOSE.name() class should be considered close buttons\n                    const isCloseButton = button?.class.split(' ').includes(Selectors.MODAL.CLOSE.name());\n\n                    // Determine the button type based on class\n                    let iconName = 'chevron-right'; // Default icon\n\n                    if (button.class) {\n                        const classNames = button.class.split(' ');\n\n                        // Determine button type from classes\n                        if (classNames.some(cls => cls.includes('primary'))) {\n                            iconName = 'check-circle';\n                        } else if (classNames.some(cls => cls.includes('success'))) {\n                            iconName = 'check-circle';\n                        } else if (classNames.some(cls => cls.includes('danger'))) {\n                            iconName = 'exclamation-triangle';\n                        } else if (classNames.some(cls => cls.includes('warning'))) {\n                            iconName = 'exclamation-circle';\n                        } else if (classNames.some(cls => cls.includes('info'))) {\n                            iconName = 'info-circle';\n                        }\n                    }\n\n                    // Special case for specific button IDs\n                    if (button.id) {\n                        if (button.id.toLowerCase().includes('copy')) {\n                            iconName = 'copy';\n                        } else if (button.id === Selectors.MODAL.CONTINUE_BTN.name()) {\n                            iconName = 'chevron-right';\n                        } else if (button.id === Selectors.MODAL.MERGE_BTN.name()) {\n                            iconName = 'exclamation-circle';\n                        }\n                    }\n\n                    // Generate icon HTML if this is not a close button\n                    let iconHtml = '';\n                    if (!isCloseButton) {\n                        iconHtml = DOMUtils.getIconHtml(iconName, { classes: Selectors.UTILITY.MARGIN_END_2.name() });\n                    }\n\n                    modalHtml += `<button id=\"${button.id}\" class=\"${button.class || Selectors.UTILITY.BUTTON.name() + ' ' + Selectors.UTILITY.BUTTON_SECONDARY.name()}\"`;\n\n                    // Add data attributes if provided\n                    if (button.data) {\n                        Object.entries(button.data).forEach(([key, value]) => {\n                            modalHtml += ` data-${key}=\"${value}\"`;\n                        });\n                    }\n\n                    // Add the icon before text but only for non-close buttons\n                    if (isCloseButton && !button.text) {\n                        // For close buttons without text, don't add any content (X will be created by CSS)\n                        modalHtml += `></button>`;\n                    } else {\n                        // For other buttons or close buttons with text, add icon + text span\n                        modalHtml += `>${iconHtml}<span>${button.text || ''}</span></button>`;\n                    }\n                });\n                modalHtml += `</div>`;\n            }\n\n            // Close the modal structure\n            modalHtml += `\n                    </div>\n                </div>\n            `;\n\n            this._appendToBody(modalId, modalHtml);\n            this.modals[modalId] = {\n                element: document.getElementById(modalId),\n                isOpen: false,\n                config: config\n            };\n\n            // Apply fullscreen if needed\n            if (config.fullscreen) {\n                const modalElement = document.getElementById(modalId);\n                if (modalElement) {\n                    this.setFullscreenSize(modalElement);\n                }\n            }\n\n            // Attach custom event handlers if provided\n            if (config.events) {\n                const modalElement = document.getElementById(modalId);\n\n                Object.entries(config.events).forEach(([selector, events]) => {\n                    let elements;\n\n                    // Handle special selectors\n                    if (selector === 'modal') {\n                        elements = [modalElement];\n                    } else if (selector === 'close') {\n                        elements = Array.from(modalElement.querySelectorAll(Selectors.MODAL.CLOSE));\n                    } else {\n                        // For regular selectors, query within the modal\n                        elements = Array.from(modalElement.querySelectorAll(selector));\n                    }\n\n                    // Attach events to each matching element\n                    elements.forEach(element => {\n                        if (element) {\n                            Object.entries(events).forEach(([eventName, handler]) => {\n                                element.addEventListener(eventName, handler);\n                                Debug.log(`ModalManager: Attached ${eventName} event to ${selector} in modal ${modalId}`, null, 3);\n                            });\n                        }\n                    });\n                });\n            }\n\n            Debug.log(`ModalManager: Created modal - ${modalId}`, null, 3);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error creating modal - ${config.id}`, error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Determine the appropriate icon for a button based on context\n     * @private\n     * @param {Object} button - The button configuration object\n     * @returns {string} The name of the icon to use\n     */\n    _getIconNameForButton(button) {\n        // First, check the IconRegistry to ensure we use icons that actually exist\n\n        // Icons based on button text (case insensitive)\n        const buttonText = button.text.toLowerCase();\n\n        if (buttonText.includes('continue')) return 'chevron-right';\n        if (buttonText.includes('merge')) return 'check'; // Changed from code-merge to check\n        if (buttonText.includes('close') || buttonText.includes('cancel')) return 'exclamation-circle'; // Changed from times-circle\n        if (buttonText.includes('confirm') || buttonText.includes('ok')) return 'check-circle';\n        if (buttonText.includes('copy')) return 'copy';\n        if (buttonText.includes('download')) return 'file'; // Changed from download\n        if (buttonText.includes('upload')) return 'file-circle-plus'; // Changed from upload\n        if (buttonText.includes('save')) return 'check-circle'; // Changed from save\n        if (buttonText.includes('delete')) return 'exclamation-triangle'; // Changed from trash\n        if (buttonText.includes('edit')) return 'eye'; // Changed from edit\n\n        // Icons based on button class\n        if (button.class) {\n            const buttonClass = button.class.toLowerCase();\n\n            if (buttonClass.includes('primary')) return 'check';\n            if (buttonClass.includes('secondary')) return 'chevron-right';\n            if (buttonClass.includes('success')) return 'check-circle';\n            if (buttonClass.includes('danger')) return 'exclamation-triangle';\n            if (buttonClass.includes('warning')) return 'exclamation-circle';\n            if (buttonClass.includes('info')) return 'info-circle';\n        }\n\n        // Default icon if no matching pattern found\n        return 'chevron-right';\n    }\n\n    /**\n     * Append HTML to body\n     * @private\n     * @param {string} modalId - Modal ID\n     * @param {string} html - HTML to append\n     */\n    _appendToBody(modalId, html) {\n        // Create wrapper div for modals if it doesn't exist\n        let modal = document.getElementById(modalId);\n        if (!modal) {\n            // Convert HTML string to DOM element before appending\n            const tempContainer = document.createElement('div');\n            tempContainer.innerHTML = html;\n            document.body.appendChild(tempContainer.firstElementChild);\n        }\n\n        // Create or update the backdrop element\n        let backdrop = document.getElementById(Selectors.MODAL.BACKDROP.name());\n        if (!backdrop) {\n            backdrop = document.createElement('div');\n            backdrop.id = Selectors.MODAL.BACKDROP.name();\n            backdrop.style.display = 'none';\n            document.body.appendChild(backdrop);\n        }\n    }\n\n    /**\n     * Set up event listeners for modals\n     * @private\n     */\n    _setupEventListeners() {\n        // Use document-level event delegation for close buttons\n        document.addEventListener('click', (event) => {\n            // Check if the clicked element is a close button or has the close class\n            if (event.target.matches(Selectors.MODAL.CLOSE)) {\n                const modal = event.target.closest(Selectors.MODAL.CONTAINER);\n                if (modal?.id) {\n                    this.close(modal.id);\n                }\n            }\n        });\n\n        // Backdrop click to close\n        const backdrop = document.getElementById(Selectors.MODAL.BACKDROP.name());\n        if (backdrop) {\n            backdrop.addEventListener('click', () => {\n                if (this.activeModal) {\n                    this.close(this.activeModal);\n                }\n            });\n        }\n\n        // ESC key to close\n        document.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape' && this.activeModal) {\n                this.close(this.activeModal);\n            }\n        });\n    }\n\n    /**\n     * Register a modal instance\n     * @param {string} modalId - ID of the modal element\n     * @param {Object} options - Modal configuration options\n     * @returns {boolean} Success status\n     */\n    register(modalId, options = {}) {\n        try {\n            const element = document.getElementById(modalId);\n            if (!element) {\n                Debug.warn(`ModalManager: Element not found for modal ID ${modalId}`, null, 2);\n                return false;\n            }\n\n            this.modals[modalId] = {\n                element: element,\n                isOpen: false,\n                options: options\n            };\n\n            Debug.log(`ModalManager: Registered modal - ${modalId}`, null, 3);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error registering modal - ${modalId}`, error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Register a callback to be executed before opening a modal\n     * @param {string} modalId - ID of the modal\n     * @param {Function} callback - Function to execute before opening\n     * @returns {boolean} Success status\n     */\n    registerBeforeOpenCallback(modalId, callback) {\n        try {\n            if (!this.modals[modalId]) {\n                this.modals[modalId] = {\n                    element: document.getElementById(modalId),\n                    isOpen: false,\n                    config: {}\n                };\n            }\n\n            if (!this.modals[modalId].beforeOpenCallbacks) {\n                this.modals[modalId].beforeOpenCallbacks = [];\n            }\n\n            this.modals[modalId].beforeOpenCallbacks.push(callback);\n            Debug.log(`ModalManager: Registered before-open callback for modal ${modalId}`, null, 2);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error registering before-open callback for modal ${modalId}`, error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Open a modal by ID\n     * @param {string} modalId - ID of the modal to open\n     * @returns {boolean} Success status\n     */\n    open(modalId) {\n        try {\n            const modal = this.modals[modalId];\n            if (!modal) {\n                Debug.warn(`ModalManager: Cannot open modal ${modalId} - not registered`, null, 2);\n\n                // Forcefully try to find the modal element even if not registered\n                const element = document.getElementById(modalId);\n                if (element) {\n                    Debug.log(`ModalManager: Found unregistered modal element ${modalId}, registering now`, null, 2);\n                    this.register(modalId, { element });\n                    this._showModal(modalId);\n                    return true;\n                }\n\n                return false;\n            }\n\n            // Execute any registered before-open callbacks\n            if (modal.beforeOpenCallbacks && modal.beforeOpenCallbacks.length > 0) {\n                Debug.log(`ModalManager: Executing ${modal.beforeOpenCallbacks.length} before-open callbacks for modal ${modalId}`, null, 2);\n                modal.beforeOpenCallbacks.forEach(callback => {\n                    try {\n                        callback();\n                    } catch (err) {\n                        Debug.error(`ModalManager: Error in before-open callback for modal ${modalId}`, err, 1);\n                    }\n                });\n            }\n\n            this._showModal(modalId);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error opening modal ${modalId}:`, error, 2);\n            return false;\n        }\n    }\n\n    /**\n     * Show a modal\n     * @private\n     * @param {string} modalId - Modal ID to show\n     */\n    _showModal(modalId) {\n        const modal = this.modals[modalId];\n        if (!modal) {\n            Debug.warn(`ModalManager: Modal ${modalId} not found`, null, 2);\n            return;\n        }\n\n        // Set as active modal - important for proper backdrop handling\n        this.activeModal = modalId;\n\n        // Show backdrop\n        const backdrop = document.getElementById(Selectors.MODAL.BACKDROP.name());\n        if (backdrop) {\n            backdrop.style.display = 'block';\n            setTimeout(() => {\n                backdrop.style.opacity = '1';\n            }, 10);\n        }\n\n        // IMPORTANT: Force modal display style using direct manipulation\n        // Show modal with animation - set display IMMEDIATELY\n        modal.element.style.display = 'block';\n        modal.element.style.opacity = '0';\n\n        // Debug logs to help diagnose modal display issues\n        Debug.log(`ModalManager: Setting modal ${modalId} display to block`, {\n            modalElement: modal.element.id,\n            displayBefore: modal.element.style.display\n        }, 2);\n\n        // Apply animation\n        setTimeout(() => {\n            modal.element.style.opacity = '1';\n            Debug.log(`ModalManager: Fading in modal ${modalId}`, null, 3);\n        }, 10);\n\n        modal.isOpen = true;\n\n        // Handle fullscreen if needed\n        if (modalId === Selectors.MODAL.PREVIEW.name()) {\n            this.setFullscreenSize(modal.element);\n        }\n\n        // Prevent body scrolling\n        document.body.style.overflow = 'hidden';\n    }\n\n    /**\n     * Hide a modal\n     * @private\n     * @param {string} modalId - Modal ID to hide\n     */\n    _hideModal(modalId) {\n        const modal = this.modals[modalId];\n        if (!modal) return;\n\n        // Fade out\n        modal.element.style.opacity = '0';\n\n        // After animation completes\n        setTimeout(() => {\n            modal.element.style.display = 'none';\n            modal.isOpen = false;\n\n            // Hide backdrop if this is the currently active modal\n            if (this.activeModal === modalId) {\n                const backdrop = document.getElementById(Selectors.MODAL.BACKDROP.name());\n                if (backdrop) {\n                    backdrop.style.opacity = '0';\n\n                    // Hide backdrop after fade-out animation\n                    setTimeout(() => {\n                        backdrop.style.display = 'none';\n                    }, 150);\n                }\n\n                // Reset body scrolling\n                document.body.style.overflow = '';\n                this.activeModal = null;\n            }\n        }, 250); // Match transition duration\n    }\n\n    /**\n     * Close a modal by ID\n     * @param {string} modalId - ID of the modal to close\n     * @returns {boolean} Success status\n     */\n    close(modalId) {\n        try {\n            if (!this.modals[modalId]) {\n                Debug.warn(`ModalManager: Modal not found - ${modalId}`, null, 2);\n                return false;\n            }\n\n            this._hideModal(modalId);\n\n            Debug.log(`ModalManager: Closed modal - ${modalId}`, null, 3);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error closing modal - ${modalId}`, error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Set content for a modal\n     * @param {string} modalId - ID of the modal\n     * @param {string|Element} content - HTML content or DOM element\n     * @param {string} contentSelector - Selector for content container\n     * @returns {boolean} Success status\n     */\n    setContent(modalId, content, contentSelector = null) {\n        try {\n            Debug.log(`ModalManager: Setting content for modal ${modalId}`, {\n                contentType: typeof content,\n                contentLength: typeof content === 'string' ? content.length : 'Element',\n                contentPreview: typeof content === 'string' ? content.substring(0, 150) + '...' : 'Element object',\n                targetSelector: contentSelector\n            }, 2);\n\n            const modal = this.modals[modalId];\n            if (!modal) {\n                Debug.error(`ModalManager: Modal not found - ${modalId}`, null, 1);\n                return false;\n            }\n\n            // Find the content container\n            let container;\n            if (contentSelector) {\n                Debug.log(`ModalManager: Looking for content container with selector: ${contentSelector}`, null, 2);\n                // Check if contentSelector is an ID without # prefix\n                if (!contentSelector.startsWith('#') && !contentSelector.startsWith('.')) {\n                    container = document.getElementById(contentSelector);\n                    Debug.log(`ModalManager: Tried getElementById with: ${contentSelector}, found: ${!!container}`, null, 2);\n                }\n\n                // If not found or not an ID, try as a selector\n                if (!container) {\n                    container = document.querySelector(contentSelector);\n                    Debug.log(`ModalManager: Tried querySelector with: ${contentSelector}, found: ${!!container}`, null, 2);\n                }\n\n                // Log container details\n                Debug.log(`ModalManager: Container lookup result:`, {\n                    found: !!container,\n                    id: container?.id || 'none',\n                    classList: container ? Array.from(container.classList) : []\n                }, 2);\n            } else {\n                container = modal.element.querySelector(Selectors.MODAL.CONTENT);\n                Debug.log(`ModalManager: Using default content container:`, {\n                    found: !!container,\n                    selector: Selectors.MODAL.CONTENT\n                }, 2);\n\n                if (!container) {\n                    Debug.error(`ModalManager: Content container not found - ${modalId}`, null, 1);\n                    return false;\n                }\n            }\n\n            if (!container) {\n                Debug.error(`ModalManager: Could not find content container with selector: ${contentSelector}`, null, 1);\n                return false;\n            }\n\n            // Set the content\n            if (typeof content === 'string') {\n                Debug.log(`ModalManager: Setting HTML content for modal ${modalId}`, {\n                    contentLength: content.length,\n                    containsPre: content.includes('<pre'),\n                    container: container.id || container.className\n                }, 2);\n\n                container.innerHTML = content;\n\n                // Verify the content was set correctly\n                const hasPreElements = container.querySelectorAll('pre').length > 0;\n                Debug.log(`ModalManager: Content set verification:`, {\n                    hasPreElements,\n                    innerHTML: container.innerHTML.substring(0, 100) + '...'\n                }, 2);\n\n                if (content.includes('<pre') && !hasPreElements) {\n                    Debug.warn(`ModalManager: Content included <pre> tags but none found after setting innerHTML`, {\n                        innerHtmlLength: container.innerHTML.length\n                    }, 1);\n                }\n            } else if (content instanceof Element) {\n                Debug.log(`ModalManager: Setting Element content for modal ${modalId}`, {\n                    elementType: content.tagName,\n                    elementId: content.id || 'none'\n                }, 2);\n                container.innerHTML = '';\n                container.appendChild(content);\n            } else {\n                Debug.error(`ModalManager: Invalid content type - ${typeof content}`, null, 1);\n                return false;\n            }\n\n            Debug.log(`ModalManager: Content set for modal - ${modalId}`, null, 3);\n            return true;\n        } catch (error) {\n            Debug.error(`ModalManager: Error setting content - ${modalId}`, error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Set fullscreen size for modal\n     * @param {Element} modalElement - Modal DOM element\n     * @returns {boolean} Success status\n     */\n    setFullscreenSize(modalElement) {\n        try {\n            if (!modalElement) {\n                Debug.warn('ModalManager: Modal element not provided for fullscreen', null, 2);\n                return false;\n            }\n\n            // Add fullscreen class\n            modalElement.classList.add(Selectors.MODAL.FULLSCREEN.name());\n\n            // Calculate and set the height\n            const headerHeight = modalElement.querySelector(Selectors.MODAL.HEADER) ?\n                modalElement.querySelector(Selectors.MODAL.HEADER).offsetHeight : 0;\n\n            const content = modalElement.querySelector(Selectors.MODAL.CONTENT);\n            if (content) {\n                content.style.height = `calc(100% - ${headerHeight}px)`;\n            }\n\n            Debug.log('ModalManager: Modal set to fullscreen size', null, 3);\n            return true;\n        } catch (error) {\n            Debug.error('ModalManager: Error setting fullscreen size', error, 1);\n            return false;\n        }\n    }\n\n    /**\n     * Creates a code copy modal for displaying and copying code snippets\n     * @param {string} codeText - The code text to display in the modal\n     * @returns {string} Modal ID\n     */\n    createCopyModal(codeText) {\n        const modalId = Selectors.MODAL.CODE_COPY.name();\n        // Get translations\n        const translationManager = TranslationManager.getInstance();\n\n        // Create modal if it doesn't exist yet\n        if (!this.modals[modalId]) {\n            this.createModal({\n                id: modalId,\n                title: translationManager.get('copyCode'),\n                contentId: Selectors.MODAL.COPY_CONTENT.name(),\n                modalClass: Selectors.MODAL.FIXED_FOOTER.name(),\n                headerClass: Selectors.MODAL.HEADER_FIXED.name(),\n                footerButtons: [\n                    {\n                        class: `${Selectors.MODAL.CLOSE.name()} ${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_SECONDARY.name()}`\n                    }\n                ]\n            });\n        }\n\n        // Create content with textarea and copy button\n        const safeText = this._escapeHtml(codeText);\n        const content = `\n            <div class=\"${Selectors.COPY.MODAL.DIALOG.name()}\">\n                <p class=\"${Selectors.COPY.MODAL.INSTRUCTIONS.name()}\">${translationManager.get('copyInstructions')}</p>\n                <div class=\"${Selectors.COPY.MODAL.TEXTAREA.name()}\">\n                    <textarea id=\"${Selectors.COPY.MODAL.TEXTAREA_ELEM.name()}\" class=\"${Selectors.COPY.MODAL.TEXTAREA_ELEM.name()}\">${safeText}</textarea>\n                </div>\n                <div class=\"${Selectors.COPY.MODAL.ACTIONS.name()}\">\n                    <button id=\"${Selectors.COPY.MODAL.BUTTON.name()}\" class=\"${Selectors.COPY.MODAL.BUTTON.name()} ${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_PRIMARY.name()}\">\n                        ${DOMUtils.getIconHtml('copy', { classes: Selectors.UTILITY.MARGIN_END_2.name() })}\n                        <span>${translationManager.get('copyToClipboard')}</span>\n                    </button>\n                </div>\n            </div>\n        `;\n\n        // Set content\n        this.setContent(modalId, content, Selectors.MODAL.COPY_CONTENT.name());\n\n        // Set up event handlers after a short delay to ensure DOM is ready\n        setTimeout(() => {\n            const textarea = document.getElementById(Selectors.COPY.MODAL.TEXTAREA_ELEM.name());\n            const copyBtn = document.getElementById(Selectors.COPY.MODAL.BUTTON.name());\n\n            if (textarea) {\n                // Select all text when focused\n                textarea.addEventListener('focus', function() {\n                    this.select();\n                });\n\n                // Initial focus and select\n                textarea.select();\n            }\n\n            if (copyBtn && textarea) {\n                copyBtn.addEventListener('click', function() {\n                    // Focus and select the textarea\n                    textarea.select();\n\n                    try {\n                        // Try to copy using clipboard API or fallback to execCommand\n                        let success = false;\n\n                        if (navigator.clipboard?.writeText) {\n                            navigator.clipboard.writeText(textarea.value)\n                                .then(() => {\n                                    this._showCopySuccess(copyBtn);\n                                    Debug.log('ModalManager: Successfully copied using Clipboard API', null, 3);\n                                })\n                                .catch(_err => {\n                                    // Fallback to execCommand\n                                    // @SuppressWarnings(javascript:S1874) - Keeping for browser compatibility\n                                    success = document.execCommand('copy');\n                                    if (success) {\n                                        this._showCopySuccess(copyBtn);\n                                        Debug.log('ModalManager: Successfully copied using execCommand fallback', null, 3);\n                                    } else {\n                                        this._showCopyFailure(copyBtn);\n                                        Debug.warn('ModalManager: Copy failed with execCommand fallback', null, 2);\n                                    }\n                                });\n                        } else {\n                            // Try execCommand directly\n                            // @SuppressWarnings(javascript:S1874) - Keeping for browser compatibility\n                            success = document.execCommand('copy');\n                            if (success) {\n                                this._showCopySuccess(copyBtn);\n                                Debug.log('ModalManager: Successfully copied using execCommand', null, 3);\n                            } else {\n                                this._showCopyFailure(copyBtn);\n                                Debug.warn('ModalManager: Copy failed with execCommand', null, 2);\n                            }\n                        }\n                    } catch (err) {\n                        this._showCopyFailure(copyBtn);\n                        Debug.error('ModalManager: Error during copy operation', err, 2);\n                    }\n                }.bind(this)); // Bind to modal manager for access to helper methods\n            }\n        }, 300);\n\n        return modalId;\n    }\n\n    /**\n     * Show success state on copy button\n     * @param {HTMLElement} button - Button element\n     * @private\n     */\n    _showCopySuccess(button) {\n        const translationManager = TranslationManager.getInstance();\n        button.innerHTML = DOMUtils.getIconHtml('check-circle', { classes: 'vdm-icon--success ' + Selectors.UTILITY.MARGIN_END_2.name() }) +\n            `<span>${translationManager.get('copied')}</span>`;\n        button.classList.remove(Selectors.UTILITY.BUTTON_PRIMARY.name());\n        button.classList.add(Selectors.UTILITY.BUTTON_SUCCESS.name());\n\n        setTimeout(() => {\n            button.innerHTML = DOMUtils.getIconHtml('copy', { classes: Selectors.UTILITY.MARGIN_END_2.name() }) +\n                `<span>${translationManager.get('copyToClipboard')}</span>`;\n            button.classList.remove(Selectors.UTILITY.BUTTON_SUCCESS.name());\n            button.classList.add(Selectors.UTILITY.BUTTON_PRIMARY.name());\n        }, 2000);\n    }\n\n    /**\n     * Show failure state on copy button\n     * @param {HTMLElement} button - Button element\n     * @private\n     */\n    _showCopyFailure(button) {\n        const translationManager = TranslationManager.getInstance();\n        button.innerHTML = DOMUtils.getIconHtml('exclamation-triangle', { classes: 'vdm-icon--danger ' + Selectors.UTILITY.MARGIN_END_2.name() }) +\n            `<span>${translationManager.get('copyFailed')}</span>`;\n        button.classList.remove(Selectors.UTILITY.BUTTON_PRIMARY.name());\n        button.classList.add(Selectors.UTILITY.BUTTON_DANGER.name());\n\n        setTimeout(() => {\n            button.innerHTML = DOMUtils.getIconHtml('copy', { classes: Selectors.UTILITY.MARGIN_END_2.name() }) +\n                `<span>${translationManager.get('tryAgain')}</span>`;\n            button.classList.remove(Selectors.UTILITY.BUTTON_DANGER.name());\n            button.classList.add(Selectors.UTILITY.BUTTON_PRIMARY.name());\n        }, 2000);\n    }\n\n    /**\n     * Escape HTML entities in a string\n     * @param {string} html - String to escape\n     * @returns {string} Escaped string\n     * @private\n     */\n    _escapeHtml(html) {\n        if (!html) return '';\n\n        return html\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    /**\n     * Create a modal dynamically with content and open it immediately\n     * @param {Object} config - Modal configuration (see createModal)\n     * @param {string|Element} content - Content to set in the modal\n     * @param {string} [contentSelector] - Optional content container selector\n     * @returns {string} Modal ID\n     */\n    createAndOpenModal(config, content, contentSelector = null) {\n        try {\n            // Generate a unique ID if none provided\n            if (!config.id) {\n                config.id = 'vdm-modal--dynamic-' + Date.now();\n            }\n\n            // Create the modal\n            this.createModal(config);\n\n            // Set the content if provided\n            if (content) {\n                this.setContent(config.id, content, contentSelector || config.contentId);\n            }\n\n            // Open the modal\n            this.open(config.id);\n\n            return config.id;\n        } catch (error) {\n            Debug.error('ModalManager: Error creating and opening modal', error, 1);\n            return null;\n        }\n    }\n\n    /**\n     * Create a simple confirmation modal\n     * @param {Object} options - Confirmation options\n     * @param {string} options.title - Modal title\n     * @param {string} options.message - Confirmation message\n     * @param {string} options.confirmText - Text for confirm button\n     * @param {string} options.cancelText - Text for cancel button\n     * @param {Function} options.onConfirm - Callback for confirm action\n     * @param {Function} options.onCancel - Callback for cancel action\n     * @returns {string} Modal ID\n     */\n    createConfirmationModal(options) {\n        const modalId = 'vdm-modal--confirmation-' + Date.now();\n\n        // Create modal\n        this.createModal({\n            id: modalId,\n            title: options.title || 'Confirmation',\n            contentId: 'vdm-modal__confirmation-content',\n            contentClass: Selectors.UTILITY.PADDING_3.name(),\n            footerButtons: [\n                {\n                    id: `${modalId}-cancel-btn`,\n                    text: options.cancelText || 'Cancel',\n                    class: `${Selectors.MODAL.CLOSE.name()} ${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_SECONDARY.name()} me-2`\n                },\n                {\n                    id: `${modalId}-confirm-btn`,\n                    text: options.confirmText || 'Confirm',\n                    class: `${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_PRIMARY.name()}`\n                }\n            ],\n            events: {\n                [`#${modalId}-confirm-btn`]: {\n                    click: () => {\n                        if (typeof options.onConfirm === 'function') {\n                            options.onConfirm();\n                        }\n                        this.close(modalId);\n                    }\n                },\n                [`#${modalId}-cancel-btn`]: {\n                    click: () => {\n                        if (typeof options.onCancel === 'function') {\n                            options.onCancel();\n                        }\n                        this.close(modalId);\n                    }\n                }\n            }\n        });\n\n        // Set message content\n        this.setContent(modalId, `<p>${options.message || ''}</p>`, 'vdm-modal__confirmation-content');\n\n        // Open the modal\n        this.open(modalId);\n\n        return modalId;\n    }\n\n    /**\n     * Create an alert modal for showing messages\n     * @param {Object} options - Alert options\n     * @param {string} options.title - Modal title\n     * @param {string} options.message - Alert message\n     * @param {string} options.type - Alert type (success, info, warning, danger)\n     * @param {string} options.buttonText - Text for button\n     * @param {Function} options.onClose - Callback for close action\n     * @returns {string} Modal ID\n     */\n    createAlertModal(options) {\n        const modalId = `${Selectors.MODAL.CONTAINER.name()}--alert-${Date.now()}`;\n\n        // Determine alert class based on type\n        const alertClass = options.type ?\n            `${Selectors.UTILITY.ALERT} ${Selectors.UTILITY.ALERT_PREFIX}${options.type}` :\n            `${Selectors.UTILITY.ALERT} ${Selectors.UTILITY.ALERT_INFO}`;\n\n        // Create modal\n        this.createModal({\n            id: modalId,\n            title: options.title || 'Alert',\n            contentId: `${Selectors.MODAL.CONTAINER.name()}__alert-content`,\n            contentClass: Selectors.UTILITY.PADDING_3.name(),\n            footerButtons: [\n                {\n                    id: `${modalId}-ok-btn`,\n                    text: options.buttonText || 'OK',\n                    class: `${Selectors.MODAL.CLOSE.name()} ${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_PRIMARY.name()}`\n                }\n            ],\n            events: {\n                [`#${modalId}-ok-btn`]: {\n                    click: (e) => {\n                        if (typeof options.onClose === 'function') {\n                            options.onClose(e);\n                        }\n                        this.close(modalId);\n                    }\n                }\n            }\n        });\n\n        // Create alert content\n        const alertContent = `\n            <div class=\"${alertClass} mb-0\">\n                ${options.message || ''}\n            </div>\n        `;\n\n        // Set content\n        this.setContent(modalId, alertContent, `${Selectors.MODAL.CONTAINER.name()}__alert-content`);\n\n        // Open the modal\n        this.open(modalId);\n\n        return modalId;\n    }\n\n    /**\n     * Destroy all modal instances and clean up\n     */\n    destroy() {\n        try {\n            // Close any open modal\n            if (this.activeModal) {\n                this.close(this.activeModal);\n            }\n\n            // Reset all modal references\n            this.modals = {};\n            this.activeModal = null;\n\n            Debug.log('ModalManager: Destroyed', null, 2);\n        } catch (error) {\n            Debug.error('ModalManager: Error during destroy', error, 1);\n        }\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { DOMUtils } from '../../utils/DOMUtils';\nimport { MergeContentFormatter } from '../../utils/MergeContentFormatter';\nimport { NavigationUtils } from '../../utils/NavigationUtils';\nimport { TranslationManager } from '../../utils/TranslationManager';\nimport Selectors from '../../constants/Selectors';\n\n/**\n * Controls merge UI elements and interactions\n */\nexport class MergeUIController {\n    /**\n     * Initialize UI controller\n     * @param {MergeHandler} mergeHandler - Parent merge handler\n     */\n    constructor(mergeHandler) {\n        this.mergeHandler = mergeHandler;\n        this.diffViewer = mergeHandler.diffViewer;\n        this.modalManager = mergeHandler.modalManager;\n        this.translationManager = TranslationManager.getInstance();\n\n        // UI element references\n        this.mergeDestination = null;\n        this.mergeToggleBtn = null;\n        this.mergeToggleIcon = null;\n        this.mergeToggleText = null;\n    }\n\n    /**\n     * Initialize UI elements and event handlers\n     */\n    initialize() {\n        // Initialize merge destination toggle\n        this.initMergeDestinationToggle();\n\n        // Set up modal buttons\n        this.setupModalButtons();\n\n        // Set up apply merge button\n        this.setupApplyMergeButton();\n\n        Debug.log('MergeUIController: Initialized', null, 2);\n    }\n\n    /**\n     * Initialize merge destination toggle\n     */\n    initMergeDestinationToggle() {\n        // Get the necessary elements\n        this.mergeDestination = DOMUtils.getElement(Selectors.MERGE.DESTINATION_DROPDOWN);\n        this.mergeToggleBtn = DOMUtils.getElement(Selectors.MERGE.DESTINATION_TOGGLE);\n\n        // Get toggle icon and text by proper IDs, not using name()\n        this.mergeToggleIcon = document.getElementById('vdm-merge-controls__toggle-icon');\n        this.mergeToggleText = document.getElementById('vdm-merge-controls__toggle-text');\n\n        if (!this.mergeDestination || !this.mergeToggleBtn) {\n            Debug.warn('MergeUIController: Missing merge destination elements', null, 2);\n            return;\n        }\n\n        // Explicitly set type=\"button\" on toggle button to prevent form submission\n        if (this.mergeToggleBtn) {\n            this.mergeToggleBtn.setAttribute('type', 'button');\n        }\n\n        // ALWAYS populate the dropdown options regardless of current state\n        // This ensures configuration-based options are always used\n        Debug.log('MergeUIController: Populating merge destination options', null, 2);\n        this.populateMergeDestinations();\n\n        // Load saved preference or default to 'new'\n        const savedDestination = localStorage.getItem('preferredMergeDestination') || 'new';\n\n        // Ensure the value exists in the dropdown\n        let valueExists = false;\n        for (let i = 0; i < this.mergeDestination.options.length; i++) {\n            if (this.mergeDestination.options[i].value === savedDestination) {\n                valueExists = true;\n                break;\n            }\n        }\n\n        // Set the value if it exists, otherwise use the first option\n        if (valueExists) {\n            this.mergeDestination.value = savedDestination;\n        } else if (this.mergeDestination.options.length > 0) {\n            this.mergeDestination.selectedIndex = 0;\n        }\n\n        Debug.log(`MergeUIController: Initial merge destination set to ${this.mergeDestination.value}`, null, 2);\n\n        // Set up event handlers\n        this.setupMergeToggleEvents();\n\n        Debug.log('MergeUIController: Merge destination toggle initialized', null, 2);\n    }\n\n    /**\n     * Populate merge destination dropdown\n     */\n    populateMergeDestinations() {\n        // Get runtime properties\n        const runtimeProps = this.diffViewer.getRuntimeProps();\n\n        // Get diffData which contains file information\n        const diffData = runtimeProps.diffData || {};\n\n        // Get filenames from the appropriate sources using the new pattern (no server paths)\n        // Prefer new secure properties (newFileName, oldFileName) that only contain the filename\n        const newFileName = runtimeProps.newFileName || diffData.new?.filename || runtimeProps.filepath?.split('/').pop() || 'new-file';\n        const oldFileName = runtimeProps.oldFileName || diffData.old?.filename || 'old-file';\n\n        // Clean filenames - ensure we're only using the basename without any path components\n        const newFile = newFileName.split(/[\\/\\\\]/).pop();\n        const oldFile = oldFileName.split(/[\\/\\\\]/).pop();\n\n        Debug.log('MergeUIController: File names for merge destinations', {\n            newFileName,\n            oldFileName,\n            newFile,\n            oldFile\n        }, 3);\n\n        // Create merged filenames\n        const newFileWithoutExt = newFile.substring(0, newFile.lastIndexOf('.')) || newFile;\n        const oldFileWithoutExt = oldFile.substring(0, oldFile.lastIndexOf('.')) || oldFile;\n        const newFileExt = newFile.substring(newFile.lastIndexOf('.')) || '';\n        const oldFileExt = oldFile.substring(oldFile.lastIndexOf('.')) || '';\n\n        const newMergedFile = `${newFileWithoutExt}-merged${newFileExt}`;\n        const oldMergedFile = `${oldFileWithoutExt}-merged${oldFileExt}`;\n\n        // Get configuration for enabled save options\n        const config = this.diffViewer.getConfig();\n        const saveOptions = config?.saveOptions || {\n            saveToOriginal: true,\n            saveWithSuffix: true,\n            saveToOld: true,\n            saveToOldWithSuffix: true,\n            saveToBoth: true,\n            saveToBothWithSuffix: true\n        };\n\n        Debug.log('MergeUIController: Save options configuration', saveOptions, 3);\n\n        // IMPORTANT: Always clear ALL existing options to ensure we start fresh\n        while (this.mergeDestination.options.length > 0) {\n            this.mergeDestination.remove(0);\n        }\n\n        // Alternative method to clear options for cross-browser compatibility\n        this.mergeDestination.innerHTML = '';\n\n        Debug.log('MergeUIController: Cleared existing dropdown options', null, 3);\n\n        let optionCount = 0;\n\n        // Add options based on configuration\n        if (saveOptions.saveToOriginal) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'new',\n                    'data-tooltip': this.translationManager.get('saveToOriginalTooltip', 'Replace the current file with merged content')\n                },\n                content: `${newFile} (new)`\n            });\n            optionCount++;\n        }\n\n        if (saveOptions.saveWithSuffix) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'new-suffix',\n                    'data-tooltip': this.translationManager.get('saveWithSuffixTooltip', 'Save merged content as a new file with -merged suffix')\n                },\n                content: `${newMergedFile} (new)`\n            });\n            optionCount++;\n        }\n\n        if (saveOptions.saveToOld) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'old',\n                    'data-tooltip': this.translationManager.get('saveToOldTooltip', 'Replace the old file with merged content')\n                },\n                content: `${oldFile} (old)`\n            });\n            optionCount++;\n        }\n\n        if (saveOptions.saveToOldWithSuffix) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'old-suffix',\n                    'data-tooltip': this.translationManager.get('saveToOldWithSuffixTooltip', 'Save merged content as a new file with -merged suffix in old location')\n                },\n                content: `${oldMergedFile} (old)`\n            });\n            optionCount++;\n        }\n\n        if (saveOptions.saveToBoth) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'both',\n                    'data-tooltip': this.translationManager.get('saveToBothTooltip', 'Replace both old and new files with merged content')\n                },\n                content: this.translationManager.get('saveToBoth', 'Overwrite both files')\n            });\n            optionCount++;\n        }\n\n        if (saveOptions.saveToBothWithSuffix) {\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'both-suffix',\n                    'data-tooltip': this.translationManager.get('saveToBothWithSuffixTooltip', 'Save merged content as new files with -merged suffix in both locations')\n                },\n                content: this.translationManager.get('saveToBothWithSuffix', 'Save to both with suffix')\n            });\n            optionCount++;\n        }\n\n        // If no options were added (all disabled), add at least the default option\n        if (optionCount === 0) {\n            Debug.log('MergeUIController: No save options enabled, adding default option', null, 2);\n            DOMUtils.createAndAppendElement('option', this.mergeDestination, {\n                attributes: {\n                    value: 'new',\n                    'data-tooltip': this.translationManager.get('saveToOriginalTooltip', 'Replace the current file with merged content')\n                },\n                content: `${newFile} (new)`\n            });\n            optionCount = 1;\n        }\n\n        Debug.log(`MergeUIController: Populated merge destinations with ${optionCount} options`, null, 2);\n    }\n\n    /**\n     * Set up merge toggle button events\n     */\n    setupMergeToggleEvents() {\n        // Create event handlers\n        const toggleHandler = (event) => {\n            // Prevent default action and stop propagation\n            event.preventDefault();\n            event.stopPropagation();\n\n            // We need a better approach to open the dropdown - the current method doesn't work in all browsers\n            if (this.mergeDestination) {\n                // Instead of trying to simulate a click, make the dropdown visible\n                // First, directly focus the element to prepare it\n                this.mergeDestination.focus();\n\n                // If the browser supports it, use the showPicker method\n                if (typeof this.mergeDestination.showPicker === 'function') {\n                    try {\n                        this.mergeDestination.showPicker();\n                        Debug.log('MergeUIController: Opened dropdown using showPicker()', null, 3);\n                        return;\n                    } catch (e) {\n                        Debug.log('MergeUIController: showPicker() failed, trying alternative method', e, 2);\n                    }\n                }\n\n                // Alternative: Use a small delay and click to open\n                setTimeout(() => {\n                    try {\n                        // Create and dispatch a mouse event\n                        const clickEvent = new MouseEvent('mousedown', {\n                            bubbles: true,\n                            cancelable: true,\n                            view: window\n                        });\n                        this.mergeDestination.dispatchEvent(clickEvent);\n                    } catch (e) {\n                        Debug.log('MergeUIController: Failed to open dropdown with click event', e, 2);\n                    }\n                }, 10);\n\n                // If all else fails, make the select element very noticeable to prompt user interaction\n                this.mergeDestination.classList.add('vdm-dropdown-highlight');\n                setTimeout(() => {\n                    this.mergeDestination.classList.remove('vdm-dropdown-highlight');\n                }, 1000);\n            }\n\n            Debug.log('MergeUIController: Toggle button clicked, attempting to open dropdown', null, 3);\n        };\n\n        const changeHandler = () => {\n            // Update appearance and save preference\n            this.updateMergeToggle(this.mergeDestination.value);\n            localStorage.setItem('preferredMergeDestination', this.mergeDestination.value);\n\n            Debug.log(`MergeUIController: Selection changed to ${this.mergeDestination.value}`, null, 3);\n        };\n\n        // Remove any existing listeners using cloneNode\n        const newToggleBtn = this.mergeToggleBtn.cloneNode(true);\n        const newMergeDestination = this.mergeDestination.cloneNode(true);\n\n        // Replace elements - Add null checks to prevent errors when elements don't exist in DOM\n        if (this.mergeToggleBtn && this.mergeToggleBtn.parentNode) {\n            this.mergeToggleBtn.parentNode.replaceChild(newToggleBtn, this.mergeToggleBtn);\n        }\n\n        if (this.mergeDestination && this.mergeDestination.parentNode) {\n            this.mergeDestination.parentNode.replaceChild(newMergeDestination, this.mergeDestination);\n        }\n\n        // Update references\n        this.mergeToggleBtn = newToggleBtn;\n        this.mergeDestination = newMergeDestination;\n\n        // Add the icon and text elements if they're now missing\n        if (!this.mergeToggleBtn.querySelector('#vdm-merge-controls__toggle-icon')) {\n            this.mergeToggleIcon = DOMUtils.createAndAppendElement('i', this.mergeToggleBtn, {\n                id: 'vdm-merge-controls__toggle-icon',\n            });\n            this.mergeToggleBtn.insertBefore(this.mergeToggleIcon, this.mergeToggleBtn.firstChild);\n        } else {\n            this.mergeToggleIcon = this.mergeToggleBtn.querySelector('#vdm-merge-controls__toggle-icon');\n        }\n\n        if (!this.mergeToggleBtn.querySelector('#vdm-merge-controls__toggle-text')) {\n            this.mergeToggleText = DOMUtils.createAndAppendElement('span', this.mergeToggleBtn, {\n                id: 'vdm-merge-controls__toggle-text'\n            });\n        } else {\n            this.mergeToggleText = this.mergeToggleBtn.querySelector('#vdm-merge-controls__toggle-text');\n        }\n\n        // Enhance dropdown appearance to make it more visible\n        this.mergeDestination.classList.add('vdm-dropdown-visible');\n        this.mergeDestination.style.cursor = 'pointer';\n\n        // Add a small down arrow icon to the toggle button to indicate it opens a dropdown\n        const dropdownIcon = document.createElement('span');\n        dropdownIcon.className = Selectors.UTILITY.MARGIN_START_2.name(); // Using the correct end start class\n        dropdownIcon.innerHTML = DOMUtils.getIconHtml('chevron-down', { width: 10, height: 10 });\n        this.mergeToggleBtn.appendChild(dropdownIcon);\n\n        // Add event listeners to both the toggle button and dropdown\n        this.mergeToggleBtn.addEventListener('click', toggleHandler);\n        this.mergeDestination.addEventListener('change', changeHandler);\n\n        // Make the dropdown more interactive and visible\n        this.mergeDestination.style.paddingRight = '1.5rem';\n        this.mergeDestination.style.appearance = 'menulist';\n        this.mergeDestination.style.cursor = 'pointer';\n\n        // Add tooltip to the dropdown\n        this.mergeDestination.title = 'Click to select where to save the merged content';\n\n        // Make the dropdown more easily clickable and indicate it's interactive\n        this.mergeDestination.addEventListener('mouseover', () => {\n            this.mergeDestination.style.borderColor = 'var(--vdm-primary, #0d6efd)';\n        });\n        this.mergeDestination.addEventListener('mouseout', () => {\n            this.mergeDestination.style.borderColor = 'var(--vdm-border-color, #495057)';\n        });\n\n        // Re-apply the toggle styling AFTER cloning\n        this.updateMergeToggle(this.mergeDestination.value);\n    }\n\n    /**\n     * Update merge toggle button appearance\n     */\n    updateMergeToggle(value) {\n        // Define color classes for different destination types\n        const newFileColorClass = 'vdm-text-primary'; // Purple for new file destinations\n        const oldFileColorClass = 'vdm-text-warning'; // Amber for old file destinations\n        const bothFilesColorClass = 'vdm-text-info';  // Turquoise for both files destinations\n\n        // Define button style classes that match the color theme\n        const newFileBtnClass = Selectors.UTILITY.BUTTON_PRIMARY.name(); // Purple button\n        const oldFileBtnClass = Selectors.UTILITY.BUTTON_WARNING.name(); // Amber button\n        const bothFilesBtnClass = Selectors.UTILITY.BUTTON_INFO.name();  // Turquoise button\n\n        // Create single SVG icon HTML for each destination state with appropriate color class\n        // Always use a single icon per destination type with color indicating the destination\n        let iconHtml = '';\n        let colorClass = '';\n        let buttonClass = '';\n\n        // Determine icon, color class, and button class based on destination type\n        switch (value) {\n            case 'new':\n            case 'new-suffix':\n                // New file destinations use file icon with primary color\n                iconHtml = 'file';\n                colorClass = newFileColorClass;\n                buttonClass = newFileBtnClass;\n                break;\n\n            case 'old':\n            case 'old-suffix':\n                // Old file destinations use file-lines icon with warning color\n                iconHtml = 'file-lines';\n                colorClass = oldFileColorClass;\n                buttonClass = oldFileBtnClass;\n                break;\n\n            case 'both':\n            case 'both-suffix':\n                // Both files destinations use file-copy icon with info color\n                iconHtml = 'file-copy';\n                colorClass = bothFilesColorClass;\n                buttonClass = bothFilesBtnClass;\n                break;\n\n            default:\n                // Default to new file icon with primary color\n                iconHtml = 'file';\n                colorClass = newFileColorClass;\n                buttonClass = newFileBtnClass;\n                break;\n        }\n\n        // Generate the icon HTML with proper classes\n        const iconClasses = `${Selectors.UTILITY.MARGIN_END_1.name()} ${colorClass}`;\n        this.mergeToggleIcon.innerHTML = DOMUtils.getIconHtml(iconHtml, { classes: iconClasses });\n\n        // Update the Apply Merge button style to match the destination\n        const applyButton = document.getElementById(Selectors.MERGE.BUTTON_APPLY.name());\n        if (applyButton) {\n            // Remove any existing button style classes\n            applyButton.classList.remove(\n                Selectors.UTILITY.BUTTON_PRIMARY.name(),\n                Selectors.UTILITY.BUTTON_WARNING.name(),\n                Selectors.UTILITY.BUTTON_INFO.name(),\n                Selectors.UTILITY.BUTTON_SUCCESS.name(),\n                Selectors.UTILITY.BUTTON_DANGER.name(),\n                Selectors.UTILITY.BUTTON_SECONDARY.name()\n            );\n\n            // Add the appropriate button style class\n            applyButton.classList.add(buttonClass);\n\n            Debug.log(`MergeUIController: Updated apply button style to ${buttonClass}`, null, 3);\n        }\n\n        // Update text content based on the destination value\n        switch (value) {\n            case 'new':\n                // Save to new file (overwrite)\n                this.mergeToggleText.textContent = this.translationManager.get('saveToOriginal', 'Save to original');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToOriginalTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'new');\n                break;\n\n            case 'new-suffix':\n                // Save to new file with suffix\n                this.mergeToggleText.textContent = this.translationManager.get('saveWithSuffix', 'Save with suffix');\n                this.mergeToggleBtn.title = this.translationManager.get('saveWithSuffixTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'new-suffix');\n                break;\n\n            case 'old':\n                // Save to old file (overwrite)\n                this.mergeToggleText.textContent = this.translationManager.get('saveToOld', 'Save to old file');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToOldTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'old');\n                break;\n\n            case 'old-suffix':\n                // Save to old file with suffix\n                this.mergeToggleText.textContent = this.translationManager.get('saveToOldWithSuffix', 'Save to old with suffix');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToOldWithSuffixTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'old-suffix');\n                break;\n\n            case 'both':\n                // Save to both files (overwrite)\n                this.mergeToggleText.textContent = this.translationManager.get('saveToBoth', 'Save to both files');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToBothTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'both');\n                break;\n\n            case 'both-suffix':\n                // Save to both files with suffix\n                this.mergeToggleText.textContent = this.translationManager.get('saveToBothWithSuffix', 'Save to both with suffix');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToBothWithSuffixTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'both-suffix');\n                break;\n\n            default:\n                // Default to 'new' if value is not recognized\n                this.mergeToggleText.textContent = this.translationManager.get('saveToOriginal', 'Save to original');\n                this.mergeToggleBtn.title = this.translationManager.get('saveToOriginalTooltip', '');\n                this.mergeToggleBtn.setAttribute('data-value', 'new');\n                break;\n        }\n\n        Debug.log(`MergeUIController: Toggle updated to ${value}`, null, 3);\n    }\n\n    /**\n     * Set up modal buttons\n     */\n    setupModalButtons() {\n        // Add a direct event listener to the document for clicks on modal buttons\n        document.addEventListener('click', (event) => {\n            // Handle continue merging button\n            if (event.target.closest && event.target.closest(`#${Selectors.MODAL.CONTINUE_BTN.name()}`)) {\n                Debug.log('MergeUIController: Continue merging button clicked via delegation', null, 2);\n                this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n\n                // Also close the preview modal - use MODAL.PREVIEW instead of MERGE.PREVIEW_MODAL\n                const previewModalId = Selectors.MODAL.PREVIEW.name();\n                Debug.log(`MergeUIController: Also closing preview modal (ID: ${previewModalId})`, null, 1);\n                this.modalManager.close(previewModalId);\n\n                setTimeout(() => {\n                    this.highlightUnresolvedChunks();\n                }, 400);\n            }\n\n            // Handle merge anyway button\n            if (event.target.closest && event.target.closest(`#${Selectors.MODAL.MERGE_BTN.name()}`)) {\n                Debug.log('MergeUIController: Merge anyway button clicked via delegation', null, 2);\n                this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n                this.mergeHandler.proceedWithMerge(this.getMergeType());\n            }\n        });\n\n        // For compatibility, still register the before-open callback as well\n        if (this.modalManager && typeof this.modalManager.registerBeforeOpenCallback === 'function') {\n            this.modalManager.registerBeforeOpenCallback(Selectors.MERGE.CONFLICT_MODAL.name(), () => {\n                // Log the presence of the buttons when the modal opens\n                const continueBtn = document.getElementById(Selectors.MODAL.CONTINUE_BTN.name());\n                const mergeBtn = document.getElementById(Selectors.MODAL.MERGE_BTN.name());\n\n                Debug.log(`MergeUIController: Modal opened, buttons present: continueBtn=${!!continueBtn}, mergeBtn=${!!mergeBtn}`, null, 2);\n\n                // Add direct click handlers (as a backup)\n                if (continueBtn) {\n                    continueBtn.onclick = () => {\n                        Debug.log('MergeUIController: Continue merging clicked via direct handler', null, 2);\n                        this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n\n                        // Also close the preview modal - use MODAL.PREVIEW instead of MERGE.PREVIEW_MODAL\n                        const previewModalId = Selectors.MODAL.PREVIEW.name();\n                        Debug.log(`MergeUIController: Also closing preview modal (ID: ${previewModalId})`, null, 1);\n                        this.modalManager.close(previewModalId);\n\n                        setTimeout(() => {\n                            this.highlightUnresolvedChunks();\n                        }, 400);\n                        return false; // Prevent default\n                    };\n                }\n\n                if (mergeBtn) {\n                    mergeBtn.onclick = () => {\n                        Debug.log('MergeUIController: Merge anyway clicked via direct handler', null, 2);\n                        this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n                        this.mergeHandler.proceedWithMerge(this.getMergeType());\n                        return false; // Prevent default\n                    };\n                }\n            });\n        }\n    }\n\n    /**\n     * Set up apply merge button\n     */\n    setupApplyMergeButton() {\n        // Get the Apply Merge button\n        const applyButton = document.getElementById(Selectors.MERGE.BUTTON_APPLY.name());\n        if (!applyButton) {\n            Debug.warn('MergeUIController: Apply merge button not found', null, 2);\n            return;\n        }\n\n        // Get the merge controls actions container\n        const mergeControlsActions = document.querySelector(Selectors.MERGE.CONTROLS_ACTIONS.toString());\n        if (!mergeControlsActions) {\n            Debug.warn('MergeUIController: Merge controls container not found', null, 2);\n            return;\n        }\n\n        // Get the merge destination dropdown and toggle button\n        const destinationDropdown = document.getElementById(Selectors.MERGE.DESTINATION_DROPDOWN.name());\n        const toggleButton = document.getElementById(Selectors.MERGE.DESTINATION_TOGGLE.name());\n\n        // Create a form element to wrap the merge controls\n        const form = document.createElement('form');\n        form.id = 'vdm-merge__form';\n        form.className = mergeControlsActions.className;\n        form.style.display = 'flex';\n        form.style.justifyContent = 'space-between';\n        form.style.width = '100%';\n\n        // Replace the merge controls actions container with the form\n        if (mergeControlsActions.parentNode) {\n            mergeControlsActions.parentNode.replaceChild(form, mergeControlsActions);\n\n            // Move all content from the original container to the form\n            while (mergeControlsActions.firstChild) {\n                form.appendChild(mergeControlsActions.firstChild);\n            }\n\n            // Make sure the dropdown is inside the form by checking if it exists but is outside\n            if (destinationDropdown && !form.contains(destinationDropdown)) {\n                const destinationContainer = document.querySelector('.vdm-merge-controls__destination');\n                if (destinationContainer) {\n                    form.insertBefore(destinationContainer, form.firstChild);\n                }\n            }\n\n            Debug.log('MergeUIController: Created form wrapper for merge controls', null, 2);\n        }\n\n        // Listen for form submission instead of button click\n        form.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this.handleApplyMerge();\n            Debug.log('MergeUIController: Form submitted', null, 3);\n        });\n\n        // Important: Prevent the toggle button from submitting the form\n        if (toggleButton) {\n            toggleButton.type = 'button'; // Explicitly set type to 'button' to prevent form submission\n\n            // Add a click handler that stops propagation\n            toggleButton.addEventListener('click', (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                // The toggle logic is already in setupMergeToggleEvents\n                // This is just to prevent form submission\n                Debug.log('MergeUIController: Toggle button click intercepted to prevent form submission', null, 3);\n            });\n        }\n\n        // For backwards compatibility, also keep the button click handler\n        applyButton.addEventListener('click', (event) => {\n            event.preventDefault();\n            // Validate that the button is inside the form\n            if (applyButton.form) {\n                applyButton.form.dispatchEvent(new Event('submit'));\n            } else {\n                this.handleApplyMerge();\n            }\n            Debug.log('MergeUIController: Apply merge clicked', null, 3);\n        });\n    }\n\n    /**\n     * Handle the apply merge button click\n     */\n    handleApplyMerge() {\n        // Count unresolved conflicts\n        const unresolvedCount = this.countUnresolvedConflicts();\n\n        if (unresolvedCount > 0) {\n            this.showConflictModal(unresolvedCount);\n        } else {\n            // Check if we're in file-browser mode or not by checking for fileRefId\n            const runtimeProps = this.diffViewer.getRuntimeProps();\n            const fileRefId = runtimeProps.fileRefId || '';\n            const oldFileRefId = runtimeProps.oldFileRefId || '';\n\n            // If neither fileRefId exists, we're in a non-file-browser mode\n            // (text-compare, url-compare, file-upload)\n            if (!fileRefId && !oldFileRefId) {\n                // Use 'clipboard' merge type for non-file-browser modes\n                Debug.log('MergeUIController: Using clipboard merge type for non-file-browser mode', null, 2);\n                this.mergeHandler.proceedWithMerge('clipboard');\n            } else {\n                // Use selected merge type for file-browser mode\n                Debug.log('MergeUIController: Using selected merge type for file-browser mode', null, 2);\n                this.mergeHandler.proceedWithMerge(this.getMergeType());\n            }\n        }\n    }\n\n    /**\n     * Count unresolved conflicts\n     * @returns {number} Number of unresolved conflicts\n     */\n    countUnresolvedConflicts() {\n        const conflictChunks = this.diffViewer.chunkManager.chunks.filter(c => c.conflict);\n        const selections = this.diffViewer.chunkManager.selections || {};\n        return conflictChunks.length - Object.keys(selections).length;\n    }\n\n    /**\n     * Show conflict resolution modal\n     * @param {number} unresolvedCount - Number of unresolved conflicts\n     */\n    showConflictModal(unresolvedCount) {\n        // Get translations from config\n        const translations = this.diffViewer.getConfig().translations || {};\n\n        // Set message about unresolved conflicts\n        const message = MergeContentFormatter.formatUnresolvedCount(unresolvedCount, translations);\n\n        // Open the conflict modal\n        this.modalManager.open(Selectors.MERGE.CONFLICT_MODAL.name());\n\n        // Set the message in the modal\n        setTimeout(() => {\n            DOMUtils.showMessage(Selectors.MODAL.MESSAGE.name(), message, 'warning', {\n                className: '' // No extra margin needed in modal\n            });\n            Debug.log('MergeUIController: Showing conflict modal with message', null, 2);\n        }, 50);\n\n        // Attach event handlers to buttons with a small delay to ensure the modal is fully rendered\n        setTimeout(() => {\n            const continueBtn = document.getElementById(Selectors.MODAL.CONTINUE_BTN.name());\n            const mergeBtn = document.getElementById(Selectors.MODAL.MERGE_BTN.name());\n\n            // Handle the Continue button\n            if (continueBtn) {\n                // Remove any existing handlers by cloning\n                const newContinueBtn = continueBtn.cloneNode(true);\n                continueBtn.parentNode.replaceChild(newContinueBtn, continueBtn);\n\n                // Add direct, simplified handler\n                newContinueBtn.addEventListener('click', () => {\n                    Debug.log('MergeUIController: Continue button clicked', null, 2);\n\n                    // First close the conflict modal\n                    this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n\n                    // Then close the preview modal\n                    const previewModalId = Selectors.MODAL.PREVIEW.name();\n                    Debug.log(`MergeUIController: Closing preview modal (ID: ${previewModalId})`, null, 2);\n                    this.modalManager.close(previewModalId);\n\n                    // Highlight any unresolved chunks after a delay\n                    setTimeout(() => {\n                        this.highlightUnresolvedChunks();\n                    }, 400);\n                });\n            }\n\n            // Handle the Merge Anyway button\n            if (mergeBtn) {\n                // Remove any existing handlers by cloning\n                const newMergeBtn = mergeBtn.cloneNode(true);\n                mergeBtn.parentNode.replaceChild(newMergeBtn, mergeBtn);\n\n                // Add direct, simplified handler\n                newMergeBtn.addEventListener('click', () => {\n                    Debug.log('MergeUIController: Merge anyway button clicked', null, 2);\n                    this.modalManager.close(Selectors.MERGE.CONFLICT_MODAL.name());\n                    this.mergeHandler.proceedWithMerge(this.getMergeType());\n                });\n            }\n        }, 50);\n    }\n\n    /**\n     * Get current merge type from UI\n     * @returns {string} Merge type ('original' or 'new')\n     */\n    getMergeType() {\n        return this.mergeDestination?.value || 'original';\n    }\n\n    /**\n     * Highlight unresolved chunks\n     * @returns {boolean} True if any chunk was highlighted\n     */\n    highlightUnresolvedChunks() {\n        Debug.log('MergeUIController: Finding first unresolved conflict', null, 2);\n\n        // Get all chunks and current selections\n        const chunks = this.diffViewer.chunkManager.chunks;\n        const selections = this.diffViewer.chunkManager.selections || {};\n\n        // Find the first unresolved chunk\n        for (const chunk of chunks) {\n            if (chunk.conflict && !selections[chunk.id]) {\n                // Use DiffNavigator to navigate to this chunk\n                const chunkIndex = chunks.indexOf(chunk);\n                if (this.diffViewer.diffNavigator) {\n                    // First navigate to the chunk\n                    this.diffViewer.diffNavigator.navigateToChunk(chunkIndex);\n\n                    // Then highlight the chunk element using imported NavigationUtils\n                    const chunkElement = document.querySelector(`[data-chunk-id=\"${chunk.id}\"]`);\n                    if (chunkElement) {\n                        NavigationUtils.addHighlightEffect(chunkElement, 4000);\n                    }\n\n                    Debug.log(`MergeUIController: Highlighted unresolved chunk ${chunk.id}`, null, 2);\n                    return true;\n                }\n            }\n        }\n\n        Debug.log('MergeUIController: No unresolved conflicts found', null, 2);\n        return false;\n    }\n\n    /**\n     * Setup local-only controls when server save is disabled\n     * This creates a simplified UI with just the \"Get merged result\" button\n     */\n    setupLocalOnlyControls() {\n        Debug.log('MergeUIController: Setting up local-only controls (server save disabled)', null, 2);\n\n        // Get translations using the TranslationManager\n        Debug.log('MergeUIController: Getting translations for local-only controls', this.translationManager, 2);\n        const getMergedResultText = this.translationManager.get('getMergedResult', 'Get Merged Result');\n        const getMergedResultTooltip = this.translationManager.get('getMergedResultTooltip', 'View and download the merged content');\n\n        // Find the merge controls container\n        const mergeControlsActions = document.querySelector(Selectors.MERGE.CONTROLS_ACTIONS.toString());\n\n        if (!mergeControlsActions) {\n            Debug.error('MergeUIController: Could not find merge controls container', null, 1);\n            return;\n        }\n\n        // Clear any existing content from the container to ensure we only have our button\n        mergeControlsActions.innerHTML = '';\n\n        // Create the \"Get merged result\" button\n        const getMergedResultBtn = document.createElement('button');\n        getMergedResultBtn.id = Selectors.MERGE.GET_MERGED_RESULT_BTN.name();\n        getMergedResultBtn.className = `${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_PRIMARY.name()}`;\n        getMergedResultBtn.title = getMergedResultTooltip;\n\n        // Add download icon and text using the proper icon system\n        const downloadIconHtml = DOMUtils.getIconHtml('download', { classes: Selectors.UTILITY.MARGIN_END_1.name() });\n        getMergedResultBtn.innerHTML = `${downloadIconHtml} ${getMergedResultText}`;\n\n        // Add to container (align to right)\n        const buttonContainer = document.createElement('div');\n        buttonContainer.className = `${Selectors.UTILITY.FLEX.name()} ${Selectors.UTILITY.JUSTIFY_CONTENT_BETWEEN.name()} w-100`;\n        buttonContainer.style.width = '100%';\n\n        // Add a spacer on the left to push the button to the right\n        const spacer = document.createElement('div');\n        spacer.style.flex = '1';\n\n        buttonContainer.appendChild(spacer);\n        buttonContainer.appendChild(getMergedResultBtn);\n        mergeControlsActions.appendChild(buttonContainer);\n\n        // Add event handler to show the preview content when clicked\n        getMergedResultBtn.addEventListener('click', (event) => {\n            event.preventDefault();\n\n            // Use 'clipboard' merge type for non-file-browser modes\n            this.mergeHandler.proceedWithMerge('clipboard');\n\n            Debug.log('MergeUIController: Get merged result button clicked (using clipboard merge type)', null, 2);\n        });\n\n        Debug.log('MergeUIController: Local-only controls setup complete', null, 2);\n    }\n}\n","import { ChunkUtils } from '../../utils/ChunkUtils';\nimport Selectors from '../../constants/Selectors';\nimport { Debug } from '../../utils/Debug';\n\n/**\n * Manages visual state updates for chunk selections\n */\nexport class ChunkVisualStateManager {\n    /**\n     * @param {ChunkManager} chunkManager - Parent chunk manager\n     */\n    constructor(chunkManager) {\n        this.chunkManager = chunkManager;\n        // Batch operations queue\n        this._pendingOperations = [];\n        // Track whether DOM updates are batched\n        this._isBatching = false;\n        // Performance metrics\n        this._metrics = {\n            lastBatchSize: 0,\n            lastBatchTime: 0\n        };\n        Debug.log('ChunkVisualStateManager: Initialized', null, 3);\n    }\n\n    /**\n     * Initialize the visual state manager\n     * Preloads all chunk data for optimal performance with large files\n     */\n    initialize() {\n        // Preload all chunks into cache for better performance\n        ChunkUtils.preloadChunks();\n        Debug.log('ChunkVisualStateManager: Initialized with preloaded chunks', null, 2);\n    }\n\n    /**\n     * Update visual selection state\n     * @param {string} chunkId - Chunk ID\n     * @param {string} side - 'left' or 'right'\n     * @param {string} state - 'selected' or 'unselected'\n     * @param {boolean} batch - Whether to batch operations (defaults to false for backward compatibility)\n     */\n    updateVisualState(chunkId, side, state, batch = false) {\n        Debug.log(`ChunkVisualStateManager: Updating visual state for chunk ${chunkId}, side ${side}, state ${state}`, null, 3);\n\n        // Get all elements for this chunk side\n        const elements = ChunkUtils.getChunkElements(chunkId, side);\n        Debug.log(`ChunkVisualStateManager: Found ${elements.length} elements for chunk ${chunkId}`, null, 3);\n\n        // Sort by line number (only needed for getting the first element)\n        const sortedElements = ChunkUtils.sortElementsByLineNumber(elements);\n\n        // Get the opposite side to handle placeholder synchronization\n        const oppositeSide = side === 'left' ? 'right' : 'left';\n\n        if (batch) {\n            // Add to batch queue\n            this._pendingOperations.push({\n                type: 'updateState',\n                chunkId,\n                side,\n                elements: elements,\n                firstElement: sortedElements.length > 0 ? sortedElements[0] : null,\n                state: state,\n                oppositeSide: oppositeSide\n            });\n        } else {\n            // Apply immediately (for backward compatibility)\n            this._applyStateToElements(elements, state);\n\n            // Only update the icon for the first element\n            if (sortedElements.length > 0) {\n                Debug.log(`ChunkVisualStateManager: Updating icon marker for first element of chunk ${chunkId}`, null, 3);\n\n                // When setting a state on one side, also update opposite side\n                const firstElement = sortedElements[0];\n                if (firstElement && state === 'selected') {\n                    // First handle the selected side\n                    this._updateIconMarker(firstElement, state);\n\n                    // Then handle the opposite side marker as a placeholder\n                    this._updateOppositeMarker(firstElement, oppositeSide);\n                } else {\n                    // Normal case without special opposite handling\n                    this._updateIconMarker(firstElement, state);\n                }\n            } else {\n                Debug.warn(`ChunkVisualStateManager: No elements found to update icon for chunk ${chunkId}`, null, 3);\n            }\n\n            // Notify about selection change\n            this._notifySelectionChange();\n        }\n    }\n\n    /**\n     * Update the opposite side's marker when a chunk is selected\n     * @private\n     * @param {Element} element - The element being selected\n     * @param {string} oppositeSide - The opposite side ('left' or 'right')\n     */\n    _updateOppositeMarker(element, oppositeSide) {\n        if (!element?.dataset?.lineId) return;\n\n        // Extract line number from lineId (format: \"side-number\")\n        const lineIdParts = element.dataset.lineId.split('-');\n        if (lineIdParts.length !== 2) return;\n\n        const lineNumber = lineIdParts[1];\n        const oppositeLineId = `${oppositeSide}-${lineNumber}`;\n\n        // Find the opposite marker\n        const oppositeMarker = ChunkUtils.getIconMarker(oppositeLineId);\n        if (!oppositeMarker) {\n            Debug.warn(`ChunkVisualStateManager: Could not find opposite marker for ${oppositeLineId}`, null, 3);\n            return;\n        }\n\n        Debug.log(`ChunkVisualStateManager: Updating opposite marker ${oppositeLineId}`, {\n            currentClasses: Array.from(oppositeMarker.classList)\n        }, 3);\n\n        // Remove selection classes\n        oppositeMarker.classList.remove(\n            Selectors.DIFF.CHUNK_SELECTED.name(),\n            Selectors.DIFF.CHUNK_UNSELECTED.name(),\n            Selectors.ICONS.SELECT.name(),\n            Selectors.ICONS.SELECT_LEFT.name(),\n            Selectors.ICONS.SELECT_RIGHT.name()\n        );\n\n        // CRITICAL DECISION POINT: Determine if the opposite marker should be a placeholder\n        // This is determined by whether the line only exists on one side\n\n        // Only mark as placeholder if it was originally a placeholder\n        const wasPlaceholder = oppositeMarker.classList.contains(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n\n        if (wasPlaceholder) {\n            // If it was a placeholder, keep it as a placeholder\n            oppositeMarker.classList.add(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n            Debug.log(`ChunkVisualStateManager: Preserved placeholder status for ${oppositeLineId}`, null, 3);\n        } else {\n            // Otherwise mark it as unselected\n            oppositeMarker.classList.add(Selectors.DIFF.CHUNK_UNSELECTED.name());\n            Debug.log(`ChunkVisualStateManager: Set opposite marker ${oppositeLineId} as unselected`, null, 3);\n        }\n    }\n\n    /**\n     * Reset visual state for a chunk\n     * @param {string} chunkId - Chunk ID\n     * @param {boolean} batch - Whether to batch operations (defaults to false for backward compatibility)\n     */\n    resetVisualState(chunkId, batch = false) {\n        Debug.log(`ChunkVisualStateManager: Resetting visual state for chunk ${chunkId}`, null, 3);\n\n        // Get all elements for this chunk (both sides)\n        const elements = ChunkUtils.getChunkElements(chunkId);\n        Debug.log(`ChunkVisualStateManager: Found ${elements.length} elements for chunk ${chunkId}`, null, 3);\n\n        // Get icon markers associated with this chunk more efficiently\n        const iconMarkers = ChunkUtils.getChunkIconMarkers(chunkId);\n\n        if (batch) {\n            // Add to batch queue\n            this._pendingOperations.push({\n                type: 'resetState',\n                chunkId,\n                elements: elements,\n                iconMarkers: iconMarkers\n            });\n        } else {\n            // Apply immediately (for backward compatibility)\n            this._applyResetToElements(elements, iconMarkers);\n\n            Debug.log(`ChunkVisualStateManager: Reset ${iconMarkers.length} icon markers for chunk ${chunkId}`, null, 3);\n\n            // Notify about selection change\n            this._notifySelectionChange();\n        }\n    }\n\n    /**\n     * Process all pending visual updates in a single batch\n     * @param {boolean} notify - Whether to trigger notification after batch (default: true)\n     */\n    applyBatch(notify = true) {\n        if (this._pendingOperations.length === 0) {\n            return;\n        }\n\n        // Set batching state flag\n        this._isBatching = true;\n        const batchSize = this._pendingOperations.length;\n        this._metrics.lastBatchSize = batchSize;\n\n        // Use a single RAF call for better performance\n        requestAnimationFrame(() => {\n            const startTime = performance.now();\n            Debug.log(`ChunkVisualStateManager: Applying batch of ${batchSize} operations`, null, 2);\n\n            try {\n                // Group operations by type for better performance\n                const updateOperations = [];\n                const resetOperations = [];\n\n                // Sort operations into groups\n                this._pendingOperations.forEach(operation => {\n                    if (operation.type === 'updateState') {\n                        updateOperations.push(operation);\n                    } else if (operation.type === 'resetState') {\n                        resetOperations.push(operation);\n                    }\n                });\n\n                // Process reset operations first to ensure clean state\n                if (resetOperations.length > 0) {\n                    this._processBatchedResets(resetOperations);\n                }\n\n                // Then process update operations\n                if (updateOperations.length > 0) {\n                    this._processBatchedUpdates(updateOperations);\n                }\n\n                // Track batch processing time\n                const endTime = performance.now();\n                const processingTime = endTime - startTime;\n                this._metrics.lastBatchTime = processingTime;\n\n                Debug.log(`ChunkVisualStateManager: Batch processing completed in ${processingTime.toFixed(2)}ms`,\n                    {\n                        operations: batchSize,\n                        resetOps: resetOperations.length,\n                        updateOps: updateOperations.length,\n                        msPerOperation: (processingTime / batchSize).toFixed(2)\n                    }, 2);\n            }\n            catch (error) {\n                Debug.error(`Error during batch processing: ${error.message}`, error, 1);\n            }\n            finally {\n                // Clear the queue\n                this._pendingOperations = [];\n\n                // Reset batching state flag\n                this._isBatching = false;\n\n                // Send notification if requested\n                if (notify) {\n                    this._notifySelectionChange();\n                }\n            }\n        });\n    }\n\n    /**\n     * Process a batch of reset operations efficiently\n     * @private\n     */\n    _processBatchedResets(operations) {\n        if (operations.length === 0) return;\n\n        // Group elements and markers by class operations for fewer DOM updates\n        const allElements = [];\n        const allIconMarkers = [];\n\n        // Collect all elements and markers to be reset\n        operations.forEach(operation => {\n            if (operation.elements) {\n                allElements.push(...operation.elements);\n            }\n            if (operation.iconMarkers) {\n                allIconMarkers.push(...operation.iconMarkers);\n            }\n        });\n\n        // Apply resets in bulk\n        this._applyResetToElements(allElements, allIconMarkers);\n    }\n\n    /**\n     * Process a batch of update operations efficiently\n     * @private\n     */\n    _processBatchedUpdates(operations) {\n        if (operations.length === 0) return;\n\n        // Group elements by state for more efficient DOM updates\n        const elementsByState = {\n            'selected': [],\n            'unselected': []\n        };\n\n        // First elements for icon marker updates\n        const firstElementsByState = {\n            'selected': {},  // chunkId -> {element, oppositeSide}\n            'unselected': {} // chunkId -> {element}\n        };\n\n        // Group elements by state\n        operations.forEach(operation => {\n            const { elements, firstElement, state, chunkId, side, oppositeSide } = operation;\n\n            if (elements && elements.length > 0) {\n                if (state === 'selected' || state === 'unselected') {\n                    elementsByState[state].push(...elements);\n                }\n            }\n\n            // Track first element of each chunk for icon marker updates\n            if (firstElement && chunkId) {\n                if (state === 'selected' || state === 'unselected') {\n                    firstElementsByState[state][chunkId] = {\n                        element: firstElement,\n                        side: side,\n                        oppositeSide: oppositeSide\n                    };\n                }\n            }\n        });\n\n        // Apply updates by state\n        Object.entries(elementsByState).forEach(([state, elements]) => {\n            if (elements.length > 0) {\n                this._applyStateToElements(elements, state);\n            }\n        });\n\n        // Update icon markers\n        Object.entries(firstElementsByState).forEach(([state, chunksMap]) => {\n            Object.entries(chunksMap).forEach(([_chunkId, data]) => {\n                // Update the element's marker\n                this._updateIconMarker(data.element, state);\n\n                // For selected elements, also update the opposite marker\n                if (state === 'selected' && data.oppositeSide) {\n                    this._updateOppositeMarker(data.element, data.oppositeSide);\n                }\n            });\n        });\n\n        // Force a DOM layout refresh to ensure styles are applied\n        if (document.body) {\n            document.body.getBoundingClientRect();\n        }\n    }\n\n    /**\n     * Apply state changes to elements using efficient operations\n     * @private\n     */\n    _applyStateToElements(elements, state) {\n        if (!elements || elements.length === 0) return;\n\n        // For better performance, prepare the classes to add/remove\n        const removeClasses = [\n            Selectors.DIFF.CHUNK_SELECTED.name(),\n            Selectors.DIFF.CHUNK_UNSELECTED.name()\n        ];\n\n        let addClass = '';\n        if (state === 'selected') {\n            addClass = Selectors.DIFF.CHUNK_SELECTED.name();\n        } else if (state === 'unselected') {\n            addClass = Selectors.DIFF.CHUNK_UNSELECTED.name();\n        } else {\n            // Fallback for backward compatibility\n            addClass = state;\n        }\n\n        // Collect all rows to update at once (reduces layout thrashing)\n        const rows = new Set();\n\n        // Apply to all elements efficiently\n        elements.forEach(element => {\n            // Remove classes\n            element.classList.remove(...removeClasses);\n\n            // Add class\n            element.classList.add(addClass);\n\n            // Add placeholder class if needed\n            if (element.classList.contains(Selectors.DIFF.LINE_PLACEHOLDER.name())) {\n                element.classList.add(Selectors.DIFF.PLACEHOLDER.name());\n            }\n\n            // Collect parent row for batch update\n            const row = ChunkUtils.getParentRow(element);\n            if (row) {\n                rows.add(row);\n            }\n        });\n\n        // Update all rows at once\n        rows.forEach(row => {\n            row.classList.remove(...removeClasses);\n            row.classList.add(addClass);\n        });\n    }\n\n    /**\n     * Apply reset operations to elements and icon markers efficiently\n     * @private\n     */\n    _applyResetToElements(elements, iconMarkers) {\n        if ((!elements || elements.length === 0) && (!iconMarkers || iconMarkers.length === 0)) return;\n\n        // Pre-compute classes to remove for better performance\n        const removeClasses = [\n            Selectors.DIFF.CHUNK_SELECTED.name(),\n            Selectors.DIFF.CHUNK_UNSELECTED.name()\n        ];\n\n        const iconRemoveClasses = [\n            Selectors.DIFF.CHUNK_SELECTED.name(),\n            Selectors.DIFF.CHUNK_UNSELECTED.name(),\n            Selectors.ICONS.SELECT.name(),\n            Selectors.ICONS.SELECT_LEFT.name(),\n            Selectors.ICONS.SELECT_RIGHT.name()\n        ];\n\n        // Collect all rows to update at once (reduces layout thrashing)\n        const rows = new Set();\n\n        // Remove classes from elements efficiently\n        if (elements && elements.length > 0) {\n            elements.forEach(el => {\n                // Skip null or undefined elements\n                if (!el) return;\n\n                // Reset element classes\n                el.classList.remove(...removeClasses);\n\n                // Collect parent row for batch update\n                const row = ChunkUtils.getParentRow(el);\n                if (row) {\n                    rows.add(row);\n                }\n            });\n\n            // Reset all rows at once\n            rows.forEach(row => {\n                row.classList.remove(...removeClasses);\n            });\n        }\n\n        // Reset icon markers efficiently\n        if (iconMarkers && iconMarkers.length > 0) {\n            iconMarkers.forEach(marker => {\n                if (marker) {\n                    // Store placeholder status before removing classes\n                    const isPlaceholder = marker.classList.contains(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n\n                    // Remove selection-related classes\n                    marker.classList.remove(...iconRemoveClasses);\n\n                    // Preserve placeholder status when resetting\n                    if (isPlaceholder) {\n                        marker.classList.add(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Update icon marker for the element\n     * @private\n     */\n    _updateIconMarker(element, state) {\n        if (!element) return;\n\n        const lineId = element.dataset.lineId;\n        if (!lineId) return;\n\n        Debug.log(`ChunkVisualStateManager: Looking for icon marker with lineId ${lineId}`, null, 3);\n        // Find and update the icon marker (use cached version if available)\n        const iconMarker = ChunkUtils.getIconMarker(lineId);\n\n        if (iconMarker) {\n            Debug.log(`ChunkVisualStateManager: Updating icon marker state to ${state}`, {\n                lineId: lineId,\n                currentClasses: Array.from(iconMarker.classList)\n            }, 3);\n\n            // Store the placeholder status before removing classes\n            const isPlaceholder = iconMarker.classList.contains(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n\n            // Only remove selection-related classes, preserve placeholder status\n            iconMarker.classList.remove(\n                Selectors.DIFF.CHUNK_SELECTED.name(),\n                Selectors.DIFF.CHUNK_UNSELECTED.name(),\n                Selectors.ICONS.SELECT.name(),\n                Selectors.ICONS.SELECT_LEFT.name(),\n                Selectors.ICONS.SELECT_RIGHT.name()\n            );\n\n            // Add the appropriate class based on state\n            if (state === 'selected') {\n                iconMarker.classList.add(Selectors.DIFF.CHUNK_SELECTED.name());\n\n                // Add the side-appropriate selection icon class\n                if (element.dataset.side === 'left') {\n                    iconMarker.classList.add(Selectors.ICONS.SELECT_LEFT.name());\n                } else {\n                    iconMarker.classList.add(Selectors.ICONS.SELECT_RIGHT.name());\n                }\n            } else if (state === 'unselected') {\n                iconMarker.classList.add(Selectors.DIFF.CHUNK_UNSELECTED.name());\n            } else {\n                // Fallback for backward compatibility\n                iconMarker.classList.add(state);\n            }\n\n            // Preserve placeholder status - don't try to infer it from the element\n            if (isPlaceholder && !iconMarker.classList.contains(Selectors.ICONS.MARKER_PLACEHOLDER.name())) {\n                iconMarker.classList.add(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n                Debug.log(`ChunkVisualStateManager: Preserved placeholder marker status`, null, 3);\n            }\n        } else {\n            Debug.warn(`ChunkVisualStateManager: No icon marker found for line ${lineId}`, null, 3);\n        }\n    }\n\n    /**\n     * Notify about selection change\n     * @private\n     */\n    _notifySelectionChange() {\n        Debug.log(`ChunkVisualStateManager: Notifying about selection change`, null, 3);\n        if (typeof this.chunkManager.onSelectionChange === 'function') {\n            this.chunkManager.onSelectionChange();\n        } else {\n            Debug.log(`ChunkVisualStateManager: No onSelectionChange handler defined`, null, 3);\n        }\n    }\n\n    /**\n     * Get performance metrics\n     * @returns {Object} Current metrics\n     */\n    getMetrics() {\n        return {...this._metrics};\n    }\n}\n","import { Debug } from '../../utils/Debug';\nimport { DOMUtils } from '../../utils/DOMUtils';\nimport Selectors from '../../constants/Selectors';\nimport { ChunkUtils } from '../../utils/ChunkUtils';\nimport { IconRegistry } from '../../utils/IconRegistry';\nimport { TranslationManager } from '../../utils/TranslationManager';\nimport { LoaderManager } from '../../utils/LoaderManager';\n\nimport { ChunkVisualStateManager } from './ChunkVisualStateManager';\n\n/**\n * Handles chunk selection operations\n */\nexport class ChunkSelectionHandler {\n    /**\n     * @param {ChunkManager} chunkManager - Parent chunk manager\n     */\n    constructor(chunkManager) {\n        this.chunkManager = chunkManager;\n        this.selections = {}; // Store selections separately\n        this.visualStateManager = new ChunkVisualStateManager(chunkManager);\n\n        // Define selection state constants to replace hardcoded strings\n        this.SELECTED = Selectors.DIFF.CHUNK_SELECTED.name();\n        this.UNSELECTED = Selectors.DIFF.CHUNK_UNSELECTED.name();\n\n        // Performance tracking metrics\n        this._performanceMetrics = {\n            lastOperationTime: 0,\n            operationCount: 0\n        };\n    }\n\n    /**\n     * Setup chunk selection handlers\n     */\n    setupChunkSelection() {\n        // Store the handler function with proper binding\n        this._boundClickHandler = (event) => this._handleClick(event);\n        this._boundCheckAllHandler = (event) => this._handleCheckAll(event);\n\n        // Clear existing handlers and setup new ones for ALL chunk elements\n        // by targeting data-chunk-id attribute instead of specific classes\n        DOMUtils.setupEventHandlers(\n            '[data-chunk-id]:not([data-chunk-id=\"\"])',\n            'click',\n            this._boundClickHandler,\n            {\n                removeExisting: true,\n                styles: { cursor: 'pointer' }\n            }\n        );\n\n        // Add \"Check All\" buttons to each pane and setup handlers\n        this._setupCheckAllButtons();\n\n        // Clear ChunkUtils cache to ensure fresh state\n        ChunkUtils.clearCache();\n\n        Debug.log('ChunkSelectionHandler: Selection handlers initialized for all chunk elements', null, 2);\n    }\n\n    /**\n     * Set up \"Check All\" buttons\n     * @private\n     */\n    _setupCheckAllButtons() {\n        // Find panes\n        const panes = this.chunkManager.diffViewer.container.querySelectorAll(Selectors.DIFF.PANE);\n\n        if (panes.length !== 2) {\n            Debug.log('ChunkSelectionHandler: Could not find both diff panes for \"Check All\" buttons', null, 2);\n            return;\n        }\n\n        const leftPane = panes[0];\n        const rightPane = panes[1];\n\n        // Create and add the check all buttons to the panes\n        this._createCheckAllButtonHeader(leftPane, 'left');\n        this._createCheckAllButtonHeader(rightPane, 'right');\n    }\n\n    /**\n     * Create a header with a \"Check All\" button for a pane\n     * @private\n     */\n    _createCheckAllButtonHeader(pane, side) {\n        // Get translation manager instance\n        const translationManager = TranslationManager.getInstance();\n\n        // Create header element\n        const header = document.createElement('div');\n        header.className = Selectors.DIFF.PANE_HEADER.name();\n\n        // Make header a flex container\n        header.classList.add('vdm-d-flex', 'vdm-justify-content-between', 'vdm-align-items-center');\n\n        // Get language information from DiffViewer\n        const language = this.chunkManager.diffViewer.runtimeProps.diffData.language || 'Text';\n\n        // Create language badge\n        const langBadge = document.createElement('span');\n        langBadge.className = 'vdm-badge vdm-badge--info';\n        langBadge.textContent = language;\n\n        // Create button element\n        const checkAllButton = document.createElement('button');\n        checkAllButton.className = `${Selectors.UTILITY.BUTTON.name()} ${Selectors.UTILITY.BUTTON_EXTRA_SMALL.name()} ${Selectors.UTILITY.BUTTON_SECONDARY.name()} ${Selectors.DIFF.CHECK_ALL_BTN.name()}`;\n        checkAllButton.setAttribute('data-side', side);\n        checkAllButton.setAttribute('data-icon-state', 'unchecked');\n        checkAllButton.title = `Select all changes from the ${side} pane`;\n        checkAllButton.style.display = 'inline-flex';\n        checkAllButton.style.alignItems = 'center';\n        checkAllButton.style.verticalAlign = 'middle';\n\n        // Create icon wrapper span\n        const iconWrapper = document.createElement('span');\n        iconWrapper.className = 'vdm-icon-wrapper';\n        iconWrapper.style.marginRight = '3px';\n        iconWrapper.style.display = 'inline-flex';\n        iconWrapper.style.alignItems = 'center';\n        iconWrapper.style.verticalAlign = 'middle';\n        iconWrapper.style.height = '14px';\n        iconWrapper.style.lineHeight = '1';\n\n        // Add checkbox-unchecked icon by default\n        const uncheckIcon = IconRegistry.createIcon('checkbox-unchecked', {\n            width: 14,\n            height: 14,\n            classes: 'vdm-icon-checkbox'\n        });\n\n        iconWrapper.appendChild(uncheckIcon);\n\n        // Create text node with a span wrapper for better alignment\n        const textSpan = document.createElement('span');\n        textSpan.style.display = 'inline-block';\n        textSpan.style.verticalAlign = 'middle';\n        textSpan.style.lineHeight = '1';\n        textSpan.appendChild(document.createTextNode(translationManager.get('checkAll')));\n\n        // Add icon and text to button\n        checkAllButton.appendChild(iconWrapper);\n        checkAllButton.appendChild(textSpan);\n\n        // Add language badge and button to header\n        header.appendChild(langBadge);\n        header.appendChild(checkAllButton);\n\n        // Add header as the first child of the pane\n        pane.insertBefore(header, pane.firstChild);\n\n        // Add click event handler\n        checkAllButton.addEventListener('click', this._boundCheckAllHandler);\n    }\n\n    /**\n     * Handle click on \"Check All\" button\n     * @private\n     */\n    _handleCheckAll(event) {\n        const button = event.currentTarget;\n        const side = button.getAttribute('data-side');\n        const iconState = button.getAttribute('data-icon-state');\n        const oppositeButton = this._getOppositeButton(side);\n\n        // Get translation manager and loader manager\n        const translationManager = TranslationManager.getInstance();\n        const loaderManager = LoaderManager.getInstance();\n\n        if (!side) return;\n\n        // Show loading indicator for batch operations\n        const message = translationManager.get('processingChunks') || 'Processing chunks...';\n        const loaderId = loaderManager.showLoader(message, {\n            fullscreen: true,\n            zIndex: 9999\n        });\n\n        // Also update button state for visual feedback\n        this._setButtonProcessingState(button, true);\n\n        // Track performance\n        const startTime = performance.now();\n\n        // Use a small timeout to allow the loader to be shown\n        setTimeout(() => {\n            // If this button is already checked, uncheck everything\n            if (iconState === 'checked') {\n                Debug.log('ChunkSelectionHandler: Unchecking all selections', null, 2);\n\n                // Reset this button\n                this._toggleButtonIconState(button, 'checked');\n\n                // Reset opposite button if it's checked\n                if (oppositeButton && oppositeButton.getAttribute('data-icon-state') === 'checked') {\n                    this._toggleButtonIconState(oppositeButton, 'checked');\n                }\n\n                // Clear all selections\n                this.clearAllSelections(true); // Use optimized batch version\n            }\n            // If opposite button is checked, toggle both sides\n            else if (oppositeButton && oppositeButton.getAttribute('data-icon-state') === 'checked') {\n                // Uncheck the opposite side\n                this._toggleButtonIconState(oppositeButton, 'checked');\n\n                // Check this side\n                this._toggleButtonIconState(button, 'unchecked');\n\n                // Select all on this side\n                this.selectAllOnSide(side, true); // Use optimized batch version\n            }\n            // Default case: check this side\n            else {\n                this._toggleButtonIconState(button, 'unchecked');\n                this.selectAllOnSide(side, true); // Use optimized batch version\n            }\n\n            // Reset button state\n            this._setButtonProcessingState(button, false);\n\n            // Hide loader\n            loaderManager.hideLoader(loaderId);\n\n            // Track performance metrics\n            this._recordPerformanceMetrics(startTime);\n        }, 50);\n    }\n\n    /**\n     * Set button to processing state to give visual feedback during long operations\n     * @private\n     */\n    _setButtonProcessingState(button, isProcessing) {\n        if (isProcessing) {\n            button.classList.add('processing');\n            button.style.opacity = '0.8';\n            button.style.cursor = 'wait';\n        } else {\n            button.classList.remove('processing');\n            button.style.opacity = '';\n            button.style.cursor = '';\n        }\n    }\n\n    /**\n     * Record performance metrics for optimization analysis\n     * @private\n     */\n    _recordPerformanceMetrics(startTime) {\n        const endTime = performance.now();\n        const operationTime = endTime - startTime;\n\n        this._performanceMetrics.lastOperationTime = operationTime;\n        this._performanceMetrics.operationCount++;\n\n        // Log cache statistics to evaluate caching effectiveness\n        const cacheStats = ChunkUtils.getCacheStats();\n        const elementHitRatio = cacheStats.elementCacheHits /\n            (cacheStats.elementCacheHits + cacheStats.elementCacheMisses) * 100 || 0;\n        const iconHitRatio = cacheStats.iconMarkerCacheHits /\n            (cacheStats.iconMarkerCacheHits + cacheStats.iconMarkerCacheMisses) * 100 || 0;\n\n        Debug.log(`ChunkSelectionHandler: Operation completed in ${operationTime.toFixed(2)}ms`,\n            {\n                totalOperations: this._performanceMetrics.operationCount,\n                cacheStats: {\n                    elementCacheHits: cacheStats.elementCacheHits,\n                    elementCacheMisses: cacheStats.elementCacheMisses,\n                    elementHitRatio: `${elementHitRatio.toFixed(1)}%`,\n                    iconMarkerCacheHits: cacheStats.iconMarkerCacheHits,\n                    iconMarkerCacheMisses: cacheStats.iconMarkerCacheMisses,\n                    iconHitRatio: `${iconHitRatio.toFixed(1)}%`\n                }\n            }, 2);\n    }\n\n    /**\n     * Get the button for the opposite side\n     * @private\n     * @param {string} currentSide - Current side ('left' or 'right')\n     * @returns {Element|null} - The opposite side button element or null if not found\n     */\n    _getOppositeButton(currentSide) {\n        const oppositeSide = currentSide === 'left' ? 'right' : 'left';\n        return this.chunkManager.diffViewer.container.querySelector(\n            `.${Selectors.DIFF.CHECK_ALL_BTN.name()}[data-side=\"${oppositeSide}\"]`\n        );\n    }\n\n    /**\n     * Toggle button icon state between checked and unchecked\n     * @private\n     * @param {Element} button - The button element\n     * @param {string} currentState - Current icon state ('checked' or 'unchecked')\n     */\n    _toggleButtonIconState(button, currentState) {\n        const iconWrapper = button.querySelector('.vdm-icon-wrapper');\n        if (!iconWrapper) return;\n\n        // Clear current icon\n        iconWrapper.innerHTML = '';\n\n        // Determine new state based on current state\n        let newIconState;\n        if (currentState === 'unchecked') {\n            newIconState = 'checked';\n            iconWrapper.appendChild(IconRegistry.createIcon('checkbox-checked', {\n                width: 14,\n                height: 14,\n                classes: 'vdm-icon-checkbox'\n            }));\n        } else {\n            newIconState = 'unchecked';\n            iconWrapper.appendChild(IconRegistry.createIcon('checkbox-unchecked', {\n                width: 14,\n                height: 14,\n                classes: 'vdm-icon-checkbox'\n            }));\n        }\n\n        // Update icon state attribute\n        button.setAttribute('data-icon-state', newIconState);\n    }\n\n    /**\n     * Select all chunks on a specific side\n     * @param {string} side - 'left' or 'right'\n     * @param {boolean} useBatch - Whether to use batching for large files (default: false for backward compatibility)\n     */\n    selectAllOnSide(side, useBatch = false) {\n        const oppositeSide = side === 'left' ? 'right' : 'left';\n\n        Debug.log(`ChunkSelectionHandler: Selecting all chunks on ${side} side${useBatch ? ' (batched)' : ''}`, null, 2);\n\n        // Get all chunks that need resolution\n        const conflictChunks = this.chunkManager.chunks.filter(chunk =>\n            chunk.conflict || chunk.type === 'replace' || chunk.type === 'add' || chunk.type === 'delete'\n        );\n\n        // Check if we should use batching based on number of chunks\n        const largeDiff = conflictChunks.length > 20; // Threshold for considering a diff as \"large\"\n        useBatch = useBatch || largeDiff;\n\n        // Show loader for large operations\n        let loaderId = null;\n        if (useBatch && conflictChunks.length > 50) {\n            const translationManager = TranslationManager.getInstance();\n            const loaderManager = LoaderManager.getInstance();\n            const message = translationManager.get('processingChunks') || 'Processing chunks...';\n            loaderId = loaderManager.showLoader(message, {\n                fullscreen: true,\n                zIndex: 9999\n            });\n        }\n\n        // Start tracking performance\n        const startTime = performance.now();\n\n        if (useBatch) {\n            // First update internal state for all chunks\n            conflictChunks.forEach(chunk => {\n                // Update selections object\n                this.selections[chunk.id] = side;\n\n                // Sync with diffConfig for compatibility\n                this._syncWithDiffConfig(chunk.id, side);\n            });\n\n            // Get all chunks by side for efficient batch processing\n            const chunksBySide = new Map();\n\n            // Group all elements by chunk ID and side for batch processing\n            conflictChunks.forEach(chunk => {\n                // Toggle visual state with batching enabled\n                this.visualStateManager.updateVisualState(chunk.id, side, this.SELECTED, true);\n                this.visualStateManager.updateVisualState(chunk.id, oppositeSide, this.UNSELECTED, true);\n\n                // Collect chunk elements for resolved status update\n                if (!chunksBySide.has(chunk.id)) {\n                    const elements = ChunkUtils.getChunkElements(chunk.id);\n                    chunksBySide.set(chunk.id, elements);\n                }\n            });\n\n            // Process visual updates in a single batch\n            this.visualStateManager.applyBatch(false); // Don't notify yet\n\n            // Apply resolved status to all chunks in a separate batch\n            requestAnimationFrame(() => {\n                // Ensure the icon markers are updated by forcing a redraw\n                this._refreshIconStates(side, conflictChunks);\n\n                chunksBySide.forEach((elements) => {\n                    elements.forEach(element => {\n                        element.classList.add(Selectors.STATUS.RESOLVED.name());\n                        element.classList.remove(Selectors.STATUS.UNRESOLVED.name());\n                    });\n                });\n\n                // Update navigation counter after all visual changes\n                this._updateNavigationCounter();\n\n                // Now notify about selection change\n                if (typeof this.chunkManager.onSelectionChange === 'function') {\n                    this.chunkManager.onSelectionChange();\n                }\n\n                // Hide loader if it was shown\n                if (loaderId) {\n                    const loaderManager = LoaderManager.getInstance();\n                    loaderManager.hideLoader(loaderId);\n                }\n\n                // Record performance metrics after all operations\n                this._recordPerformanceMetrics(startTime);\n            });\n        } else {\n            // Legacy approach - process one by one\n            conflictChunks.forEach(chunk => {\n                this.toggleChunkSelection(chunk.id, side, this.SELECTED);\n                this.toggleChunkSelection(chunk.id, oppositeSide, this.UNSELECTED);\n            });\n\n            // Callback to notify of selection change\n            if (typeof this.chunkManager.onSelectionChange === 'function') {\n                this.chunkManager.onSelectionChange();\n            }\n\n            // Record performance metrics\n            this._recordPerformanceMetrics(startTime);\n        }\n    }\n\n    /**\n     * Force refresh icon states for chunks\n     * This ensures icon markers are correctly updated during batch operations\n     * @private\n     */\n    _refreshIconStates(selectedSide, chunks) {\n        const oppositeSide = selectedSide === 'left' ? 'right' : 'left';\n\n        // Force all chunks to properly show their selection state visually\n        chunks.forEach(chunk => {\n            // Get elements for both sides\n            const selectedElements = ChunkUtils.getChunkElements(chunk.id, selectedSide);\n            const oppositeElements = ChunkUtils.getChunkElements(chunk.id, oppositeSide);\n\n            // Handle selected side\n            if (selectedElements.length > 0) {\n                // Sort by line number to get first element for icon marker\n                const sortedElements = ChunkUtils.sortElementsByLineNumber(selectedElements);\n                const firstElement = sortedElements[0];\n\n                if (firstElement) {\n                    const lineId = firstElement.dataset.lineId;\n                    if (lineId) {\n                        // Force direct icon marker update with the correct side\n                        const iconMarker = ChunkUtils.getIconMarker(lineId);\n                        if (iconMarker) {\n                            // Remove all state classes first\n                            iconMarker.classList.remove(\n                                Selectors.DIFF.CHUNK_SELECTED.name(),\n                                Selectors.DIFF.CHUNK_UNSELECTED.name(),\n                                Selectors.ICONS.SELECT.name(),\n                                Selectors.ICONS.SELECT_LEFT.name(),\n                                Selectors.ICONS.SELECT_RIGHT.name()\n                            );\n\n                            // Add selected state\n                            iconMarker.classList.add(Selectors.DIFF.CHUNK_SELECTED.name());\n\n                            // Add the side-specific icon marker\n                            if (selectedSide === 'left') {\n                                iconMarker.classList.add(Selectors.ICONS.SELECT_LEFT.name());\n                            } else {\n                                iconMarker.classList.add(Selectors.ICONS.SELECT_RIGHT.name());\n                            }\n                        }\n                    }\n                }\n\n                // Apply the selected class to all elements for this chunk on the selected side\n                selectedElements.forEach(element => {\n                    // Remove all selection classes first\n                    element.classList.remove(\n                        Selectors.DIFF.CHUNK_SELECTED.name(),\n                        Selectors.DIFF.CHUNK_UNSELECTED.name()\n                    );\n\n                    // Add selected class\n                    element.classList.add(Selectors.DIFF.CHUNK_SELECTED.name());\n\n                    // Update the parent row too\n                    const row = ChunkUtils.getParentRow(element);\n                    if (row) {\n                        row.classList.remove(\n                            Selectors.DIFF.CHUNK_SELECTED.name(),\n                            Selectors.DIFF.CHUNK_UNSELECTED.name()\n                        );\n                        row.classList.add(Selectors.DIFF.CHUNK_SELECTED.name());\n                    }\n                });\n            }\n\n            // Handle opposite side\n            if (oppositeElements.length > 0) {\n                // Clear any icon markers on the opposite side\n                const sortedOppositeElements = ChunkUtils.sortElementsByLineNumber(oppositeElements);\n                const firstOppositeElement = sortedOppositeElements[0];\n\n                if (firstOppositeElement) {\n                    const oppositeLineId = firstOppositeElement.dataset.lineId;\n                    if (oppositeLineId) {\n                        const oppositeIconMarker = ChunkUtils.getIconMarker(oppositeLineId);\n                        if (oppositeIconMarker) {\n                            // Clear all selection related classes\n                            oppositeIconMarker.classList.remove(\n                                Selectors.DIFF.CHUNK_SELECTED.name(),\n                                Selectors.DIFF.CHUNK_UNSELECTED.name(),\n                                Selectors.ICONS.SELECT.name(),\n                                Selectors.ICONS.SELECT_LEFT.name(),\n                                Selectors.ICONS.SELECT_RIGHT.name()\n                            );\n\n                            // DETERMINE IF THIS SHOULD BE A PLACEHOLDER\n                            // Apply the same placeholder logic used in _updateOppositeMarker\n\n                            // Check if the opposite element has placeholder attributes\n                            const hasPlaceholder = firstOppositeElement.dataset.hasPlaceholder === 'true';\n                            const isPlaceholderType = firstOppositeElement.classList.contains(Selectors.DIFF.LINE_PLACEHOLDER.name());\n                            const wasPlaceholder = oppositeIconMarker.classList.contains(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n\n                            // Find the corresponding selected element for the same line number\n                            const lineNumber = oppositeLineId.split('-')[1];\n                            const selectedLineId = `${selectedSide}-${lineNumber}`;\n                            const selectedElement = document.querySelector(`[data-line-id=\"${selectedLineId}\"]`);\n\n                            // Check if the selected element indicates this should be a placeholder\n                            const selectedHasPlaceholder = selectedElement?.dataset.hasPlaceholder === 'true';\n                            const selectedIsPlaceholderType = selectedElement?.classList.contains(Selectors.DIFF.LINE_PLACEHOLDER.name());\n\n                            // If any of these conditions are true, this should be a placeholder\n                            if (hasPlaceholder || isPlaceholderType || wasPlaceholder ||\n                                selectedHasPlaceholder || selectedIsPlaceholderType) {\n                                // Set as placeholder\n                                oppositeIconMarker.classList.add(Selectors.ICONS.MARKER_PLACEHOLDER.name());\n                                Debug.log(`ChunkSelectionHandler: Set opposite marker ${oppositeLineId} as placeholder during batch refresh`, null, 3);\n                            } else {\n                                // Normal unselected state\n                                oppositeIconMarker.classList.add(Selectors.DIFF.CHUNK_UNSELECTED.name());\n                            }\n                        }\n                    }\n                }\n\n                // Apply the unselected class to all elements on the opposite side\n                oppositeElements.forEach(element => {\n                    // Remove all selection classes first\n                    element.classList.remove(\n                        Selectors.DIFF.CHUNK_SELECTED.name(),\n                        Selectors.DIFF.CHUNK_UNSELECTED.name()\n                    );\n\n                    // Add unselected class\n                    element.classList.add(Selectors.DIFF.CHUNK_UNSELECTED.name());\n\n                    // Update the parent row too\n                    const row = ChunkUtils.getParentRow(element);\n                    if (row) {\n                        row.classList.remove(\n                            Selectors.DIFF.CHUNK_SELECTED.name(),\n                            Selectors.DIFF.CHUNK_UNSELECTED.name()\n                        );\n                        row.classList.add(Selectors.DIFF.CHUNK_UNSELECTED.name());\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Handle click event on chunk\n     * @private\n     */\n    _handleClick(event) {\n        const element = event.currentTarget;\n        const chunkId = element.getAttribute('data-chunk-id');\n        const side = element.getAttribute('data-side');\n\n        Debug.log(`ChunkSelectionHandler: Click detected on side ${side} for chunk ${chunkId}`, {\n            element: element.outerHTML.substring(0, 100) + '...' // Log first 100 chars of HTML\n        }, 3);\n\n        if (chunkId && side) {\n            // Check if the chunk is already selected on this side\n            const isAlreadySelected = this.selections[chunkId] === side &&\n                element.classList.contains(Selectors.DIFF.CHUNK_SELECTED.name());\n\n            if (isAlreadySelected) {\n                // Unselect this chunk\n                Debug.log(`ChunkSelectionHandler: Unselecting chunk ${chunkId} as it was already selected`, null, 3);\n\n                // Remove from selections\n                delete this.selections[chunkId];\n\n                // Remove from diffConfig if it exists\n                if (this.chunkManager.diffViewer?.diffConfig?.chunkSelections) {\n                    delete this.chunkManager.diffViewer.diffConfig.chunkSelections[chunkId];\n                }\n\n                // Reset visual state for both sides\n                this.visualStateManager.resetVisualState(chunkId);\n\n                // Remove resolved status from all elements with this chunk ID\n                const chunkElements = ChunkUtils.getChunkElements(chunkId);\n                chunkElements.forEach(element => {\n                    element.classList.remove(Selectors.STATUS.RESOLVED.name());\n                    element.classList.add(Selectors.STATUS.UNRESOLVED.name());\n                });\n\n                // Update navigation counter\n                this._updateNavigationCounter();\n\n                // Notify about selection change\n                if (typeof this.chunkManager.onSelectionChange === 'function') {\n                    this.chunkManager.onSelectionChange();\n                }\n            } else {\n                // Get the opposite side\n                const oppositeSide = side === 'left' ? 'right' : 'left';\n\n                // Debug before toggling\n                Debug.log(`ChunkSelectionHandler: Toggling chunk ${chunkId}`, {\n                    selectedSide: side,\n                    oppositeSide: oppositeSide\n                }, 3);\n\n                // Toggle both sides\n                this.toggleChunkSelection(chunkId, side, this.SELECTED);\n                this.toggleChunkSelection(chunkId, oppositeSide, this.UNSELECTED);\n            }\n        }\n    }\n\n    /**\n     * Toggle selection state of a chunk side\n     * @param {string} chunkId - Chunk ID\n     * @param {string} side - 'left' or 'right'\n     * @param {string} state - Selection state constant (SELECTED or UNSELECTED)\n     * @param {boolean} batch - Whether to use batching (default: false for backward compatibility)\n     */\n    toggleChunkSelection(chunkId, side, state, batch = false) {\n        // Update the selections object\n        if (state === this.SELECTED) {\n            this.selections[chunkId] = side;\n\n            // Sync with diffConfig for compatibility\n            this._syncWithDiffConfig(chunkId, side);\n\n            // Update the navigation counter\n            this._updateNavigationCounter();\n\n            if (!batch) {\n                // Add resolved status to all elements with this chunk ID\n                const chunkElements = ChunkUtils.getChunkElements(chunkId);\n                chunkElements.forEach(element => {\n                    element.classList.add(Selectors.STATUS.RESOLVED.name());\n                    element.classList.remove(Selectors.STATUS.UNRESOLVED.name());\n                });\n            }\n        }\n\n        // Update visual selection using the specialized component\n        this.visualStateManager.updateVisualState(chunkId, side, state, batch);\n    }\n\n    /**\n     * Sync selection with diffConfig\n     * @private\n     */\n    _syncWithDiffConfig(chunkId, side) {\n        if (this.chunkManager.diffViewer?.diffConfig?.chunkSelections) {\n            this.chunkManager.diffViewer.diffConfig.chunkSelections[chunkId] = side;\n        }\n    }\n\n    /**\n     * Update navigation counter\n     * @private\n     */\n    _updateNavigationCounter() {\n        if (this.chunkManager.diffViewer?.diffNavigator) {\n            this.chunkManager.diffViewer.diffNavigator.updateCounter();\n        }\n    }\n\n    /**\n     * Get all selections\n     * @returns {Object} Map of chunkId to selected side\n     */\n    getSelections() {\n        return {...this.selections};\n    }\n\n    /**\n     * Check if a chunk is resolved (has selection)\n     * @param {string} chunkId - Chunk ID to check\n     * @returns {boolean} True if resolved\n     */\n    isChunkResolved(chunkId) {\n        return !!this.selections[chunkId];\n    }\n\n    /**\n     * Get unresolved chunk count\n     * @returns {number} Number of unresolved chunks\n     */\n    getUnresolvedCount() {\n        const conflictChunks = this.chunkManager.chunks.filter(c => c.conflict);\n        return conflictChunks.length - Object.keys(this.selections).length;\n    }\n\n    /**\n     * Clear all selections from both sides\n     * @param {boolean} useBatch - Whether to use batching for performance (default: false for backward compatibility)\n     */\n    clearAllSelections(useBatch = false) {\n        // Get all chunks that need resolution\n        const conflictChunks = this.chunkManager.chunks.filter(chunk =>\n            chunk.conflict || chunk.type === 'replace' || chunk.type === 'add' || chunk.type === 'delete'\n        );\n\n        // Check if we should use batching based on number of chunks\n        const largeDiff = conflictChunks.length > 20; // Threshold for considering a diff as \"large\"\n        useBatch = useBatch || largeDiff;\n\n        // Show loader for large operations\n        let loaderId = null;\n        if (useBatch) {\n            const selectedChunks = conflictChunks.filter(chunk => this.isChunkResolved(chunk.id));\n            if (selectedChunks.length > 50) { // Only show loader for large batches\n                const translationManager = TranslationManager.getInstance();\n                const loaderManager = LoaderManager.getInstance();\n                const message = translationManager.get('processingChunks') || 'Processing chunks...';\n                loaderId = loaderManager.showLoader(message, {\n                    fullscreen: true,\n                    zIndex: 9999\n                });\n            }\n        }\n\n        // Start tracking performance\n        const startTime = performance.now();\n\n        if (useBatch) {\n            Debug.log(`ChunkSelectionHandler: Clearing all selections using batch operations`, null, 2);\n\n            // First update internal state\n            const selectedChunks = conflictChunks.filter(chunk => this.isChunkResolved(chunk.id));\n\n            // Use a set for faster lookups\n            const selectedChunkIds = new Set(selectedChunks.map(chunk => chunk.id));\n\n            // Collect all elements that need updating\n            const elementsToUpdate = new Map();\n\n            // Remove from internal objects efficiently\n            selectedChunkIds.forEach(chunkId => {\n                // Remove from selections object\n                delete this.selections[chunkId];\n\n                // Remove from diffConfig if it exists\n                if (this.chunkManager.diffViewer?.diffConfig?.chunkSelections) {\n                    delete this.chunkManager.diffViewer.diffConfig.chunkSelections[chunkId];\n                }\n\n                // Queue visual state reset with batching\n                this.visualStateManager.resetVisualState(chunkId, true);\n\n                // Collect elements for later class updates\n                const elements = ChunkUtils.getChunkElements(chunkId);\n                elementsToUpdate.set(chunkId, elements);\n            });\n\n            // Apply all visual updates in a batch\n            this.visualStateManager.applyBatch(false); // Don't notify yet\n\n            // Update element status classes in a separate batch\n            requestAnimationFrame(() => {\n                elementsToUpdate.forEach((elements, _chunkId) => {\n                    elements.forEach(element => {\n                        element.classList.remove(Selectors.STATUS.RESOLVED.name());\n                        element.classList.add(Selectors.STATUS.UNRESOLVED.name());\n                    });\n                });\n\n                // Update navigation counter after all visual changes\n                this._updateNavigationCounter();\n\n                // Now notify about selection change\n                if (typeof this.chunkManager.onSelectionChange === 'function') {\n                    this.chunkManager.onSelectionChange();\n                }\n\n                // Hide loader if it was shown\n                if (loaderId) {\n                    const loaderManager = LoaderManager.getInstance();\n                    loaderManager.hideLoader(loaderId);\n                }\n\n                // Record performance metrics after all operations\n                this._recordPerformanceMetrics(startTime);\n            });\n        } else {\n            // Legacy approach - clear selection for each chunk individually\n            conflictChunks.forEach(chunk => {\n                // Skip chunks that aren't selected\n                if (!this.isChunkResolved(chunk.id)) return;\n\n                // Remove resolved status from all elements with this chunk ID\n                const chunkElements = ChunkUtils.getChunkElements(chunk.id);\n                chunkElements.forEach(element => {\n                    element.classList.remove(Selectors.STATUS.RESOLVED.name());\n                    element.classList.add(Selectors.STATUS.UNRESOLVED.name());\n                });\n\n                // Remove from selections object\n                delete this.selections[chunk.id];\n\n                // Remove from diffConfig if it exists\n                if (this.chunkManager.diffViewer?.diffConfig?.chunkSelections) {\n                    delete this.chunkManager.diffViewer.diffConfig.chunkSelections[chunk.id];\n                }\n\n                // Reset visual state for both sides\n                this.visualStateManager.resetVisualState(chunk.id);\n            });\n\n            // Update navigation counter\n            this._updateNavigationCounter();\n\n            // Callback to notify of selection change\n            if (typeof this.chunkManager.onSelectionChange === 'function') {\n                this.chunkManager.onSelectionChange();\n            }\n\n            // Record performance metrics\n            this._recordPerformanceMetrics(startTime);\n        }\n    }\n}\n"],"names":["Debug","MergeContentFormatter","DOMUtils","StringUtils","CopyButton","Selectors","TranslationManager","LoaderManager","MergePreviewManager","mergeHandler","_classCallCheck","diffViewer","modalManager","_createClass","key","value","initialize","setupPreviewButton","log","previewButton","document","getElementById","MERGE","BUTTON_PREVIEW","name","getMergedResultButton","GET_MERGED_RESULT_BTN","buttonToUse","warn","newBtn","cloneNode","parentNode","replaceChild","innerHTML","trim","getIconHtml","classes","addEventListener","handlePreviewClick","bind","concat","translationManager","getInstance","loadingMessage","get","loaderManager","loaderId","showLoader","fullscreen","zIndex","_this$diffViewer$runt","mergedContent","getMergedContent","fileToMerge","runtimeProps","filepath","extension","split","pop","toLowerCase","formattedContent","formatPreview","hideLoader","setContent","MODAL","PREVIEW_FILENAME","PREVIEW","PREVIEW_CONTENT_ID","controlsContainer","createElement","classList","add","UTILITY","FLEX","JUSTIFY_CONTENT_BETWEEN","MARGIN_TOP_2","PADDING_2","messageArea","id","ALIGN_ITEMS_CENTER","appendChild","open","applySyntaxHighlighting","addCopyButtonsToPreview","error","showPreviewError","window","hljs","_DOMUtils$getElement","preElement","getElement","querySelector","codeElement","highlightElement","getAttribute","lineNumbersBlock","errorMessage","Error","message","String","escapedError","escapeHtml","showMessage","className","NavigationUtils","ConflictNavigator","navigator","_getUnresolvedChunkInfo","unresolvedElements","Array","from","querySelectorAll","filter","el","contains","STATUS","UNRESOLVED","length","unresolvedChunkIds","count","_toConsumableArray","Set","map","navigateToFirstConflict","_this$_getUnresolvedC","chunks","chunkManager","firstUnresolvedIndex","findIndex","chunk","includes","navigateToChunk","navigateToNextConflict","currentIndex","currentChunkIndex","_this$_getUnresolvedC2","nextIndex","_findNextChunkIndex","indexMap","_createChunkIndexMap","size","indices","values","sort","a","b","_iterator","_createForOfIteratorHelper","_step","s","n","done","index","err","e","f","navigateToPrevConflict","_this$_getUnresolvedC3","prevIndex","_findPrevChunkIndex","i","Map","forEach","set","chunkElement","chunkElements","paneContent","closest","DIFF","PANE_CONTENT","scrollElementIntoView","addHighlightEffect","navigationCounter","updateCounter","ChunkRenderer","renderChunks","startTime","performance","now","leftHtml","buildDiffPaneHtml","oldContent","rightHtml","newContent","container","PANES_CONTAINER","PANE","PANE_LEFT","PANE_RIGHT","endTime","duration","toFixed","lines","side","chunksWithPlaceholders","line","type","chunkId","html","TABLE_WRAPPER","CODE","TABLE","lineCounter","_iterator2","_step2","_renderDiffLine","lineNumber","undefined","chunkType","find","c","LINE_NUMBER","hasPlaceholder","has","_renderPlaceholderLine","_renderContentLine","additionalClass","CHUNK","conflict","LINE_CONTENT","LINE_CONTENT_EMPTY","LINE_PLACEHOLDER","placeholderType","lineContent","isEmpty","_getChunkClass","LINE_EMPTY","displayContent","replace","styleAttr","LINE_DELETE","LINE_ADD","cls","LINE_REPLACE_LEFT","LINE_REPLACE_RIGHT","ChunkUtils","MergeContentGenerator","extractChunkLines","contentArray","linesCount","totalContentLines","sampleLines","slice","generateMergedContent","selections","totalChunks","Object","keys","generateFileContent","mergedLines","oldChunkLines","newChunkLines","push","processedChunks","selectedSide","chunkLines","chunkLine","totalMergedLines","l","_l$line","substring","totalLines","contentLength","generateFileFromLines","_regeneratorRuntime","t","r","prototype","hasOwnProperty","o","defineProperty","Symbol","iterator","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","_toPrimitive","toPrimitive","Number","AlertManager","MergeOperationHandler","_proceedWithMerge","_callee","mergeType","fileRefId","oldFileRefId","result","resultContainer","alertManager","alertElement","_resultContainer","_alertManager","_alertElement","_resultContainer2","_alertManager2","_alertElement2","_callee$","_context","getRuntimeProps","success","applyMerge","remove","showSuccess","timeout","translate","scrollToMergeResult","showError","t0","proceedWithMerge","_x","_applyMerge","_callee2","wasBeautified","formParams","endpoint","response","_callee2$","_context2","JSON","stringify","isContentBeautified","action","content","getEndpoint","fetch","headers","body","URLSearchParams","json","_x2","_x3","resultElement","scrollIntoView","behavior","block","NavigationCounter","counterElement","prevButton","nextButton","setCounterElement","element","setButtons","_this","conflictCount","activeConflicts","position","textContent","title","disabled","NavigationUIBuilder","createNavigationUI","NAVIGATION","CONTAINER","panes","_createControls","insertBefore","counter","COUNTER","PREV_BUTTON","NEXT_BUTTON","navChunk","NAV_CHUNK","COUNTER_ELEMENT","BUTTON","BUTTON_FLAT","BUTTON_SMALL","destroy","newPrevButton","newNextButton","BaseSingleton","instance","ModalManager","_BaseSingleton","options","_callSuper","_isFirstInstance","_possibleConstructorReturn","_objectSpread","debug","translations","modals","activeModal","initialized","_inherits","initModals","createModal","CONFIRM","contentId","MESSAGE","contentClass","PADDING_3","footerButtons","CONTINUE_BTN","text","BUTTON_PRIMARY","MARGIN_END_2","MERGE_BTN","BUTTON_WARNING","PREVIEW_CONTENT","headerClass","HEADER_FIXED","modalClass","CONFLICT_MODAL","_setupEventListeners","config","modalId","HEADER","modalHtml","attr","entries","_ref","_ref2","_slicedToArray","CONTENT","TITLE","CLOSE","FOOTER","button","isCloseButton","iconName","classNames","some","iconHtml","BUTTON_SECONDARY","data","_ref3","_ref4","_appendToBody","isOpen","modalElement","setFullscreenSize","events","_ref5","_ref6","selector","elements","_ref7","_ref8","eventName","handler","_getIconNameForButton","buttonText","buttonClass","modal","tempContainer","firstElementChild","backdrop","BACKDROP","style","display","_this2","event","target","matches","close","register","registerBeforeOpenCallback","callback","beforeOpenCallbacks","_showModal","setTimeout","opacity","displayBefore","overflow","_hideModal","_this3","contentSelector","contentType","contentPreview","targetSelector","_container","startsWith","found","containsPre","hasPreElements","innerHtmlLength","Element","elementType","tagName","elementId","FULLSCREEN","headerHeight","offsetHeight","height","createCopyModal","codeText","_this4","CODE_COPY","COPY_CONTENT","FIXED_FOOTER","safeText","_escapeHtml","COPY","DIALOG","INSTRUCTIONS","TEXTAREA","TEXTAREA_ELEM","ACTIONS","textarea","copyBtn","select","_this5","_navigator$clipboard","clipboard","writeText","_showCopySuccess","_err","execCommand","_showCopyFailure","BUTTON_SUCCESS","BUTTON_DANGER","createAndOpenModal","Date","createConfirmationModal","_this6","cancelText","confirmText","_defineProperty","click","onConfirm","onCancel","createAlertModal","_this7","alertClass","ALERT","ALERT_PREFIX","ALERT_INFO","onClose","alertContent","MergeUIController","mergeDestination","mergeToggleBtn","mergeToggleIcon","mergeToggleText","initMergeDestinationToggle","setupModalButtons","setupApplyMergeButton","DESTINATION_DROPDOWN","DESTINATION_TOGGLE","setAttribute","populateMergeDestinations","savedDestination","localStorage","getItem","valueExists","selectedIndex","setupMergeToggleEvents","_diffData$new","_runtimeProps$filepat","_diffData$old","diffData","newFileName","filename","oldFileName","old","newFile","oldFile","newFileWithoutExt","lastIndexOf","oldFileWithoutExt","newFileExt","oldFileExt","newMergedFile","oldMergedFile","getConfig","saveOptions","saveToOriginal","saveWithSuffix","saveToOld","saveToOldWithSuffix","saveToBoth","saveToBothWithSuffix","optionCount","createAndAppendElement","attributes","toggleHandler","preventDefault","stopPropagation","focus","showPicker","clickEvent","MouseEvent","bubbles","cancelable","view","dispatchEvent","changeHandler","updateMergeToggle","setItem","newToggleBtn","newMergeDestination","firstChild","cursor","dropdownIcon","MARGIN_START_2","width","paddingRight","appearance","borderColor","newFileColorClass","oldFileColorClass","bothFilesColorClass","newFileBtnClass","oldFileBtnClass","bothFilesBtnClass","BUTTON_INFO","colorClass","iconClasses","MARGIN_END_1","applyButton","BUTTON_APPLY","previewModalId","highlightUnresolvedChunks","getMergeType","continueBtn","mergeBtn","onclick","mergeControlsActions","CONTROLS_ACTIONS","toString","destinationDropdown","toggleButton","form","justifyContent","destinationContainer","handleApplyMerge","Event","unresolvedCount","countUnresolvedConflicts","showConflictModal","conflictChunks","formatUnresolvedCount","newContinueBtn","newMergeBtn","_this$mergeDestinatio","chunkIndex","indexOf","diffNavigator","setupLocalOnlyControls","getMergedResultText","getMergedResultTooltip","getMergedResultBtn","downloadIconHtml","buttonContainer","spacer","flex","ChunkVisualStateManager","_pendingOperations","_isBatching","_metrics","lastBatchSize","lastBatchTime","preloadChunks","updateVisualState","state","batch","getChunkElements","sortedElements","sortElementsByLineNumber","oppositeSide","firstElement","_applyStateToElements","_updateIconMarker","_updateOppositeMarker","_notifySelectionChange","_element$dataset","dataset","lineId","lineIdParts","oppositeLineId","oppositeMarker","getIconMarker","currentClasses","CHUNK_SELECTED","CHUNK_UNSELECTED","ICONS","SELECT","SELECT_LEFT","SELECT_RIGHT","wasPlaceholder","MARKER_PLACEHOLDER","resetVisualState","iconMarkers","getChunkIconMarkers","_applyResetToElements","applyBatch","notify","batchSize","requestAnimationFrame","updateOperations","resetOperations","operation","_processBatchedResets","_processBatchedUpdates","processingTime","operations","resetOps","updateOps","msPerOperation","allElements","allIconMarkers","elementsByState","firstElementsByState","_elementsByState$stat","chunksMap","_chunkId","getBoundingClientRect","removeClasses","addClass","rows","_element$classList","PLACEHOLDER","row","getParentRow","_row$classList","iconRemoveClasses","_el$classList","_row$classList2","marker","_marker$classList","isPlaceholder","iconMarker","onSelectionChange","getMetrics","IconRegistry","ChunkSelectionHandler","visualStateManager","SELECTED","UNSELECTED","_performanceMetrics","lastOperationTime","operationCount","setupChunkSelection","_boundClickHandler","_handleClick","_boundCheckAllHandler","_handleCheckAll","setupEventHandlers","removeExisting","styles","_setupCheckAllButtons","clearCache","leftPane","rightPane","_createCheckAllButtonHeader","pane","header","PANE_HEADER","language","langBadge","checkAllButton","BUTTON_EXTRA_SMALL","CHECK_ALL_BTN","alignItems","verticalAlign","iconWrapper","marginRight","lineHeight","uncheckIcon","createIcon","textSpan","createTextNode","currentTarget","iconState","oppositeButton","_getOppositeButton","_setButtonProcessingState","_toggleButtonIconState","clearAllSelections","selectAllOnSide","_recordPerformanceMetrics","isProcessing","operationTime","cacheStats","getCacheStats","elementHitRatio","elementCacheHits","elementCacheMisses","iconHitRatio","iconMarkerCacheHits","iconMarkerCacheMisses","totalOperations","currentSide","currentState","newIconState","useBatch","largeDiff","_syncWithDiffConfig","chunksBySide","_refreshIconStates","RESOLVED","_updateNavigationCounter","toggleChunkSelection","selectedElements","oppositeElements","sortedOppositeElements","firstOppositeElement","oppositeIconMarker","isPlaceholderType","selectedLineId","selectedElement","selectedHasPlaceholder","selectedIsPlaceholderType","outerHTML","isAlreadySelected","_this$chunkManager$di","diffConfig","chunkSelections","_this$chunkManager$di2","_this$chunkManager$di3","getSelections","isChunkResolved","getUnresolvedCount","selectedChunks","selectedChunkIds","elementsToUpdate","_this4$chunkManager$d","_this4$chunkManager$d2"],"sourceRoot":""}